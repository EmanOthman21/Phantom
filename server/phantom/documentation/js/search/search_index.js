var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.194,1,2.566]],["body/controllers/AppController.html",[0,2.103,1,4.523,2,1.605,3,0.181,4,0.181,5,0.152,6,4.679,7,0.439,8,1.656,9,6.155,10,2.681,11,0.019,12,1.204,13,5.444,14,1.391,15,1.001,16,0.565,17,0.841,18,4.13,19,4.679,20,0.181,21,0.37,22,2.681,23,2.848,24,1.605,25,5.444,26,0.013,27,0.016,28,0.013]],["title/modules/AppModule.html",[29,0.774,30,2.566]],["body/modules/AppModule.html",[1,4.227,2,1.592,3,0.136,4,0.136,5,0.114,11,0.019,16,0.653,17,0.629,18,4.115,19,3.502,20,0.136,21,0.277,26,0.01,27,0.013,28,0.01,29,1.275,30,5.386,31,1.533,32,1.533,33,1.7,34,1.7,35,1.533,36,2.526,37,1.7,38,3.502,39,3.502,40,3.502,41,4.432,42,3.396,43,4.432,44,3.607,45,3.607,46,4.432,47,4.432,48,2.595,49,4.432,50,3.607,51,2.252,52,1.613,53,1.613,54,4.075,55,2.376,56,4.075,57,2.844,58,2.007,59,1.459,60,4.075,61,1.895,62,2.619,63,2.844,64,4.075,65,3.502,66,4.075,67,4.075,68,4.075,69,4.075]],["title/injectables/AppService.html",[18,2.195,70,0.896]],["body/injectables/AppService.html",[3,0.162,4,0.162,5,0.136,7,0.394,8,1.549,9,5.93,11,0.019,12,1.341,14,1.247,15,0.936,16,0.426,17,0.754,18,3.618,20,0.162,21,0.332,24,1.439,26,0.012,27,0.015,28,0.012,29,1.027,70,1.477,71,2.035,72,4.194,73,3.743,74,2.751,75,4.879,76,4.879,77,6.062,78,3.406,79,4.879,80,4.879,81,4.879,82,4.194,83,4.194,84,4.879,85,4.194,86,4.879,87,4.879,88,4.879,89,4.879,90,4.879,91,4.879,92,4.879,93,4.879,94,4.879,95,4.879,96,4.879,97,4.879,98,4.879,99,4.879,100,3.743,101,4.879,102,4.879,103,4.879,104,4.879,105,4.879]],["title/controllers/AuthController.html",[0,1.194,106,2.566]],["body/controllers/AuthController.html",[0,1.318,2,0.802,3,0.091,4,0.091,5,0.076,7,0.219,8,1.037,10,3.242,11,0.019,12,1.456,14,1.682,15,0.75,16,0.574,17,0.42,20,0.091,21,0.185,24,1.432,26,0.007,27,0.01,28,0.007,74,1.135,85,3.49,106,2.834,107,2.338,108,2.309,109,4.06,110,3.391,111,4.06,112,3.49,113,4.06,114,4.06,115,3.49,116,4.06,117,2.72,118,4.06,119,2.72,120,1.85,121,0.857,122,0.622,123,1.528,124,2.243,125,2.72,126,2.72,127,2.72,128,3.35,129,2.72,130,2.72,131,2.72,132,2.72,133,4.06,134,2.393,135,2.72,136,3.123,137,2.72,138,2.72,139,2.72,140,2.72,141,4.023,142,2.72,143,2.72,144,2.72,145,3.76,146,4.06,147,2.72,148,5.387,149,2.338,150,2.72,151,2.72,152,2.72,153,3.76,154,4.06,155,2.72,156,1.899,157,1.517,158,2.423,159,1.748,160,1.748,161,1.748,162,1.624,163,1.888,164,1.517,165,1.624,166,1.34,167,2.708,168,2.086,169,3.739,170,2.338,171,2.72,172,2.72,173,2.708,174,2.086,175,2.338,176,2.086,177,1.197,178,1.748,179,1.423,180,1.517,181,2.9,182,2.72,183,4.06,184,2.72,185,2.72,186,2.72,187,2.806,188,2.834,189,2.826,190,2.72,191,2.72,192,4.06,193,3.49,194,4.06,195,2.72,196,2.371,197,1.836,198,2.72,199,1.696,200,2.72,201,2.338,202,2.338,203,3.123,204,4.858,205,4.139,206,4.858,207,2.124,208,3.49,209,2.72,210,2.72,211,2.72,212,4.176,213,2.72,214,2.72,215,2.9,216,2.72,217,2.72,218,2.72,219,2.72,220,2.72,221,2.72,222,2.086,223,3.114,224,2.72,225,2.72,226,2.338,227,4.176,228,2.338,229,3.114,230,2.72,231,2.72,232,3.49,233,2.72,234,2.423,235,2.338,236,2.72,237,2.338,238,2.338]],["title/modules/AuthModule.html",[29,0.774,41,2.364]],["body/modules/AuthModule.html",[2,1.757,3,0.158,4,0.158,5,0.132,11,0.019,16,0.636,17,0.733,20,0.158,21,0.323,26,0.011,27,0.014,28,0.011,29,1.371,31,1.786,32,1.786,33,1.98,34,1.98,35,1.786,36,2.717,37,1.98,41,4.904,48,2.703,50,3.757,51,2.486,52,1.879,53,1.879,55,2.622,61,2.207,106,4.546,173,4.004,174,3.641,239,4.08,240,4.747,241,4.08,242,4.616,243,4.616,244,4.747,245,4.747,246,4.747,247,4.747,248,4.08]],["title/injectables/AuthService.html",[70,0.896,173,2.05]],["body/injectables/AuthService.html",[3,0.115,4,0.115,5,0.096,7,0.279,8,1.234,11,0.019,12,1.332,14,1.619,16,0.526,17,0.534,20,0.115,21,0.235,22,1.703,24,1.641,26,0.008,27,0.012,28,0.008,29,0.728,70,1.176,71,1.443,73,2.653,74,1.443,78,3.371,108,2.16,115,2.973,120,1.693,121,0.784,122,0.727,123,1.398,124,1.238,128,1.703,134,1.703,163,1.608,167,3.66,168,2.653,169,4.305,170,2.973,173,2.693,187,1.369,189,2.204,196,2.125,197,1.646,199,1.674,203,3.104,205,4.547,207,1.809,227,2.973,229,2.653,234,2.064,249,2.973,250,4.83,251,4.83,252,6.024,253,3.458,254,3.458,255,4.83,256,3.458,257,4.83,258,3.458,259,2.385,260,3.893,261,4.83,262,4.83,263,4.151,264,4.83,265,3.458,266,3.705,267,6.024,268,3.371,269,5.565,270,2.973,271,3.458,272,2.693,273,2.973,274,2.973,275,2.527,276,3.458,277,3.458,278,2.321,279,4.151,280,3.458,281,3.458,282,4.83,283,3.458,284,4.83,285,3.458,286,2.973,287,1.301,288,1.369,289,2.973,290,2.973,291,1.928,292,3.458,293,3.458,294,3.458,295,4.83,296,4.83,297,4.151,298,4.83,299,2.223,300,2.223,301,2.414,302,2.973,303,3.458]],["title/modules/BoardModule.html",[29,0.774,42,1.811]],["body/modules/BoardModule.html",[2,1.707,3,0.151,4,0.151,5,0.127,11,0.019,16,0.644,17,0.7,20,0.151,21,0.309,26,0.011,27,0.014,28,0.011,29,1.343,31,1.707,32,1.707,33,1.892,34,1.892,35,1.707,36,2.66,37,2.66,42,3.633,48,2.671,51,2.415,52,1.796,53,1.796,55,2.548,58,2.234,59,1.624,61,2.109,121,0.875,199,1.553,304,3.898,305,4.535,306,3.898,307,3.898,308,5.251,309,4.535,310,5.482,311,4.535,312,4.535,313,2.173,314,2.707,315,1.973,316,2.529,317,1.881,318,2.707,319,2.529,320,2.373,321,3.125]],["title/controllers/ChatController.html",[0,1.194,322,2.566]],["body/controllers/ChatController.html",[0,1.639,2,1.087,3,0.123,4,0.123,5,0.103,7,0.298,8,1.29,10,3.05,11,0.019,12,1.369,14,1.582,15,1.185,16,0.54,17,0.57,20,0.123,21,0.251,22,1.816,24,1.826,26,0.009,27,0.012,28,0.009,108,2.256,120,1.741,121,0.893,122,0.621,123,1.437,136,2.37,156,2.574,162,2.201,163,2.879,164,2.056,165,2.201,166,1.816,177,1.623,178,2.37,179,1.929,180,2.056,189,2.452,196,2.725,197,2.11,215,3.696,278,1.538,322,3.524,323,3.17,324,4.34,325,5.757,326,5.757,327,5.757,328,3.17,329,3.688,330,3.688,331,2.222,332,3.688,333,4.605,334,3.688,335,3.688,336,4.34,337,3.688,338,5.355,339,4.322,340,3.688,341,3.688,342,3.688,343,2.33,344,3.688,345,3.688,346,3.012,347,3.17,348,3.688,349,3.688,350,3.688,351,2.829,352,3.688,353,6.311,354,3.688,355,3.688,356,3.688,357,3.688,358,3.688,359,3.688,360,5.049,361,5.049,362,3.688,363,3.688,364,3.688,365,3.688,366,3.17,367,3.17]],["title/modules/ChatModule.html",[29,0.774,43,2.364]],["body/modules/ChatModule.html",[2,1.717,3,0.152,4,0.152,5,0.128,11,0.019,16,0.645,17,0.707,20,0.152,21,0.312,26,0.011,27,0.014,28,0.011,29,1.349,31,1.723,32,1.723,33,1.909,34,1.909,35,1.723,36,2.672,37,2.672,43,4.749,48,2.678,51,2.429,52,1.813,53,1.813,55,2.563,58,2.255,59,1.639,61,2.129,121,0.834,199,1.56,319,2.552,320,2.395,321,2.979,322,4.471,343,2.41,346,3.941,347,3.935,368,3.935,369,4.578,370,3.935,371,3.935,372,4.578,373,4.578,374,3.351,375,4.578,376,2.943,377,4.578,378,3.511]],["title/injectables/ChatService.html",[70,0.896,346,1.924]],["body/injectables/ChatService.html",[3,0.068,4,0.068,5,0.057,7,0.164,8,0.827,11,0.019,12,1.246,14,1.642,15,1.169,16,0.492,17,0.313,20,0.068,21,0.138,23,2.113,24,1.583,26,0.008,27,0.008,28,0.005,59,0.727,70,0.789,71,0.847,74,1.351,108,2.128,120,1.584,121,0.785,122,0.608,123,1.308,181,2.752,189,2.448,196,2.363,197,2.254,199,1.469,203,2.964,259,2.126,260,2.994,272,2.809,278,2.722,291,1.132,324,2.783,328,2.783,331,3.07,333,4.385,336,3.963,338,4.626,339,4.209,343,2.625,346,1.694,351,4.626,353,2.783,374,3.235,379,1.745,380,3.472,381,3.238,382,4.61,383,3.472,384,3.238,385,2.03,386,3.975,387,4.04,388,4.04,389,2.947,390,2.03,391,2.26,392,3.238,393,5.524,394,2.03,395,2.999,396,4.131,397,2.03,398,3.537,399,3.238,400,2.03,401,3.238,402,4.615,403,2.481,404,3.238,405,2.03,406,2.03,407,2.03,408,3.963,409,3.238,410,4.118,411,2.03,412,2.017,413,1.305,414,1.417,415,2.03,416,1.557,417,2.03,418,1.417,419,2.03,420,2.03,421,3.864,422,3.864,423,4.118,424,1.557,425,1.446,426,3.238,427,2.03,428,4.118,429,4.04,430,2.5,431,2.03,432,2.03,433,4.118,434,3.099,435,3.238,436,1.557,437,3.099,438,2.03,439,2.03,440,2.03,441,3.099,442,4.04,443,2.03,444,2.03,445,2.03,446,2.03,447,2.03,448,2.03,449,3.238,450,2.03,451,3.864,452,3.099,453,2.783,454,1.805,455,2.03,456,3.099,457,2.03,458,2.03,459,1.745,460,2.03,461,2.03,462,2.03,463,2.03,464,2.03,465,2.03,466,3.238,467,4.04,468,4.04,469,3.472,470,2.03,471,1.745,472,0.847,473,2.03,474,2.03,475,2.03,476,2.03]],["title/classes/CreatePinDto.html",[21,0.25,477,2.82]],["body/classes/CreatePinDto.html",[3,0.152,4,0.152,5,0.127,7,0.369,11,0.018,12,1.633,15,1.173,20,0.152,21,0.311,23,4.073,26,0.011,27,0.014,28,0.011,122,0.797,313,2.181,477,4.462,478,2.548,479,6.398,480,3.928,481,1.715,482,3.348,483,3.152,484,3.348,485,5.501,486,3.82,487,3.152,488,3.82,489,4.114,490,4.569,491,2.084,492,4.569,493,4.569,494,4.569,495,4.569,496,4.569,497,4.569,498,4.569,499,4.569]],["title/classes/EditBoardDto.html",[21,0.25,500,2.82]],["body/classes/EditBoardDto.html",[3,0.16,4,0.16,5,0.134,7,0.388,11,0.018,12,1.616,15,1.171,20,0.16,21,0.327,23,4.058,26,0.012,27,0.015,28,0.012,121,0.852,122,0.788,259,2.593,317,1.931,472,2.504,478,2.678,481,1.77,500,4.604,501,5.667,502,4.128,503,5.023,504,4.571,505,4.209,506,4.571,507,4.802,508,4.802,509,4.802,510,4.802,511,4.802,512,4.802,513,4.802]],["title/classes/EditCollaboratoresPermissionsDto.html",[21,0.25,514,2.82]],["body/classes/EditCollaboratoresPermissionsDto.html",[3,0.157,4,0.157,5,0.132,7,0.382,11,0.018,12,1.61,15,0.918,20,0.157,21,0.322,23,4.053,26,0.011,27,0.014,28,0.011,122,0.786,472,3.156,478,2.636,481,1.753,501,5.65,503,5.65,505,4.179,514,4.56,515,4.064,516,5.589,517,5.589,518,5.589,519,5.589,520,5.589,521,5.589,522,4.728,523,4.728,524,4.728,525,4.728,526,4.728,527,4.728,528,4.728]],["title/injectables/Email.html",[70,0.896,124,1.316]],["body/injectables/Email.html",[3,0.105,4,0.105,5,0.088,7,0.256,8,1.16,11,0.019,12,1.004,14,0.809,15,0.895,16,0.396,17,0.489,20,0.105,21,0.216,24,0.934,26,0.008,27,0.011,28,0.008,29,0.667,52,2.293,70,1.105,71,1.321,73,2.429,74,2.212,108,1.641,110,4.776,120,0.89,121,0.69,122,0.749,123,0.735,124,2.73,134,2.853,158,2.709,197,1.079,199,1.105,228,2.722,235,4.559,259,1.254,272,1.766,278,2.416,299,2.036,300,2.036,315,1.641,331,1.394,343,2.529,410,2.429,424,4.893,436,2.429,454,1.766,485,4.979,529,4.559,530,2.722,531,4.538,532,3.167,533,4.538,534,4.084,535,3.167,536,5.304,537,4.538,538,3.901,539,3.167,540,2.917,541,3.167,542,3.167,543,2.722,544,3.167,545,3.167,546,3.167,547,3.167,548,2.917,549,2.722,550,3.167,551,3.167,552,3.167,553,3.167,554,3.167,555,6.72,556,7.099,557,6.57,558,5.792,559,6.379,560,6.131,561,5.792,562,3.167,563,3.167,564,2.722,565,3.167,566,3.167,567,3.167,568,3.167,569,3.723,570,3.167,571,3.167,572,3.167,573,3.167,574,3.167,575,4.538,576,3.167,577,3.167,578,3.167,579,3.167,580,3.167,581,3.167,582,3.167]],["title/injectables/GoogleStrategy.html",[70,0.896,242,2.364]],["body/injectables/GoogleStrategy.html",[3,0.156,4,0.156,5,0.13,7,0.377,8,1.508,11,0.019,12,1.305,14,1.194,15,1.105,16,0.564,17,0.722,20,0.156,21,0.318,26,0.011,27,0.014,28,0.011,70,1.437,71,1.95,74,2.698,82,4.018,83,4.018,108,2.001,120,1.314,121,0.768,122,0.504,123,1.085,124,2.113,166,2.302,187,2.337,199,1.437,242,3.793,275,3.087,287,1.759,288,1.851,396,3.793,583,4.018,584,5.559,585,4.674,586,4.674,587,6.467,588,7.005,589,5.559,590,6.793,591,4.674,592,6.467,593,4.018,594,4.018,595,3.585,596,4.018,597,2.057,598,4.018,599,4.018,600,4.674,601,4.674,602,4.674,603,4.674,604,4.674,605,4.674,606,4.674,607,4.674,608,4.674,609,4.674,610,4.674,611,4.674,612,4.674,613,4.674]],["title/classes/HelpersUtils.html",[21,0.25,614,2.82]],["body/classes/HelpersUtils.html",[3,0.111,4,0.111,5,0.093,7,0.27,8,1.206,11,0.019,12,1.313,14,1.706,20,0.111,21,0.228,24,1.612,26,0.008,27,0.011,28,0.008,108,2.197,120,1.669,121,0.773,122,0.59,123,1.378,158,2.816,187,1.324,188,4.143,259,2.164,260,1.865,266,2.566,272,3.047,273,4.055,274,4.055,278,2.611,299,2.15,300,2.15,301,3.293,339,2.335,396,3.033,403,2.692,425,2.648,430,1.324,454,3.864,459,5.583,478,1.865,491,1.836,614,3.619,615,2.875,616,4.718,617,4.718,618,4.718,619,5.466,620,4.718,621,3.566,622,5.936,623,2.63,624,3.345,625,3.815,626,4.718,627,3.345,628,3.345,629,3.345,630,3.345,631,3.345,632,3.345,633,3.345,634,3.345,635,3.345,636,3.345,637,2.875,638,3.345,639,3.345,640,3.345,641,3.345,642,3.345,643,3.345,644,4.718,645,3.345,646,4.718,647,3.345,648,4.718,649,3.345,650,3.345,651,4.718,652,4.718,653,3.345,654,3.345,655,3.345,656,6.816,657,3.345,658,7.171,659,5.936,660,3.345,661,3.345,662,3.345,663,3.345,664,3.345,665,3.345,666,3.345,667,3.345,668,3.345,669,3.345,670,3.345,671,3.345,672,3.345,673,3.345]],["title/classes/HttpExceptionFilter.html",[21,0.25,177,1.618]],["body/classes/HttpExceptionFilter.html",[3,0.161,4,0.161,5,0.135,7,0.39,8,1.54,11,0.019,12,1.068,14,1.234,16,0.421,17,0.746,20,0.161,21,0.329,26,0.012,27,0.015,28,0.012,120,1.358,121,0.629,122,0.521,123,1.121,157,2.693,159,3.105,160,4.419,177,2.651,178,3.873,187,2.801,197,1.646,234,2.884,343,1.818,471,4.152,478,2.693,543,5.644,674,4.152,675,5.179,676,6.566,677,6.874,678,6.025,679,6.874,680,4.831,681,4.831,682,4.831,683,4.831,684,4.831,685,4.152,686,4.831,687,4.831,688,4.221,689,6.025,690,6.025,691,4.831,692,4.831,693,4.831,694,3.372,695,4.831,696,4.152,697,4.831,698,4.831,699,4.831,700,4.152,701,4.831,702,4.831]],["title/controllers/ImagesController.html",[0,1.194,703,2.566]],["body/controllers/ImagesController.html",[0,1.717,2,1.165,3,0.131,4,0.131,5,0.11,7,0.319,8,1.352,10,2.605,11,0.019,12,1.17,14,1.352,15,0.921,16,0.579,17,0.61,20,0.131,21,0.269,22,1.945,24,1.878,26,0.01,27,0.013,28,0.01,108,2.114,120,1.487,121,0.688,122,0.426,123,1.228,128,3.366,141,4.162,156,2.757,157,3.325,164,2.202,177,1.738,178,2.539,179,2.066,180,2.202,187,1.564,188,2.757,189,2.361,234,2.357,278,1.647,395,2.959,540,4.393,685,5.126,694,2.757,703,3.692,704,3.03,705,5.289,706,5.289,707,3.95,708,5.289,709,3.95,710,3.95,711,3.95,712,3.95,713,3.95,714,5.289,715,3.95,716,3.95,717,3.95,718,3.395,719,3.95,720,3.395,721,3.395,722,3.559,723,3.395,724,3.395,725,3.95,726,3.95,727,3.95,728,3.95,729,3.95,730,3.95,731,3.95,732,3.95,733,3.95,734,3.95,735,5.963,736,5.963,737,5.963,738,5.963,739,5.963,740,3.95,741,3.395,742,3.95,743,3.395,744,3.95,745,3.395,746,3.395,747,4.546,748,3.95,749,3.95,750,3.95,751,3.95,752,3.95]],["title/modules/ImagesModule.html",[29,0.774,44,1.924]],["body/modules/ImagesModule.html",[2,1.821,3,0.167,4,0.167,5,0.14,11,0.019,16,0.608,17,0.777,20,0.167,21,0.342,26,0.012,27,0.015,28,0.012,29,1.408,31,1.893,32,1.893,33,2.098,34,2.098,35,1.893,36,2.789,37,2.789,44,3.929,48,2.741,51,2.577,52,1.992,53,1.992,55,2.718,61,2.339,703,4.666,722,4.552,723,4.323,753,4.323,754,5.03,755,4.323,756,4.323,757,5.03,758,5.03]],["title/injectables/ImagesService.html",[70,0.896,722,2.195]],["body/injectables/ImagesService.html",[3,0.135,4,0.135,5,0.113,7,0.328,8,1.378,11,0.019,12,1.425,14,1.378,16,0.471,17,0.628,20,0.135,21,0.277,24,1.591,26,0.01,27,0.013,28,0.01,70,1.314,71,1.697,74,2.524,108,2.175,120,1.516,121,0.788,123,1.252,136,2.615,141,3.765,158,2.428,163,2.508,187,2.729,189,1.611,196,2.374,197,2.196,234,2.428,268,3.765,275,2.128,395,2.688,481,1.591,540,3.467,549,4.636,688,2.615,722,3.22,741,3.497,743,5.202,745,5.539,746,3.497,759,3.12,760,6.051,761,6.051,762,5.394,763,5.394,764,5.394,765,5.394,766,4.068,767,5.394,768,6.705,769,4.068,770,5.394,771,6.444,772,3.497,773,3.765,774,3.497,775,3.12,776,3.497,777,4.068,778,5.394,779,4.068,780,4.068,781,4.068,782,4.068,783,4.068,784,4.068,785,4.068,786,4.068,787,4.068,788,4.068,789,4.068,790,3.497,791,4.068,792,4.068,793,4.068,794,5.394,795,4.068,796,4.068,797,4.068,798,4.068]],["title/injectables/JwtStrategy.html",[70,0.896,243,2.364]],["body/injectables/JwtStrategy.html",[3,0.153,4,0.153,5,0.128,7,0.372,8,1.494,11,0.019,12,1.292,14,1.176,16,0.589,17,0.711,20,0.153,21,0.313,22,2.268,24,1.894,26,0.011,27,0.014,28,0.011,70,1.424,71,1.92,74,1.92,78,3.213,108,1.987,120,1.643,121,0.761,122,0.631,123,1.357,159,2.959,160,2.959,166,2.268,169,3.833,173,3.973,174,3.531,205,4.482,243,3.757,259,2.314,260,3.888,263,5.024,266,3.531,272,2.567,278,2.438,299,2.959,300,2.959,301,3.213,584,5.52,589,5.807,593,3.957,594,3.957,595,3.531,597,2.026,598,3.957,599,3.957,799,3.957,800,4.604,801,4.604,802,5.845,803,6.756,804,4.604,805,4.604,806,2.959,807,4.604,808,4.604,809,4.604,810,3.531,811,4.604]],["title/injectables/LoggingInterceptor.html",[70,0.896,812,2.566]],["body/injectables/LoggingInterceptor.html",[3,0.164,4,0.164,5,0.137,7,0.397,8,1.557,11,0.019,12,1.088,14,1.257,16,0.577,17,0.76,20,0.164,21,0.335,24,1.45,26,0.012,27,0.015,28,0.012,70,1.484,71,2.052,120,1.383,121,0.64,122,0.531,123,1.142,128,2.423,187,2.739,675,4.228,696,5.237,812,4.252,813,4.228,814,6.092,815,6.092,816,6.918,817,6.918,818,6.918,819,4.918,820,4.918,821,6.619,822,3.773,823,6.092,824,4.228,825,6.092,826,4.918,827,4.918,828,5.237,829,4.918,830,4.918,831,3.397,832,4.918,833,4.918,834,4.918,835,4.918,836,4.918,837,4.918]],["title/interfaces/LoginDto.html",[145,2.566,838,0.666]],["body/interfaces/LoginDto.html",[3,0.187,4,0.187,5,0.157,7,0.453,11,0.018,15,1.154,20,0.187,26,0.014,27,0.016,28,0.014,122,0.712,124,2.59,134,3.564,145,4.608,481,1.947,838,1.017,839,2.011,840,4.83]],["title/interfaces/Payload.html",[169,2.195,838,0.666]],["body/interfaces/Payload.html",[3,0.169,4,0.169,5,0.142,7,0.41,11,0.018,15,1.19,20,0.169,26,0.012,27,0.015,28,0.012,122,0.788,123,1.757,124,2.505,169,3.71,203,4.498,287,2.633,297,6.015,481,1.833,491,2.078,838,0.92,839,1.819,841,4.368,842,5.367,843,6.997]],["title/modules/PinsModule.html",[29,0.774,45,1.924]],["body/modules/PinsModule.html",[2,1.647,3,0.143,4,0.143,5,0.12,11,0.019,16,0.651,17,0.662,20,0.143,21,0.292,26,0.01,27,0.014,28,0.01,29,1.308,31,1.614,32,1.614,33,1.789,34,1.789,35,1.614,36,2.59,37,2.59,42,3.445,44,3.659,45,3.925,48,2.632,51,2.33,52,1.698,53,1.698,55,2.458,58,2.113,59,1.535,61,1.995,62,2.757,63,2.994,121,0.856,199,1.513,313,2.116,314,2.56,315,1.921,316,2.391,317,1.831,318,2.56,319,2.391,320,2.244,321,3.059,844,3.687,845,4.289,846,3.687,847,3.687,848,5.725,849,4.289,850,5.338,851,4.289,852,4.289,853,2.757,854,3.687]],["title/controllers/RecommendationController.html",[0,1.194,855,2.566]],["body/controllers/RecommendationController.html",[0,1.018,2,0.575,3,0.065,4,0.065,5,0.054,7,0.157,8,0.801,10,3.266,11,0.019,12,1.466,14,1.694,15,1.109,16,0.393,17,0.301,20,0.065,21,0.133,22,0.961,24,1.955,26,0.005,27,0.008,28,0.005,108,2.316,120,1.864,121,0.863,122,0.622,123,1.539,128,3.572,157,3.215,161,1.254,162,1.164,163,3.117,164,1.087,165,1.164,166,0.961,177,0.858,179,1.02,180,1.087,189,2.626,196,2.918,197,2.26,215,3.958,278,0.813,331,2.978,489,2.897,491,2.192,569,3.825,621,3.506,855,2.189,856,1.676,857,3.934,858,3.136,859,3.136,860,3.934,861,3.934,862,3.136,863,3.136,864,3.934,865,3.934,866,3.136,867,3.136,868,3.136,869,3.934,870,3.934,871,3.136,872,1.95,873,5.141,874,1.95,875,1.95,876,1.95,877,1.95,878,1.95,879,1.95,880,3.706,881,1.95,882,1.95,883,1.95,884,4.956,885,1.95,886,1.95,887,1.95,888,3.737,889,1.95,890,1.95,891,1.95,892,1.95,893,1.95,894,1.95,895,1.95,896,1.95,897,1.95,898,1.95,899,1.95,900,1.95,901,1.95,902,1.95,903,1.95,904,1.95,905,1.95,906,1.95,907,1.95,908,1.95,909,1.95,910,1.95,911,1.95,912,1.95,913,1.95,914,1.95,915,1.95,916,1.95,917,1.95,918,1.95,919,1.95,920,1.95,921,1.496,922,1.361,923,2.746,924,1.676,925,1.95,926,1.95,927,6.242,928,4.438,929,5.274,930,1.95,931,1.95,932,3.145,933,3.145,934,1.95,935,1.95,936,1.95,937,3.136,938,3.159,939,1.95,940,1.95,941,1.95,942,1.95,943,4.506,944,1.95,945,1.95,946,3.136,947,1.95,948,1.95,949,1.95,950,1.95,951,1.95,952,1.95,953,1.95,954,1.95,955,1.95,956,1.95,957,1.95,958,1.95,959,1.95,960,1.95,961,1.95,962,1.95,963,2.529,964,1.95,965,1.95,966,1.95,967,1.95,968,1.95,969,1.95,970,1.95,971,1.95,972,1.95,973,1.95]],["title/modules/RecommendationModule.html",[29,0.774,46,2.364]],["body/modules/RecommendationModule.html",[2,1.677,3,0.147,4,0.147,5,0.123,11,0.019,16,0.654,17,0.682,20,0.147,21,0.3,26,0.011,27,0.014,28,0.011,29,1.326,31,1.661,32,1.661,33,1.841,34,1.841,35,1.661,36,2.626,37,2.626,42,2.174,45,2.308,46,4.718,48,2.652,51,2.373,52,1.747,53,1.747,55,2.503,57,3.08,58,2.174,59,1.58,61,2.052,62,2.837,121,0.866,199,1.533,313,2.145,314,2.634,315,1.947,316,2.46,317,1.856,318,2.634,319,2.46,320,2.308,321,3.093,853,2.837,854,3.793,855,4.394,923,5.231,924,3.793,974,3.793,975,4.413,976,3.793,977,3.793,978,4.413,979,4.413]],["title/interfaces/RegisterDto.html",[153,2.566,838,0.666]],["body/interfaces/RegisterDto.html",[3,0.151,4,0.151,5,0.127,7,0.366,11,0.018,15,1.208,20,0.151,26,0.011,27,0.014,28,0.011,122,0.812,123,1.761,124,2.405,134,3.309,153,4.041,207,3.515,286,5.775,287,2.528,288,2.66,290,5.775,472,2.66,481,1.707,838,0.821,839,1.624,842,5.154,980,3.898,981,5.775,982,4.689,983,5.775,984,4.689]],["title/controllers/SearchController.html",[0,1.194,985,2.566]],["body/controllers/SearchController.html",[0,0.958,2,0.87,3,0.098,4,0.098,5,0.082,7,0.238,8,1.101,10,3.066,11,0.019,12,1.377,14,1.591,15,1.082,16,0.489,17,0.456,20,0.098,21,0.201,22,1.453,24,2.065,26,0.007,27,0.01,28,0.007,108,2.26,120,1.75,121,0.975,122,0.604,123,1.445,128,3.449,157,3.323,161,1.896,162,1.761,163,2.99,164,1.645,165,1.761,166,1.453,177,1.298,179,1.543,180,1.645,189,2.705,197,2.122,215,3.716,331,2.739,472,2.921,491,2.311,621,3.782,888,4.03,922,2.059,928,4.16,932,3.911,933,3.911,938,2.739,963,3.274,985,3.009,986,2.535,987,2.95,988,2.059,989,4.378,990,4.378,991,3.705,992,4.378,993,4.378,994,3.705,995,2.95,996,5.182,997,2.95,998,2.95,999,2.95,1000,2.95,1001,2.95,1002,2.95,1003,2.95,1004,2.95,1005,2.95,1006,2.95,1007,2.95,1008,2.95,1009,2.95,1010,2.95,1011,2.95,1012,2.95,1013,2.95,1014,3.04,1015,2.535,1016,2.95,1017,2.95,1018,5.96,1019,5.603,1020,5.603,1021,2.95,1022,2.95,1023,2.95,1024,2.95,1025,5.094,1026,2.95,1027,2.95,1028,2.95,1029,2.95,1030,2.95,1031,2.95,1032,2.95,1033,2.95,1034,2.95]],["title/modules/SearchModule.html",[29,0.774,47,2.364]],["body/modules/SearchModule.html",[2,1.701,3,0.15,4,0.15,5,0.126,11,0.019,16,0.659,17,0.697,20,0.15,21,0.307,26,0.011,27,0.014,28,0.011,29,1.339,31,1.697,32,1.697,33,1.881,34,1.881,35,1.697,36,2.653,37,1.881,42,2.222,44,2.36,45,2.36,47,4.69,48,2.667,50,2.36,51,2.406,52,1.786,53,1.786,55,2.539,57,3.148,58,2.222,59,1.615,61,2.098,62,2.899,63,3.148,65,3.877,121,0.828,199,1.549,313,2.168,314,2.692,315,1.968,316,2.515,319,2.515,320,2.36,321,2.958,985,4.44,988,4.027,1014,4.231,1015,3.877,1035,3.877,1036,4.51,1037,3.877,1038,4.51,1039,4.51,1040,3.46]],["title/injectables/SearchService.html",[70,0.896,1014,2.195]],["body/injectables/SearchService.html",[3,0.062,4,0.062,5,0.052,7,0.15,8,0.772,11,0.019,12,1.295,14,1.696,15,1.013,16,0.494,17,0.288,20,0.062,21,0.127,23,1.995,24,1.775,26,0.016,27,0.007,28,0.005,59,0.667,70,0.736,71,0.777,74,1.261,108,2.177,120,1.647,121,0.982,122,0.411,123,1.36,141,1.3,163,1.405,181,2.619,187,0.738,189,2.654,196,1.33,197,1.299,199,1.555,207,0.974,259,2.438,260,3.16,272,3.16,275,0.974,278,2.885,287,0.701,288,0.738,291,1.039,313,1.644,315,1.492,317,1.124,331,2.394,386,4.309,389,2.846,391,2.661,395,2.012,396,3.869,398,4.617,403,2.161,410,2.925,412,1.082,413,1.197,414,1.3,416,1.429,418,1.3,421,4.347,422,4.347,423,4.347,425,1.948,428,1.429,434,3.365,453,1.601,454,3.771,456,1.429,469,1.601,483,1.488,486,2.619,488,2.619,491,2.053,534,1.804,548,2.451,621,3.826,625,1.3,637,2.598,888,4.097,938,1.931,963,2.451,988,3.956,989,2.598,990,2.598,991,2.598,992,2.598,993,2.598,994,2.598,996,2.661,1014,1.804,1040,3.7,1041,1.601,1042,3.022,1043,1.863,1044,2.925,1045,1.863,1046,3.022,1047,3.022,1048,1.863,1049,1.863,1050,4.173,1051,1.863,1052,6.384,1053,3.022,1054,1.863,1055,3.022,1056,3.022,1057,1.863,1058,3.022,1059,1.863,1060,3.022,1061,1.863,1062,3.022,1063,1.863,1064,3.022,1065,1.863,1066,1.863,1067,1.863,1068,1.429,1069,1.863,1070,1.429,1071,1.863,1072,1.863,1073,3.813,1074,1.863,1075,3.022,1076,1.601,1077,3.022,1078,3.813,1079,3.022,1080,3.022,1081,1.863,1082,3.022,1083,1.863,1084,1.863,1085,1.863,1086,1.863,1087,2.598,1088,3.022,1089,1.863,1090,1.863,1091,1.863,1092,4.387,1093,1.863,1094,2.318,1095,1.863,1096,1.863,1097,1.863,1098,1.863,1099,3.277,1100,3.277,1101,1.685,1102,1.429,1103,3.022,1104,1.863,1105,1.863,1106,1.863,1107,1.863,1108,1.863,1109,1.601,1110,3.813,1111,3.022,1112,3.062,1113,2.109,1114,1.685,1115,1.863]],["title/classes/SharedGateway.html",[21,0.25,376,2.364]],["body/classes/SharedGateway.html",[3,0.067,4,0.067,5,0.057,7,0.164,8,0.827,10,3.165,11,0.019,12,1.462,14,1.642,16,0.491,20,0.067,21,0.138,23,1.693,26,0.005,27,0.008,28,0.005,59,0.726,74,1.35,78,2.818,108,2.278,120,1.834,121,0.849,122,0.722,123,1.514,181,2.41,187,2.23,188,5.128,189,2.762,193,3.47,199,1.227,205,2.595,207,1.693,208,1.743,229,1.555,287,1.218,288,1.281,289,1.743,315,1.249,331,1.777,333,3.876,338,3.863,343,1.519,346,2.808,367,1.743,376,2.08,380,2.781,383,2.781,386,3.62,391,2.818,393,5.182,402,5.027,403,0.999,408,5.027,412,0.726,413,1.304,414,1.415,418,1.415,430,0.803,454,3.686,478,1.131,481,0.954,534,1.21,540,1.304,700,3.47,806,1.304,828,1.743,880,1.304,1044,3.097,1068,1.555,1070,1.555,1094,1.555,1109,3.47,1116,1.555,1117,3.236,1118,1.804,1119,3.236,1120,3.236,1121,3.236,1122,3.236,1123,1.804,1124,3.236,1125,2.028,1126,3.236,1127,4.037,1128,2.028,1129,7.521,1130,2.028,1131,2.028,1132,3.236,1133,3.236,1134,2.028,1135,3.236,1136,3.236,1137,2.028,1138,3.236,1139,2.028,1140,2.028,1141,3.236,1142,3.236,1143,2.028,1144,2.028,1145,2.028,1146,2.028,1147,3.236,1148,3.236,1149,2.028,1150,3.236,1151,3.236,1152,2.028,1153,3.236,1154,3.236,1155,2.028,1156,3.236,1157,3.236,1158,2.028,1159,3.236,1160,3.236,1161,2.028,1162,3.236,1163,3.236,1164,2.028,1165,2.028,1166,3.236,1167,1.743,1168,1.743,1169,1.743,1170,1.743,1171,4.037,1172,4.037,1173,4.037,1174,1.555,1175,2.028,1176,2.028,1177,2.028,1178,5.849,1179,4.608,1180,4.608,1181,4.608,1182,2.028,1183,4.608,1184,4.608,1185,4.608,1186,4.608,1187,4.608,1188,4.608,1189,4.608,1190,4.608,1191,4.608,1192,4.608,1193,5.035,1194,2.028,1195,2.028,1196,2.028,1197,2.028,1198,2.028,1199,2.028,1200,4.608,1201,2.028,1202,2.028,1203,2.028,1204,2.028,1205,3.236,1206,1.061,1207,2.028,1208,1.743,1209,5.367,1210,2.028,1211,2.028,1212,1.304,1213,2.028,1214,2.028,1215,2.028,1216,1.304,1217,2.028,1218,2.028,1219,2.028,1220,1.304,1221,2.028,1222,2.028,1223,2.028,1224,2.028,1225,1.304,1226,2.028,1227,2.028,1228,2.028,1229,1.304,1230,2.028,1231,2.028,1232,2.028,1233,1.21]],["title/modules/SharedModule.html",[29,0.774,48,1.384]],["body/modules/SharedModule.html",[3,0.129,4,0.129,5,0.108,11,0.019,16,0.655,17,0.598,20,0.129,21,0.264,26,0.009,27,0.013,28,0.009,29,1.243,31,1.458,32,1.458,33,1.616,34,1.616,35,1.458,36,2.463,37,2.463,48,2.812,51,2.178,52,1.534,53,1.534,55,1.705,58,1.908,59,1.387,121,0.885,124,2.631,176,2.972,177,2.298,179,2.027,199,1.438,313,2.013,314,2.313,315,1.827,316,2.16,317,1.741,318,2.313,319,2.16,320,2.027,321,3.16,343,2.222,346,3.555,374,3.089,376,3.356,378,2.972,389,3.845,424,2.972,812,3.644,853,4.725,1169,3.33,1234,3.33,1235,3.33,1236,3.33,1237,3.875,1238,5.221,1239,5.221,1240,3.33,1241,3.875,1242,3.875,1243,3.875,1244,3.875,1245,3.875,1246,3.33,1247,5.221,1248,5.221]],["title/controllers/TopicController.html",[0,1.194,1249,2.566]],["body/controllers/TopicController.html",[0,1.237,2,0.737,3,0.083,4,0.083,5,0.07,7,0.202,8,0.974,10,3.285,11,0.019,12,1.475,14,1.704,15,1.119,16,0.45,17,0.386,20,0.083,21,0.17,22,1.232,24,2.089,26,0.006,27,0.009,28,0.006,108,2.321,120,1.875,121,0.908,122,0.632,123,1.548,128,3.49,136,1.607,156,1.745,157,3.098,158,1.492,161,1.607,162,1.492,163,2.401,164,1.394,165,1.492,166,1.232,177,1.1,179,1.308,180,1.394,189,2.641,196,1.677,197,2.191,215,3.838,259,2.044,268,1.745,278,1.043,291,1.394,315,1.179,317,2.089,331,1.1,343,0.941,366,2.149,403,1.232,425,2.302,482,2.701,483,2.274,484,2.701,489,2.968,491,2.092,548,1.607,569,2.968,621,2.701,625,1.745,880,2.968,888,2.878,921,1.918,922,1.745,928,1.745,932,1.745,933,1.745,938,2.272,1050,4.491,1249,2.66,1250,2.149,1251,3.81,1252,4.616,1253,3.275,1254,3.968,1255,4.616,1256,2.66,1257,3.275,1258,4.616,1259,3.81,1260,3.275,1261,3.275,1262,2.5,1263,3.81,1264,2.5,1265,5.813,1266,2.5,1267,2.5,1268,2.5,1269,2.5,1270,2.149,1271,5.855,1272,2.5,1273,2.149,1274,2.5,1275,2.5,1276,2.5,1277,4.616,1278,3.81,1279,2.5,1280,2.5,1281,2.149,1282,2.5,1283,2.5,1284,2.149,1285,2.5,1286,2.5,1287,5.033,1288,2.5,1289,2.5,1290,2.5,1291,2.5,1292,2.5,1293,2.5,1294,2.5,1295,2.5,1296,2.5,1297,2.149,1298,2.5,1299,5.557,1300,2.756,1301,2.149,1302,2.5,1303,2.5,1304,2.5,1305,4.616,1306,2.5,1307,2.5,1308,3.81,1309,2.5,1310,2.5,1311,2.5,1312,2.5,1313,2.5,1314,2.5,1315,2.5,1316,2.5,1317,2.5,1318,2.5,1319,2.5,1320,2.5,1321,2.5,1322,2.5,1323,2.5,1324,2.5,1325,3.81,1326,2.5,1327,2.5,1328,2.5,1329,2.149,1330,2.5,1331,2.5,1332,4.616,1333,3.275,1334,2.149,1335,2.5,1336,2.5,1337,2.149,1338,2.149,1339,2.5,1340,2.5,1341,2.149,1342,2.5,1343,2.5]],["title/modules/TopicModule.html",[29,0.774,49,2.364]],["body/modules/TopicModule.html",[2,1.695,3,0.149,4,0.149,5,0.125,11,0.019,16,0.655,17,0.693,20,0.149,21,0.305,26,0.011,27,0.014,28,0.011,29,1.336,31,1.688,32,1.688,33,1.871,34,1.871,35,1.688,36,2.646,37,1.871,42,2.209,44,2.347,45,2.347,48,2.663,49,4.77,50,3.703,51,2.398,52,1.776,53,1.776,55,2.53,57,3.131,58,2.209,59,1.606,61,2.086,62,2.883,63,3.131,121,0.826,199,1.545,248,3.856,315,1.963,316,2.501,317,1.871,318,2.677,319,2.501,320,2.347,321,2.95,1249,4.428,1300,4.225,1301,3.856,1344,3.856,1345,4.485,1346,3.856,1347,4.485,1348,4.485]],["title/injectables/TopicService.html",[70,0.896,1300,2.195]],["body/injectables/TopicService.html",[3,0.056,4,0.056,5,0.047,7,0.136,8,0.711,11,0.019,12,1.348,14,1.722,15,1.08,16,0.475,17,0.26,20,0.056,21,0.115,23,1.86,24,1.933,26,0.004,27,0.007,28,0.004,59,0.603,70,0.678,71,0.703,74,1.161,108,2.216,120,1.714,121,0.915,122,0.384,123,1.415,159,1.083,160,2.655,163,1.654,167,2.905,168,1.292,181,2.729,187,1.95,189,2.622,196,2.853,197,2.234,199,1.613,201,3.057,202,2.392,203,1.789,222,1.292,223,3.168,259,2.689,260,3.038,272,3.038,278,2.788,291,0.939,299,2.655,300,2.655,302,1.448,315,1.8,317,2.178,331,2.561,386,3.741,389,2.726,391,2.482,395,3.031,396,3.741,398,3.168,403,2.034,412,1.865,413,1.083,416,1.292,418,1.176,421,3.168,422,3.168,423,3.777,425,1.273,428,3.168,434,1.292,454,3.327,456,2.135,472,1.161,482,2.576,483,2.684,484,2.576,489,2.655,491,2.067,540,1.083,548,1.083,569,2.286,621,2.726,625,1.176,747,4.233,810,3.777,880,2.655,888,2.905,938,2.293,1044,2.728,1068,1.292,1070,1.292,1076,1.448,1087,1.448,1094,2.135,1099,1.448,1100,1.448,1101,2.905,1253,2.392,1254,3.057,1256,1.942,1257,2.392,1260,2.392,1261,2.392,1265,3.55,1273,1.448,1287,5.836,1300,1.661,1337,1.448,1349,1.448,1350,2.783,1351,2.783,1352,2.783,1353,2.783,1354,2.783,1355,1.684,1356,1.684,1357,2.783,1358,2.783,1359,1.684,1360,2.783,1361,1.684,1362,1.684,1363,4.924,1364,2.783,1365,2.783,1366,1.684,1367,1.684,1368,2.783,1369,1.684,1370,2.728,1371,2.783,1372,1.684,1373,2.783,1374,1.684,1375,2.783,1376,1.684,1377,2.783,1378,1.684,1379,2.783,1380,1.684,1381,2.783,1382,1.684,1383,1.684,1384,1.684,1385,1.684,1386,2.783,1387,2.783,1388,1.684,1389,2.783,1390,2.783,1391,2.783,1392,2.783,1393,2.783,1394,1.684,1395,2.783,1396,2.783,1397,1.684,1398,3.556,1399,1.684,1400,1.684,1401,1.684,1402,1.684,1403,1.684,1404,1.684,1405,1.684,1406,1.684,1407,1.684,1408,2.783,1409,2.783,1410,1.684,1411,1.684,1412,1.684,1413,1.684,1414,2.783,1415,2.783,1416,2.783,1417,2.783,1418,3.556,1419,1.684,1420,2.783,1421,1.684,1422,1.448,1423,1.684,1424,2.783,1425,1.684,1426,3.556,1427,2.783,1428,1.684,1429,1.684,1430,1.684,1431,1.448,1432,2.783,1433,1.684,1434,1.684,1435,1.684,1436,1.684]],["title/interfaces/UpdateDto.html",[838,0.666,1437,2.566]],["body/interfaces/UpdateDto.html",[3,0.145,4,0.145,5,0.122,7,0.352,11,0.018,15,1.208,20,0.145,26,0.011,27,0.014,28,0.011,122,0.811,123,1.8,124,2.369,134,3.26,207,3.462,287,2.491,288,2.621,430,2.478,481,1.664,534,3.951,838,0.789,839,1.56,842,5.077,981,5.689,982,4.62,983,5.689,984,4.62,1437,3.938,1438,3.343,1439,3.746,1440,5.077,1441,5.077]],["title/interfaces/UpdateSettingsDto.html",[838,0.666,1442,2.566]],["body/interfaces/UpdateSettingsDto.html",[3,0.143,4,0.143,5,0.12,7,0.346,11,0.018,20,0.143,26,0.01,27,0.014,28,0.01,122,0.813,123,1.802,199,1.045,275,3.442,472,3.266,481,1.647,838,0.777,839,1.535,1438,3.29,1442,3.898,1443,3.687,1444,5.046,1445,5.046,1446,5.046,1447,5.046,1448,6.579,1449,5.046,1450,5.046,1451,5.046,1452,4.592,1453,5.046,1454,5.046,1455,5.046,1456,5.046]],["title/controllers/UserController.html",[0,1.194,1457,2.566]],["body/controllers/UserController.html",[0,0.941,2,0.522,3,0.059,4,0.059,5,0.049,7,0.297,8,0.741,10,3.325,11,0.019,12,1.493,14,1.725,15,0.956,16,0.464,17,0.273,20,0.059,21,0.12,22,0.872,24,1.911,26,0.004,27,0.007,28,0.004,53,1.148,108,2.332,112,3.658,120,1.898,121,0.879,122,0.708,123,1.567,124,2.059,128,3.607,134,1.428,136,2.366,149,1.521,157,3.38,158,1.056,159,1.138,160,2.366,161,1.138,162,1.056,164,0.987,165,1.056,166,0.872,167,2.052,175,1.521,176,1.357,177,0.779,179,0.926,180,0.987,181,1.056,187,2.493,189,2.803,196,2.604,197,2.017,199,1.68,205,1.138,212,1.521,215,3.957,222,1.357,223,3.602,226,1.521,232,1.521,234,2.197,237,1.521,238,2.491,268,1.235,278,1.535,291,1.616,403,0.872,436,1.357,472,1.535,491,2.19,548,1.138,564,2.491,569,2.736,621,3.431,790,1.521,810,2.223,888,3.657,921,1.357,922,1.235,928,2.97,932,2.97,933,2.97,938,1.275,1050,5.031,1270,1.521,1281,1.521,1284,1.521,1297,1.521,1329,1.521,1333,2.491,1334,1.521,1338,1.521,1341,1.521,1422,1.521,1437,2.97,1442,2.97,1452,1.235,1457,2.023,1458,1.521,1459,2.898,1460,2.898,1461,2.898,1462,3.681,1463,3.681,1464,2.898,1465,2.898,1466,2.898,1467,3.681,1468,3.681,1469,2.898,1470,2.898,1471,3.681,1472,2.898,1473,2.898,1474,2.898,1475,2.898,1476,3.681,1477,1.77,1478,5.043,1479,1.77,1480,1.77,1481,1.77,1482,1.77,1483,1.77,1484,1.77,1485,1.77,1486,1.77,1487,1.77,1488,1.77,1489,1.77,1490,1.77,1491,1.77,1492,1.77,1493,1.77,1494,2.898,1495,1.77,1496,1.77,1497,2.898,1498,1.77,1499,1.77,1500,1.77,1501,1.77,1502,1.77,1503,1.77,1504,1.77,1505,1.77,1506,1.77,1507,1.77,1508,1.77,1509,1.77,1510,1.77,1511,1.77,1512,1.77,1513,1.77,1514,4.256,1515,5.043,1516,1.77,1517,1.77,1518,1.77,1519,1.77,1520,1.77,1521,1.77,1522,3.264,1523,1.77,1524,1.77,1525,1.77,1526,1.77,1527,1.77,1528,5.556,1529,2.898,1530,1.77,1531,1.77,1532,2.898,1533,1.77,1534,1.77,1535,1.521,1536,2.898,1537,1.77,1538,1.77,1539,1.77,1540,3.681,1541,1.77,1542,1.77,1543,1.77,1544,1.77,1545,1.77,1546,1.77,1547,1.77,1548,1.77,1549,1.77,1550,1.77,1551,1.77,1552,1.77,1553,1.77,1554,2.898,1555,1.77,1556,1.77,1557,1.77,1558,1.77,1559,1.77,1560,1.77,1561,1.77,1562,1.77,1563,1.77,1564,1.77,1565,2.898,1566,4.256,1567,1.77,1568,2.898,1569,1.77,1570,1.77,1571,1.77,1572,1.77,1573,1.77,1574,1.77,1575,1.77,1576,1.77,1577,1.77,1578,1.77,1579,5.324,1580,1.77,1581,2.898,1582,1.77,1583,1.77,1584,1.77,1585,1.77,1586,1.77,1587,1.77,1588,1.77,1589,1.77,1590,3.681,1591,1.77,1592,1.77,1593,1.77,1594,1.77,1595,2.898,1596,1.77,1597,1.77,1598,1.77,1599,1.77,1600,1.77,1601,1.77,1602,1.77,1603,1.77,1604,1.77,1605,1.77,1606,1.77,1607,1.77,1608,1.77,1609,1.77]],["title/modules/UserModule.html",[29,0.774,50,1.924]],["body/modules/UserModule.html",[2,1.637,3,0.142,4,0.142,5,0.119,11,0.019,16,0.65,17,0.657,20,0.142,21,0.289,26,0.01,27,0.013,28,0.01,29,1.302,31,1.6,32,1.6,33,1.773,34,1.773,35,1.6,36,2.579,37,2.579,48,2.626,50,3.876,51,2.316,52,1.683,53,1.683,55,2.444,58,2.094,59,1.522,61,1.977,121,0.908,167,4.156,199,1.506,308,4.87,313,2.108,314,2.538,315,1.913,316,2.37,317,1.824,318,2.538,320,2.224,321,3.245,343,2.327,374,3.235,378,3.261,1246,3.655,1457,4.316,1535,3.655,1610,3.655,1611,4.252,1612,3.655,1613,3.655,1614,4.252,1615,4.252,1616,4.252,1617,4.252]],["title/injectables/ValidationService.html",[70,0.896,389,1.924]],["body/injectables/ValidationService.html",[3,0.15,4,0.15,5,0.126,7,0.365,8,1.476,11,0.019,12,1.408,14,1.476,15,0.983,16,0.585,17,0.698,20,0.15,21,0.308,24,1.877,26,0.011,27,0.014,28,0.011,59,1.618,70,1.407,71,1.885,74,2.656,108,1.969,120,1.624,121,0.752,122,0.487,123,1.341,163,2.686,187,1.789,196,1.988,197,1.54,199,1.101,260,3.55,351,4.431,386,2.905,389,3.022,395,2.409,403,2.226,412,1.618,413,2.905,414,3.154,454,2.519,491,2.194,621,3.022,888,3.741,1618,3.466,1619,5.776,1620,6.366,1621,4.519,1622,5.776,1623,4.519,1624,4.519,1625,6.366,1626,4.519,1627,3.466,1628,3.884,1629,4.519,1630,4.519,1631,4.519,1632,6.366,1633,6.709,1634,4.519,1635,4.519,1636,4.519]],["title/interfaces/board.html",[313,1.253,838,0.666]],["body/interfaces/board.html",[3,0.129,4,0.129,5,0.108,7,0.314,11,0.019,15,1.186,16,0.456,20,0.174,26,0.009,27,0.013,28,0.009,121,0.824,122,0.824,259,2.506,287,1.463,288,1.539,313,1.783,317,1.866,395,1.621,412,2.117,425,2.727,430,2.342,472,2.837,481,1.543,487,1.915,491,1.83,504,4.417,505,4.067,506,4.417,597,2.603,623,3.528,688,4.067,831,3.528,838,0.947,839,1.391,938,2.993,1101,3.682,1112,4.417,1113,4.61,1114,3.528,1206,3.31,1637,2.981,1638,3.117,1639,4.854,1640,3.528,1641,4.417,1642,3.942,1643,2.981,1644,2.981,1645,2.737,1646,2.32,1647,2.981]],["title/interfaces/chat.html",[374,1.924,838,0.666]],["body/interfaces/chat.html",[3,0.168,4,0.168,5,0.141,7,0.408,11,0.019,15,1.107,16,0.54,20,0.168,26,0.012,27,0.015,28,0.012,121,0.909,122,0.797,331,2.222,343,1.901,374,3.24,412,2.398,425,2.611,430,2.976,433,5.356,437,5.356,481,1.826,597,2.725,623,3.453,838,0.914,839,1.808,1638,3.299,1648,4.341,1649,6.002]],["title/interfaces/comment.html",[838,0.666,1118,2.05]],["body/interfaces/comment.html",[3,0.144,4,0.144,5,0.12,7,0.348,11,0.019,15,1.165,16,0.489,20,0.207,26,0.01,27,0.014,28,0.01,122,0.769,287,1.623,288,1.707,313,1.469,315,1.334,317,1.271,395,1.798,412,2.229,425,2.616,430,2.919,481,1.652,482,2.256,483,2.124,484,2.256,486,2.574,487,2.124,488,2.574,491,2.28,597,2.901,623,3.124,831,2.404,838,1.127,839,1.543,1114,2.404,1118,3.905,1123,3.124,1206,3.257,1212,2.772,1216,2.772,1220,2.772,1225,2.772,1229,2.772,1233,3.345,1638,3.366,1640,2.404,1642,2.574,1645,3.73,1646,2.574,1650,3.009,1651,4.601,1652,4.392,1653,4.601,1654,3.009,1655,3.911,1656,3.009,1657,3.009,1658,3.009,1659,3.009]],["title/coverage.html",[1660,4.331]],["body/coverage.html",[0,2.219,1,2.061,5,0.082,6,2.538,11,0.019,18,1.763,21,0.424,26,0.007,27,0.01,28,0.007,35,1.111,70,1.761,72,2.538,106,2.061,107,2.538,122,0.319,124,1.057,145,2.061,153,2.061,167,1.647,169,1.763,173,1.647,177,1.3,178,1.898,197,1.006,199,1.366,242,1.898,243,1.898,249,2.538,301,2.061,308,2.061,310,2.538,313,1.47,315,1.335,317,1.272,321,2.896,322,2.061,323,2.538,343,1.624,346,1.545,374,2.257,376,1.898,379,2.538,389,1.545,403,3.842,477,2.265,479,2.538,480,2.538,487,1.455,500,2.265,501,3.309,502,2.538,503,2.265,514,2.265,515,2.538,529,2.538,530,2.538,583,2.538,614,2.265,615,2.538,674,2.538,694,2.061,703,2.061,704,3.309,722,1.763,759,4.3,773,2.061,775,2.265,799,2.538,806,1.898,812,2.061,813,2.538,822,2.265,838,1.291,840,2.538,841,2.538,848,2.265,850,2.538,853,1.898,855,2.061,856,2.538,923,2.061,980,2.538,985,2.061,986,2.538,1014,1.763,1041,2.538,1116,3.309,1118,1.647,1123,1.647,1249,2.061,1250,2.538,1300,1.763,1349,2.538,1437,2.061,1438,3.309,1439,2.538,1442,2.061,1443,2.538,1457,2.061,1458,2.538,1618,3.309,1627,2.265,1637,3.309,1648,2.538,1650,3.558,1660,2.538,1661,2.953,1662,2.953,1663,2.953,1664,5.097,1665,6.228,1666,5.097,1667,4.314,1668,4.314,1669,4.314,1670,2.953,1671,5.606,1672,2.953,1673,2.953,1674,5.097,1675,5.097,1676,7.4,1677,7.426,1678,3.91,1679,2.538,1680,3.708,1681,3.708,1682,3.708,1683,3.708,1684,3.708,1685,3.708,1686,2.953,1687,2.953,1688,2.953,1689,4.314,1690,2.953,1691,2.953,1692,5.097,1693,2.953,1694,4.314,1695,2.953,1696,2.953,1697,5.097,1698,2.538,1699,2.538,1700,2.953,1701,2.538,1702,2.953,1703,2.953,1704,2.953,1705,2.953,1706,2.953,1707,2.538,1708,2.953,1709,2.953]],["title/dependencies.html",[32,1.666,1710,3.061]],["body/dependencies.html",[11,0.019,17,0.697,21,0.307,26,0.011,27,0.014,28,0.011,32,1.697,59,1.615,166,2.222,270,3.877,275,3.018,412,2.065,538,3.877,595,4.879,596,3.877,718,3.877,720,4.959,721,3.877,773,3.148,806,2.899,824,3.877,988,4.68,1040,3.46,1167,3.877,1168,3.877,1240,3.877,1711,4.51,1712,4.51,1713,4.51,1714,4.51,1715,4.51,1716,4.51,1717,4.51,1718,4.51,1719,4.51,1720,6.361,1721,4.51,1722,5.769,1723,4.51,1724,5.769,1725,4.51,1726,4.51,1727,4.51,1728,4.51,1729,4.51,1730,4.51,1731,4.51,1732,4.51,1733,4.51,1734,4.51,1735,4.51,1736,4.51,1737,4.51,1738,4.51,1739,4.51,1740,4.51,1741,4.51,1742,4.51,1743,4.51,1744,4.51,1745,4.51,1746,4.51,1747,4.51,1748,4.51,1749,4.51,1750,4.51,1751,4.51,1752,4.51,1753,4.51,1754,4.51,1755,4.51,1756,5.769,1757,4.51,1758,4.51,1759,4.51,1760,4.51,1761,4.51,1762,4.51,1763,4.51,1764,4.51,1765,4.51,1766,4.51,1767,4.51,1768,4.51,1769,4.51,1770,4.51,1771,4.51,1772,4.51,1773,4.51,1774,4.51]],["title/miscellaneous/functions.html",[1775,2.136,1776,3.806]],["body/miscellaneous/functions.html",[7,0.48,11,0.017,26,0.014,27,0.017,28,0.014,35,2.7,1678,4.561,1775,4.151,1776,5.111,1777,5.111]],["title/index.html",[7,0.297,1778,3.16]],["body/index.html",[2,1,11,0.019,18,3.287,26,0.008,27,0.012,28,0.008,29,0.714,30,5.286,31,1.276,32,1.276,33,1.415,34,1.415,35,1.276,36,1.415,37,1.415,38,2.915,39,2.915,40,2.915,41,4.657,42,3.424,43,4.397,44,3.637,45,3.76,46,4.397,47,4.307,48,2.843,49,4.469,50,3.76,51,1.987,52,1.343,53,1.343,71,1.415,124,2.399,167,3.736,173,3.07,239,2.915,241,2.915,242,3.54,243,3.54,304,2.915,306,2.915,307,2.915,308,4.774,346,3.578,368,2.915,370,2.915,371,2.915,389,3.506,478,1.891,722,4,753,2.915,755,2.915,756,2.915,839,1.214,844,2.915,846,2.915,847,2.915,848,5.14,853,4.307,923,4.677,974,2.915,976,2.915,977,2.915,1014,3.287,1035,2.915,1037,2.915,1234,2.915,1235,2.915,1236,2.915,1300,3.287,1344,2.915,1346,2.915,1610,2.915,1612,2.915,1613,2.915,1778,2.915,1779,3.391,1780,3.391,1781,3.391,1782,3.391,1783,3.391]],["title/interfaces/message.html",[343,1.384,838,0.666]],["body/interfaces/message.html",[3,0.17,4,0.17,5,0.142,7,0.411,11,0.019,15,1.162,16,0.444,20,0.17,26,0.012,27,0.015,28,0.012,122,0.788,333,4.501,343,2.75,412,1.823,425,2.616,430,2.93,441,5.371,451,5.371,452,5.371,481,1.835,597,2.739,838,0.922,839,1.823,1638,3.311,1698,4.377]],["title/modules.html",[31,1.896]],["body/modules.html",[11,0.015,26,0.013,27,0.015,28,0.013,30,3.717,31,2.004,41,3.423,42,2.623,43,3.423,44,2.786,45,2.786,46,3.423,47,3.423,48,2.004,49,3.423,50,2.786,1784,7.653,1785,7.653,1786,7.653,1787,7.653]],["title/interfaces/pin.html",[315,1.137,838,0.666]],["body/interfaces/pin.html",[3,0.123,4,0.123,5,0.103,7,0.299,11,0.019,15,1.183,16,0.442,20,0.192,26,0.009,27,0.012,28,0.009,122,0.82,287,1.394,288,1.467,313,2.114,315,1.567,317,1.829,395,1.545,412,2.066,425,2.659,430,2.718,481,1.493,482,3.245,483,3.056,484,3.245,486,3.703,487,3.056,488,3.703,491,2.286,597,2.73,623,3.459,831,3.459,838,1.045,839,1.326,1114,3.459,1118,2.824,1123,2.824,1206,3.508,1212,2.381,1216,2.381,1220,2.381,1225,2.381,1229,2.381,1233,3.877,1638,3.199,1640,3.459,1642,3.703,1645,3.708,1646,2.211,1650,2.586,1651,2.586,1652,3.256,1653,2.586,1654,2.586,1655,3.535,1656,4.33,1657,4.33,1658,4.33,1659,4.33]],["title/interfaces/reply.html",[838,0.666,1123,2.05]],["body/interfaces/reply.html",[3,0.145,4,0.145,5,0.122,7,0.352,11,0.019,15,1.167,16,0.493,20,0.208,26,0.011,27,0.014,28,0.011,122,0.758,287,1.643,288,1.729,313,1.488,315,1.35,317,1.287,395,1.821,412,2.242,425,2.56,430,2.925,481,1.666,482,2.284,483,2.15,484,2.284,486,2.606,487,2.15,488,2.606,491,2.285,597,2.914,623,3.15,831,2.434,838,1.134,839,1.563,1114,2.434,1118,3.15,1123,3.918,1206,3.277,1212,2.806,1216,2.806,1220,2.806,1225,2.806,1229,2.806,1233,3.372,1638,3.379,1640,2.434,1642,2.606,1645,3.741,1646,2.606,1650,3.047,1651,3.047,1652,4.409,1653,3.047,1654,4.623,1655,3.943,1656,3.047,1657,3.047,1658,3.047,1659,3.047]],["title/interfaces/section.html",[487,1.811,838,0.666]],["body/interfaces/section.html",[3,0.152,4,0.152,5,0.128,7,0.369,11,0.019,15,1.169,16,0.508,20,0.194,26,0.011,27,0.014,28,0.011,121,0.596,122,0.751,259,1.813,287,1.723,288,1.813,313,1.56,317,1.35,395,1.909,412,2.293,425,2.729,430,1.813,472,2.429,481,1.717,487,2.869,491,1.981,504,3.195,505,2.943,506,3.195,597,2.819,688,2.943,831,2.552,838,1.055,839,1.639,938,3.131,1101,3.247,1112,3.195,1113,4.859,1114,2.552,1206,2.395,1637,3.511,1638,3.321,1639,3.511,1640,2.552,1641,3.195,1642,4.155,1643,5.171,1644,5.171,1645,3.527,1646,2.732,1647,3.511]],["title/interfaces/topic.html",[317,1.084,838,0.666]],["body/interfaces/topic.html",[3,0.162,4,0.162,5,0.136,7,0.393,11,0.019,15,1.154,16,0.528,20,0.162,26,0.012,27,0.015,28,0.012,121,0.897,122,0.799,259,2.73,317,1.785,412,2.359,425,2.587,481,1.785,482,3.606,483,3.396,484,3.606,491,2.236,597,2.664,838,0.882,839,1.743,938,3.034,1101,3.844,1638,3.246,1645,3.447,1699,4.186,1788,5.926]],["title/interfaces/user.html",[199,0.896,838,0.666]],["body/interfaces/user.html",[3,0.095,4,0.095,5,0.079,7,0.229,11,0.019,15,1.19,16,0.366,20,0.095,26,0.007,27,0.01,28,0.007,110,3.84,121,0.37,122,0.835,124,1.97,134,2.71,199,1.021,207,2.878,275,2.878,287,2.071,288,2.179,412,1.784,425,2.684,430,2.516,472,3.203,481,1.236,491,1.965,534,3.284,597,1.845,623,3.636,838,0.514,839,1.017,873,2.178,938,2.421,963,3.537,982,3.84,984,3.84,996,3.84,1101,3.068,1102,4.221,1174,4.221,1206,2.878,1233,1.695,1256,3.84,1370,4.221,1440,4.221,1441,4.221,1444,4.221,1445,4.221,1446,4.221,1447,4.221,1449,4.221,1450,4.221,1451,4.221,1452,3.84,1453,4.221,1454,4.221,1455,4.221,1456,4.221,1522,4.221,1638,2.455,1640,3.272,1641,1.982,1645,1.486,1652,1.826,1701,2.441,1789,4.729,1790,4.729,1791,4.729,1792,4.729,1793,4.729,1794,4.729,1795,4.729,1796,4.729,1797,4.729,1798,2.441,1799,2.441,1800,2.441]],["title/miscellaneous/variables.html",[100,3.396,1775,2.136]],["body/miscellaneous/variables.html",[7,0.515,11,0.019,15,1.188,26,0.006,27,0.009,28,0.006,100,1.868,110,1.7,121,0.663,122,0.671,124,0.872,128,1.2,134,1.2,197,1.975,199,1.24,207,1.274,259,1.479,275,1.274,279,2.094,287,1.709,288,1.799,291,3.47,313,1.548,315,1.155,317,1.779,321,3.302,331,2.241,333,1.566,339,2.607,343,1.916,374,1.954,395,1.558,425,2.285,430,2.793,433,1.868,437,1.868,441,1.868,451,1.868,452,1.868,472,3.048,482,1.954,483,1.84,484,1.954,486,2.229,487,1.2,488,1.454,489,1.566,491,2.233,504,1.7,505,2.401,506,1.7,516,2.094,517,2.094,518,2.094,519,2.094,520,2.094,521,2.094,534,1.454,688,1.566,694,2.607,704,1.868,724,2.094,759,1.868,772,2.094,773,3.17,774,2.094,775,2.865,776,2.094,806,2.401,822,2.865,831,2.082,873,3.484,880,3.53,884,3.904,938,2.417,963,1.566,982,1.7,984,1.7,996,1.7,1101,2.839,1102,1.868,1112,1.7,1113,2.607,1114,2.082,1116,1.868,1118,1.358,1123,1.358,1170,2.094,1174,1.868,1206,2.873,1208,2.094,1212,1.566,1216,1.566,1220,1.566,1225,1.566,1229,1.566,1233,2.711,1256,1.7,1370,1.868,1431,2.094,1440,1.868,1441,1.868,1444,1.868,1445,1.868,1446,1.868,1447,1.868,1449,1.868,1450,1.868,1451,1.868,1452,1.7,1453,1.868,1454,1.868,1455,1.868,1456,1.868,1522,1.868,1618,1.868,1627,2.865,1628,2.094,1639,1.868,1640,2.839,1641,2.607,1642,2.711,1643,1.868,1644,1.868,1645,3.836,1646,2.229,1647,1.868,1649,2.094,1651,1.7,1652,2.92,1653,1.7,1654,1.7,1655,2.607,1656,1.7,1657,1.7,1658,1.7,1659,1.7,1678,1.868,1679,3.21,1680,2.094,1681,2.094,1682,2.094,1683,2.094,1684,2.094,1685,2.094,1707,2.094,1775,1.7,1777,3.21,1788,2.094,1789,2.094,1790,2.094,1791,2.094,1792,2.094,1793,2.094,1794,2.094,1795,2.094,1796,2.094,1797,2.094,1798,2.094,1799,2.094,1800,2.094,1801,3.735,1802,3.735,1803,4.542,1804,2.436,1805,3.735,1806,2.436,1807,2.436,1808,3.735,1809,3.735,1810,3.735,1811,2.436,1812,7.217,1813,7.217,1814,5.093,1815,5.492,1816,5.492,1817,5.795,1818,2.436,1819,2.436,1820,2.436,1821,2.436]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":403,"title":{},"body":{"injectables/ChatService.html":{},"classes/HelpersUtils.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":1764,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1770,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1765,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1677,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1696,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1703,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1694,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1689,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1691,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1704,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1688,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["0/31",{"_index":1673,"title":{},"body":{"coverage.html":{}}}],["0/36",{"_index":1706,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1695,"title":{},"body":{"coverage.html":{}}}],["0/46",{"_index":1702,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1675,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1697,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1692,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1674,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1700,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":454,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["1.0.0",{"_index":1774,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1752,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1759,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1780,"title":{},"body":{"index.html":{}}}],["11",{"_index":1779,"title":{},"body":{"index.html":{}}}],["14",{"_index":1783,"title":{},"body":{"index.html":{}}}],["16",{"_index":1781,"title":{},"body":{"index.html":{}}}],["16.7.1",{"_index":1740,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1716,"title":{},"body":{"dependencies.html":{}}}],["1].topicname",{"_index":1429,"title":{},"body":{"injectables/TopicService.html":{}}}],["2",{"_index":473,"title":{},"body":{"injectables/ChatService.html":{}}}],["2.0.0",{"_index":1766,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":1762,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["2592000",{"_index":660,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["3.0.2",{"_index":1772,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":664,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["4",{"_index":637,"title":{},"body":{"classes/HelpersUtils.html":{},"injectables/SearchService.html":{}}}],["4.0.0",{"_index":1767,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["4.2.4",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1754,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1432,"title":{},"body":{"injectables/TopicService.html":{}}}],["5.0.0",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["5.9.26",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":546,"title":{},"body":{"injectables/Email.html":{}}}],["6",{"_index":1782,"title":{},"body":{"index.html":{}}}],["6.4.0",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["6.4.10",{"_index":1763,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":1773,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":666,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["60.0.1",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["67472347632732h",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.0.0",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["7.3.2",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1204,"title":{},"body":{"classes/SharedGateway.html":{}}}],["8.2.0",{"_index":1738,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":662,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["9.1.1",{"_index":1743,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"interfaces/Payload.html":{},"injectables/TopicService.html":{}}}],["abdelmaboud",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/HelpersUtils.html":{}}}],["abohadima",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{}}}],["accesstoken",{"_index":592,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["account",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["acknowledgment",{"_index":630,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["activateaccount",{"_index":1444,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["activity",{"_index":1445,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":625,"title":{},"body":{"classes/HelpersUtils.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["addcollaborators",{"_index":516,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":1317,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic",{"_index":1251,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(@body('topics",{"_index":1327,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(topics",{"_index":1262,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic",{"_index":1252,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic(pinid",{"_index":1266,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintotopic",{"_index":1350,"title":{},"body":{"injectables/TopicService.html":{}}}],["addpintotopic(topicname",{"_index":1358,"title":{},"body":{"injectables/TopicService.html":{}}}],["address",{"_index":565,"title":{},"body":{"injectables/Email.html":{}}}],["addtolimitedarray",{"_index":616,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["addtolimitedarray(arr",{"_index":620,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["addtorecentsearch",{"_index":1042,"title":{},"body":{"injectables/SearchService.html":{}}}],["addtorecentsearch(userid",{"_index":1047,"title":{},"body":{"injectables/SearchService.html":{}}}],["admin",{"_index":1742,"title":{},"body":{"dependencies.html":{}}}],["ago",{"_index":639,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["alaa",{"_index":422,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["aleardy",{"_index":1573,"title":{},"body":{"controllers/UserController.html":{}}}],["already",{"_index":1389,"title":{},"body":{"injectables/TopicService.html":{}}}],["alt",{"_index":742,"title":{},"body":{"controllers/ImagesController.html":{}}}],["aouth",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["aouth/google?token",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiconsumes",{"_index":717,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes('multipart/form",{"_index":726,"title":{},"body":{"controllers/ImagesController.html":{}}}],["app",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":1238,"title":{},"body":{"modules/SharedModule.html":{}}}],["app_interceptor",{"_index":1239,"title":{},"body":{"modules/SharedModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["argumentshost",{"_index":679,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arr",{"_index":459,"title":{},"body":{"injectables/ChatService.html":{},"classes/HelpersUtils.html":{}}}],["arr.length",{"_index":648,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["arr.push(pusheddata",{"_index":673,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["arr.push(user",{"_index":465,"title":{},"body":{"injectables/ChatService.html":{}}}],["arr.splice(0",{"_index":672,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["arr[i",{"_index":651,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["arr[j",{"_index":652,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["array",{"_index":425,"title":{},"body":{"injectables/ChatService.html":{},"classes/HelpersUtils.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["array(mongoose.types.objectid",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(object",{"_index":1814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(string",{"_index":1815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array|0",{"_index":446,"title":{},"body":{"injectables/ChatService.html":{}}}],["async",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["auth",{"_index":549,"title":{},"body":{"injectables/Email.html":{},"injectables/ImagesService.html":{}}}],["auth.controller",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":106,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["authorization",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["authservice",{"_index":173,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["aya",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{}}}],["back",{"_index":573,"title":{},"body":{"injectables/Email.html":{}}}],["badrequestexception",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["badrequestexception('can",{"_index":1333,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["bcrypt",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":470,"title":{},"body":{"injectables/ChatService.html":{}}}],["being",{"_index":646,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["bio",{"_index":981,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["birthdate",{"_index":1440,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["birthday",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["board",{"_index":313,"title":{"interfaces/board.html":{}},"body":{"modules/BoardModule.html":{},"classes/CreatePinDto.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["board.controller",{"_index":311,"title":{},"body":{"modules/BoardModule.html":{}}}],["board.dto.ts",{"_index":502,"title":{},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["board.dto.ts:2",{"_index":510,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:3",{"_index":508,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:4",{"_index":513,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:5",{"_index":512,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:6",{"_index":509,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:7",{"_index":507,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:8",{"_index":511,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.service",{"_index":312,"title":{},"body":{"modules/BoardModule.html":{}}}],["board/board.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["board/board.service",{"_index":1617,"title":{},"body":{"modules/UserModule.html":{}}}],["boardcontroller",{"_index":310,"title":{},"body":{"modules/BoardModule.html":{},"coverage.html":{}}}],["boardfullmatch",{"_index":1110,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardfullmatch.length",{"_index":1115,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardid",{"_index":873,"title":{},"body":{"controllers/RecommendationController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardmodel",{"_index":1046,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardmodule",{"_index":42,"title":{"modules/BoardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["boards",{"_index":963,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardservice",{"_index":308,"title":{},"body":{"modules/BoardModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["boardsforyou",{"_index":1446,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardupdate",{"_index":1447,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["body('description",{"_index":1323,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('forgetpassword",{"_index":1549,"title":{},"body":{"controllers/UserController.html":{}}}],["body('imageheight",{"_index":1321,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imageid",{"_index":1320,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imagewidth",{"_index":1322,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('message",{"_index":365,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('name",{"_index":366,"title":{},"body":{"controllers/ChatController.html":{},"controllers/TopicController.html":{}}}],["body('newpassword",{"_index":1547,"title":{},"body":{"controllers/UserController.html":{}}}],["body('oldpassword",{"_index":1548,"title":{},"body":{"controllers/UserController.html":{}}}],["body('pinid",{"_index":1314,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('recieverid",{"_index":361,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('senderid",{"_index":360,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('time",{"_index":362,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('topicname",{"_index":1315,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('topics",{"_index":1325,"title":{},"body":{"controllers/TopicController.html":{}}}],["boolean",{"_index":472,"title":{},"body":{"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1787,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1784,"title":{},"body":{"modules.html":{}}}],["callbackurl",{"_index":602,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":818,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["casesensitive",{"_index":1073,"title":{},"body":{"injectables/SearchService.html":{}}}],["catch",{"_index":677,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":678,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["certain",{"_index":1305,"title":{},"body":{"controllers/TopicController.html":{}}}],["change",{"_index":536,"title":{},"body":{"injectables/Email.html":{}}}],["changed",{"_index":566,"title":{},"body":{"injectables/Email.html":{}}}],["changeemail",{"_index":1567,"title":{},"body":{"controllers/UserController.html":{}}}],["changing",{"_index":567,"title":{},"body":{"injectables/Email.html":{}}}],["chat",{"_index":374,"title":{"interfaces/chat.html":{}},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["chat._id",{"_index":442,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.controller",{"_index":373,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.map(conv",{"_index":460,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.save",{"_index":439,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.service",{"_index":347,"title":{},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["chatcontroller",{"_index":322,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatid",{"_index":441,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["chatmodel",{"_index":387,"title":{},"body":{"injectables/ChatService.html":{}}}],["chatmodule",{"_index":43,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"index.html":{},"modules.html":{}}}],["chats",{"_index":455,"title":{},"body":{"injectables/ChatService.html":{}}}],["chatservice",{"_index":346,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{},"index.html":{}}}],["check",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{}}}],["checkdublicates",{"_index":617,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["checkdublicates(arr",{"_index":626,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["checked",{"_index":655,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["checkemail",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(@query('email",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(email",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkfollowinguser",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowinguser(@param",{"_index":1599,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowinguser(params",{"_index":1477,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowtopic",{"_index":1253,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["checkfollowtopic(@param",{"_index":1339,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(params",{"_index":1269,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(userid",{"_index":1360,"title":{},"body":{"injectables/TopicService.html":{}}}],["checkmongooseid",{"_index":1619,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkmongooseid(ids",{"_index":1622,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkuser",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkuser._id",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":478,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{},"index.html":{}}}],["clearuserid",{"_index":1117,"title":{},"body":{"classes/SharedGateway.html":{}}}],["clearuserid(socket",{"_index":1128,"title":{},"body":{"classes/SharedGateway.html":{}}}],["client",{"_index":1140,"title":{},"body":{"classes/SharedGateway.html":{}}}],["clientid",{"_index":600,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":601,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cloud/firestore",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_boardmodule",{"_index":304,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_boardmodule_exports",{"_index":306,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_boardmodule_imports",{"_index":305,"title":{},"body":{"modules/BoardModule.html":{}}}],["cluster_boardmodule_providers",{"_index":307,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_chatmodule",{"_index":368,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_chatmodule_exports",{"_index":370,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_chatmodule_imports",{"_index":369,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":371,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_imagesmodule",{"_index":753,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_imagesmodule_exports",{"_index":755,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_imagesmodule_imports",{"_index":754,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_imagesmodule_providers",{"_index":756,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_pinsmodule",{"_index":844,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_pinsmodule_exports",{"_index":846,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_pinsmodule_imports",{"_index":845,"title":{},"body":{"modules/PinsModule.html":{}}}],["cluster_pinsmodule_providers",{"_index":847,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_recommendationmodule",{"_index":974,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_recommendationmodule_exports",{"_index":976,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_recommendationmodule_imports",{"_index":975,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["cluster_recommendationmodule_providers",{"_index":977,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_searchmodule",{"_index":1035,"title":{},"body":{"modules/SearchModule.html":{},"index.html":{}}}],["cluster_searchmodule_imports",{"_index":1036,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":1037,"title":{},"body":{"modules/SearchModule.html":{},"index.html":{}}}],["cluster_sharedmodule",{"_index":1234,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_sharedmodule_exports",{"_index":1235,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_sharedmodule_providers",{"_index":1236,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_topicmodule",{"_index":1344,"title":{},"body":{"modules/TopicModule.html":{},"index.html":{}}}],["cluster_topicmodule_imports",{"_index":1345,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_providers",{"_index":1346,"title":{},"body":{"modules/TopicModule.html":{},"index.html":{}}}],["cluster_usermodule",{"_index":1610,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_exports",{"_index":1612,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_imports",{"_index":1611,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1613,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["code",{"_index":692,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["collaboratores",{"_index":503,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["collaboratorid",{"_index":517,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["collaborators",{"_index":1639,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["com",{"_index":811,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["come",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["comment",{"_index":1118,"title":{"interfaces/comment.html":{}},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["comment(socket",{"_index":1132,"title":{},"body":{"classes/SharedGateway.html":{}}}],["commenter",{"_index":1651,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1233,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["complete",{"_index":562,"title":{},"body":{"injectables/Email.html":{}}}],["compodoc/compodoc",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["confirm",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["confirm(@request",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmupdateemail",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["confirmupdateemail(@request",{"_index":1563,"title":{},"body":{"controllers/UserController.html":{}}}],["confirmupdateemail(req",{"_index":1480,"title":{},"body":{"controllers/UserController.html":{}}}],["console.error('all",{"_index":98,"title":{},"body":{"injectables/AppService.html":{}}}],["console.log",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('deliver",{"_index":1194,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log(conv",{"_index":461,"title":{},"body":{"injectables/ChatService.html":{}}}],["console.log(err",{"_index":748,"title":{},"body":{"controllers/ImagesController.html":{}}}],["console.log(profile",{"_index":607,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["const",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["constructor(authservice",{"_index":800,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(boardmodel",{"_index":1043,"title":{},"body":{"injectables/SearchService.html":{}}}],["constructor(chatservice",{"_index":1125,"title":{},"body":{"classes/SharedGateway.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["constructor(topicmodel",{"_index":1355,"title":{},"body":{"injectables/TopicService.html":{}}}],["constructor(usermodel",{"_index":385,"title":{},"body":{"injectables/ChatService.html":{}}}],["constructor(userservice",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":820,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.getclass().name",{"_index":837,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":829,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["continue",{"_index":1630,"title":{},"body":{"injectables/ValidationService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('search",{"_index":1016,"title":{},"body":{"controllers/SearchController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{}}}],["conv.usersids.map(user",{"_index":462,"title":{},"body":{"injectables/ChatService.html":{}}}],["convert",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["correct",{"_index":810,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["cors",{"_index":1679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":982,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":1206,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1660,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coverimages",{"_index":1113,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicService.html":{}}}],["created",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["createdat",{"_index":1640,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createdorjoined",{"_index":1798,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpin",{"_index":518,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["createpindto",{"_index":477,"title":{"classes/CreatePinDto.html":{}},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["createtopic",{"_index":1254,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopic(imageid",{"_index":1273,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopics",{"_index":1255,"title":{},"body":{"controllers/TopicController.html":{}}}],["createtopics(topics",{"_index":1276,"title":{},"body":{"controllers/TopicController.html":{}}}],["creator",{"_index":1114,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["creator.id",{"_index":1085,"title":{},"body":{"injectables/SearchService.html":{}}}],["creatorid",{"_index":1644,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":683,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":687,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":686,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"classes/HelpersUtils.html":{},"controllers/ImagesController.html":{},"classes/SharedGateway.html":{}}}],["data')@useinterceptors(undefined",{"_index":712,"title":{},"body":{"controllers/ImagesController.html":{}}}],["data.message",{"_index":1201,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.messageid",{"_index":1193,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.pinid",{"_index":1211,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.reacttype",{"_index":1209,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.recieverid",{"_index":1180,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.senderid",{"_index":1178,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.token",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["data.type",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["date",{"_index":430,"title":{},"body":{"injectables/ChatService.html":{},"classes/HelpersUtils.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":693,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(time",{"_index":476,"title":{},"body":{"injectables/ChatService.html":{}}}],["date.now",{"_index":828,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/SharedGateway.html":{}}}],["datesince",{"_index":618,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["datesince(date",{"_index":628,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["day",{"_index":663,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["decoded",{"_index":1171,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decoded._id",{"_index":1173,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":1812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["delete",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["delete('/me/delete",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('/me/follow",{"_index":1334,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["deleteduserids",{"_index":1649,"title":{},"body":{"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["deletefile",{"_index":762,"title":{},"body":{"injectables/ImagesService.html":{}}}],["deletefile(id",{"_index":765,"title":{},"body":{"injectables/ImagesService.html":{}}}],["deleteflag",{"_index":1448,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{}}}],["deleteme",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(@request",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(req",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["deliver",{"_index":380,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["deliver(socket",{"_index":1135,"title":{},"body":{"classes/SharedGateway.html":{}}}],["deliver(userid",{"_index":392,"title":{},"body":{"injectables/ChatService.html":{}}}],["deliverstatus",{"_index":452,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["descriptioncheck",{"_index":1413,"title":{},"body":{"injectables/TopicService.html":{}}}],["descriptionget",{"_index":423,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["descriptionsend",{"_index":539,"title":{},"body":{"injectables/Email.html":{}}}],["descriptionthis",{"_index":671,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["destlink",{"_index":1658,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["dina",{"_index":421,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["document",{"_index":1638,"title":{},"body":{"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["documentation",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":589,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["done(null",{"_index":613,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":1737,"title":{},"body":{"dependencies.html":{}}}],["drive",{"_index":761,"title":{},"body":{"injectables/ImagesService.html":{}}}],["driveimageid",{"_index":1656,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["dto/login.dto",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/register.dto",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1536,"title":{},"body":{"controllers/UserController.html":{}}}],["dublicates",{"_index":653,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["e",{"_index":635,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["editboarddto",{"_index":500,"title":{"classes/EditBoardDto.html":{}},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["editcollaboratorespermissionsdto",{"_index":514,"title":{"classes/EditCollaboratoresPermissionsDto.html":{}},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["editdescription",{"_index":519,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittitle",{"_index":520,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittopic",{"_index":1351,"title":{},"body":{"injectables/TopicService.html":{}}}],["edittopic(topics",{"_index":1366,"title":{},"body":{"injectables/TopicService.html":{}}}],["elasticsearch",{"_index":1739,"title":{},"body":{"dependencies.html":{}}}],["elemmatch",{"_index":468,"title":{},"body":{"injectables/ChatService.html":{}}}],["email",{"_index":124,"title":{"injectables/Email.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"modules/SharedModule.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["email.service.ts",{"_index":530,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["email.service.ts:18",{"_index":535,"title":{},"body":{"injectables/Email.html":{}}}],["email.service.ts:7",{"_index":532,"title":{},"body":{"injectables/Email.html":{}}}],["emails",{"_index":605,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":608,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["end",{"_index":1633,"title":{},"body":{"injectables/ValidationService.html":{}}}],["enddate",{"_index":504,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["env",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["err",{"_index":747,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/TopicService.html":{}}}],["error",{"_index":701,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error('not",{"_index":428,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["error('topic",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["errorresponse",{"_index":691,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["event",{"_index":1195,"title":{},"body":{"classes/SharedGateway.html":{}}}],["example",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{}}}],["exception",{"_index":681,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["exception.filter.ts",{"_index":674,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":680,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":689,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":698,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":676,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exchange",{"_index":642,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["executioncontext",{"_index":816,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["exists",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["exp",{"_index":983,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["expiresin",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Payload.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["express",{"_index":721,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["extends",{"_index":597,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["extractjwt",{"_index":805,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":1449,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":548,"title":{},"body":{"injectables/Email.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["fcmtoken",{"_index":1789,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1761,"title":{},"body":{"dependencies.html":{}}}],["fields",{"_index":797,"title":{},"body":{"injectables/ImagesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["fileid",{"_index":741,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["filemetadata",{"_index":794,"title":{},"body":{"injectables/ImagesService.html":{}}}],["filename",{"_index":770,"title":{},"body":{"injectables/ImagesService.html":{}}}],["filepath",{"_index":735,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files",{"_index":714,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].buffer",{"_index":732,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].mimetype",{"_index":731,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].originalname",{"_index":730,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filesinterceptor",{"_index":719,"title":{},"body":{"controllers/ImagesController.html":{}}}],["find",{"_index":1084,"title":{},"body":{"injectables/SearchService.html":{}}}],["findbyidandupdate(userid",{"_index":1096,"title":{},"body":{"injectables/SearchService.html":{}}}],["findone",{"_index":1388,"title":{},"body":{"injectables/TopicService.html":{}}}],["firebase",{"_index":1741,"title":{},"body":{"dependencies.html":{}}}],["firstname",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["follow",{"_index":569,"title":{},"body":{"injectables/Email.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["followers",{"_index":1101,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["following",{"_index":1370,"title":{},"body":{"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics",{"_index":1256,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics(@request",{"_index":1342,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(req",{"_index":1280,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(userid",{"_index":1368,"title":{},"body":{"injectables/TopicService.html":{}}}],["follownotification",{"_index":1450,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followtopic",{"_index":1257,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["followtopic(@param",{"_index":1330,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(params",{"_index":1283,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(userid",{"_index":1371,"title":{},"body":{"injectables/TopicService.html":{}}}],["followuser",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["followuser(@param",{"_index":1588,"title":{},"body":{"controllers/UserController.html":{}}}],["followuser(params",{"_index":1483,"title":{},"body":{"controllers/UserController.html":{}}}],["forbiddenexception",{"_index":1299,"title":{},"body":{"controllers/TopicController.html":{}}}],["forget",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["forgetpassword",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["forgetpassword(@body",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(body",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["format",{"_index":633,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["found",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["fs",{"_index":773,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["function(err",{"_index":746,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["function(response",{"_index":789,"title":{},"body":{"injectables/ImagesService.html":{}}}],["functions",{"_index":1776,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":1040,"title":{},"body":{"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["fuzzy(model",{"_index":1049,"title":{},"body":{"injectables/SearchService.html":{}}}],["g",{"_index":636,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["gender",{"_index":984,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["generateboardmorelike",{"_index":857,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generateboardmorelike(req",{"_index":872,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed",{"_index":858,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(@request",{"_index":926,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(req",{"_index":876,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore",{"_index":859,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(@request",{"_index":936,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(req",{"_index":879,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike",{"_index":860,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike(req",{"_index":883,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/:userid/follower",{"_index":1604,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:userid/following",{"_index":1606,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/allpins",{"_index":1017,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/board",{"_index":1027,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/checkemail",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/getchats/:userid",{"_index":356,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/getkeys",{"_index":1032,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/getmessagessent/:recieverids/:senderid",{"_index":348,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/home/:index",{"_index":1494,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/image/:id",{"_index":708,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('/me",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me/boards/view",{"_index":1583,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/boardsforyou",{"_index":961,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/follow",{"_index":1338,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/follower",{"_index":1601,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/following",{"_index":1341,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/home",{"_index":931,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsforyou",{"_index":968,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsrecentactivity",{"_index":971,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/popularpins",{"_index":965,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/follow",{"_index":952,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/topics/:topicname",{"_index":955,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/trending",{"_index":958,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/boards/:boardid",{"_index":948,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/pins/:pinid",{"_index":940,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/sections/:boardid/:sectionid",{"_index":950,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/mypins",{"_index":1022,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/people",{"_index":1024,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/recentsearch",{"_index":1029,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/topic",{"_index":1302,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid",{"_index":1306,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid/pins",{"_index":1310,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/user/:id",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{}}}],["get('google",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('notifications/me",{"_index":1541,"title":{},"body":{"controllers/UserController.html":{}}}],["get('users/me",{"_index":1539,"title":{},"body":{"controllers/UserController.html":{}}}],["getallpins",{"_index":989,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getallpins(name",{"_index":1053,"title":{},"body":{"injectables/SearchService.html":{}}}],["getallpins(req",{"_index":995,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardmore",{"_index":861,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardmore(req",{"_index":887,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboards",{"_index":990,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getboards(name",{"_index":1056,"title":{},"body":{"injectables/SearchService.html":{}}}],["getboards(req",{"_index":999,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardsforyou",{"_index":862,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(@request",{"_index":962,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(req",{"_index":891,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getchats",{"_index":324,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getchats(@param('userid",{"_index":357,"title":{},"body":{"controllers/ChatController.html":{}}}],["getchats(userid",{"_index":328,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getfollowers",{"_index":1462,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowers(req",{"_index":1485,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings",{"_index":1463,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings(req",{"_index":1488,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowrecommendation",{"_index":863,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(@request",{"_index":953,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(req",{"_index":894,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethomefeed",{"_index":864,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethomefeed(req",{"_index":897,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getimage",{"_index":705,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getimage(@param('id",{"_index":733,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getimage(id",{"_index":707,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getkeys",{"_index":991,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getkeys(@request",{"_index":1033,"title":{},"body":{"controllers/SearchController.html":{}}}],["getkeys(name",{"_index":1058,"title":{},"body":{"injectables/SearchService.html":{}}}],["getkeys(req",{"_index":1002,"title":{},"body":{"controllers/SearchController.html":{}}}],["getmessage",{"_index":381,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessage(userids",{"_index":399,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessagessent",{"_index":325,"title":{},"body":{"controllers/ChatController.html":{}}}],["getmessagessent(recieverids",{"_index":332,"title":{},"body":{"controllers/ChatController.html":{}}}],["getmypins",{"_index":992,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getmypins(name",{"_index":1060,"title":{},"body":{"injectables/SearchService.html":{}}}],["getmypins(req",{"_index":1005,"title":{},"body":{"controllers/SearchController.html":{}}}],["getnotifications",{"_index":1464,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(@request",{"_index":1542,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(req",{"_index":1490,"title":{},"body":{"controllers/UserController.html":{}}}],["getpeople",{"_index":993,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getpeople(name",{"_index":1062,"title":{},"body":{"injectables/SearchService.html":{}}}],["getpeople(req",{"_index":1008,"title":{},"body":{"controllers/SearchController.html":{}}}],["getpinmore",{"_index":865,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinmore(req",{"_index":900,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou",{"_index":866,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(@request",{"_index":969,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(req",{"_index":903,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsofatopic",{"_index":1258,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsofatopic(req",{"_index":1286,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsoftopic",{"_index":1352,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsoftopic(topicid",{"_index":1373,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsrecentactivity",{"_index":867,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsrecentactivity(@request",{"_index":972,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsrecentactivity(req",{"_index":906,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins",{"_index":868,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(@request",{"_index":966,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(req",{"_index":909,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpublichome",{"_index":1465,"title":{},"body":{"controllers/UserController.html":{}}}],["getpublichome(@param('index",{"_index":1608,"title":{},"body":{"controllers/UserController.html":{}}}],["getpublichome(index",{"_index":1493,"title":{},"body":{"controllers/UserController.html":{}}}],["getrecentsearch",{"_index":994,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getrecentsearch(@request",{"_index":1030,"title":{},"body":{"controllers/SearchController.html":{}}}],["getrecentsearch(req",{"_index":1011,"title":{},"body":{"controllers/SearchController.html":{}}}],["getrecentsearch(userid",{"_index":1064,"title":{},"body":{"injectables/SearchService.html":{}}}],["getsectionmore",{"_index":869,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getsectionmore(req",{"_index":912,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopic",{"_index":1259,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(@request",{"_index":1307,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(req",{"_index":1290,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopicbyid",{"_index":1353,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicbyid(topicid",{"_index":1375,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicrecommendation",{"_index":870,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopicrecommendation(req",{"_index":915,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopics",{"_index":1260,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["gettopics(@request",{"_index":1303,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(req",{"_index":1293,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(userid",{"_index":1377,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettrendingrecommendation",{"_index":871,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(@request",{"_index":959,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(req",{"_index":918,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getuser",{"_index":1466,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param",{"_index":1544,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(params",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers",{"_index":1467,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers(req",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings",{"_index":1468,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings(req",{"_index":1502,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate",{"_index":1469,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(@request",{"_index":1584,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(req",{"_index":1505,"title":{},"body":{"controllers/UserController.html":{}}}],["good",{"_index":1221,"title":{},"body":{"classes/SharedGateway.html":{}}}],["goodideareacts",{"_index":1220,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["google",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"interfaces/UpdateSettingsDto.html":{},"dependencies.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["google.auth.jwt",{"_index":780,"title":{},"body":{"injectables/ImagesService.html":{}}}],["google.drive",{"_index":785,"title":{},"body":{"injectables/ImagesService.html":{}}}],["googleapis",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["googleauth",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(req",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleimage",{"_index":1102,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["googlelogin",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":242,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"index.html":{}}}],["graceful",{"_index":1747,"title":{},"body":{"dependencies.html":{}}}],["gracefulfs",{"_index":775,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gracefulfs.gracefulify(fs",{"_index":777,"title":{},"body":{"injectables/ImagesService.html":{}}}],["gridfs",{"_index":1751,"title":{},"body":{"dependencies.html":{}}}],["h",{"_index":665,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["haha",{"_index":1226,"title":{},"body":{"classes/SharedGateway.html":{}}}],["hahareacts",{"_index":1225,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":833,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["handleconnection",{"_index":1119,"title":{},"body":{"classes/SharedGateway.html":{}}}],["handleconnection(client",{"_index":1138,"title":{},"body":{"classes/SharedGateway.html":{}}}],["handler",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["hapi/joi",{"_index":1715,"title":{},"body":{"dependencies.html":{}}}],["height",{"_index":1365,"title":{},"body":{"injectables/TopicService.html":{}}}],["hello",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["helpersutils",{"_index":614,"title":{"classes/HelpersUtils.html":{}},"body":{"classes/HelpersUtils.html":{},"coverage.html":{}}}],["hi",{"_index":560,"title":{},"body":{"injectables/Email.html":{}}}],["history",{"_index":1790,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["home",{"_index":929,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["homefeed",{"_index":1791,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":543,"title":{},"body":{"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":684,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":559,"title":{},"body":{"injectables/Email.html":{}}}],["http",{"_index":1241,"title":{},"body":{"modules/SharedModule.html":{}}}],["httpexception",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpexception('no",{"_index":1569,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception('not",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpexception('oldpassword",{"_index":1550,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception('there",{"_index":1414,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexception('this",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception('topic",{"_index":1417,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexception('type",{"_index":1575,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexceptionfilter",{"_index":177,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["https://stackoverflow.com/questions/3177836/how",{"_index":632,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["https://www.googleapis.com/auth/drive",{"_index":779,"title":{},"body":{"injectables/ImagesService.html":{}}}],["httpstatus",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":1422,"title":{},"body":{"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.forbidden",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":690,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.unauthorized",{"_index":1416,"title":{},"body":{"injectables/TopicService.html":{}}}],["iat",{"_index":842,"title":{},"body":{"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["id",{"_index":395,"title":{},"body":{"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":1222,"title":{},"body":{"classes/SharedGateway.html":{}}}],["identifier",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":351,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/ValidationService.html":{}}}],["ids.length",{"_index":435,"title":{},"body":{"injectables/ChatService.html":{}}}],["ifrest",{"_index":1552,"title":{},"body":{"controllers/UserController.html":{}}}],["image",{"_index":1363,"title":{},"body":{"injectables/TopicService.html":{}}}],["imageheight",{"_index":482,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid",{"_index":483,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid').lean",{"_index":1081,"title":{},"body":{"injectables/SearchService.html":{}}}],["images",{"_index":1277,"title":{},"body":{"controllers/TopicController.html":{}}}],["images.controller",{"_index":758,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":723,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/images.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["imagescontroller",{"_index":703,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":44,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["imagesservice",{"_index":722,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"coverage.html":{},"index.html":{}}}],["imagewidth",{"_index":484,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":675,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"miscellaneous/functions.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"index.html":{}}}],["injectmodel",{"_index":413,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["injectmodel('board",{"_index":1069,"title":{},"body":{"injectables/SearchService.html":{}}}],["injectmodel('chat",{"_index":419,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('message",{"_index":420,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('pin",{"_index":1070,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["injectmodel('topic",{"_index":1384,"title":{},"body":{"injectables/TopicService.html":{}}}],["injectmodel('user",{"_index":418,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["inspired",{"_index":631,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["intercept",{"_index":814,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":815,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":838,"title":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["interfaces",{"_index":839,"title":{},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"index.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["internal",{"_index":699,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["interval",{"_index":658,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["intervaltype",{"_index":656,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["invitation",{"_index":1451,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["isfollow",{"_index":1395,"title":{},"body":{"injectables/TopicService.html":{}}}],["isgoogle",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["isjoined",{"_index":1641,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["j",{"_index":649,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["joiners",{"_index":1647,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":1172,"title":{},"body":{"classes/SharedGateway.html":{}}}],["jwtfromrequest",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":243,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["keys",{"_index":1104,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin",{"_index":1105,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin.map(pin",{"_index":1107,"title":{},"body":{"injectables/SearchService.html":{}}}],["lastmessage",{"_index":437,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["lastmessage.date",{"_index":458,"title":{},"body":{"injectables/ChatService.html":{}}}],["lastname",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lasttopics",{"_index":1792,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lean",{"_index":1087,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["length",{"_index":1052,"title":{},"body":{"injectables/SearchService.html":{}}}],["likecomment",{"_index":1120,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likecomment(socket",{"_index":1141,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply",{"_index":1121,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply(socket",{"_index":1144,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likers",{"_index":1655,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["likes",{"_index":1652,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":621,"title":{},"body":{"classes/HelpersUtils.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["limit(5",{"_index":1106,"title":{},"body":{"injectables/SearchService.html":{}}}],["limitoffset",{"_index":1620,"title":{},"body":{"injectables/ValidationService.html":{}}}],["limitoffset(limit",{"_index":1624,"title":{},"body":{"injectables/ValidationService.html":{}}}],["link",{"_index":485,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/Email.html":{}}}],["literal",{"_index":623,"title":{},"body":{"classes/HelpersUtils.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{}}}],["location",{"_index":1441,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":822,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.log",{"_index":835,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logging.interceptor",{"_index":1242,"title":{},"body":{"modules/SharedModule.html":{}}}],["logginginterceptor",{"_index":812,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":145,"title":{"interfaces/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":1470,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(@request",{"_index":1598,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(req",{"_index":1508,"title":{},"body":{"controllers/UserController.html":{}}}],["love",{"_index":1217,"title":{},"body":{"classes/SharedGateway.html":{}}}],["lovereacts",{"_index":1216,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["lt",{"_index":475,"title":{},"body":{"injectables/ChatService.html":{}}}],["mailoptions",{"_index":555,"title":{},"body":{"injectables/Email.html":{}}}],["make",{"_index":1420,"title":{},"body":{"injectables/TopicService.html":{}}}],["match",{"_index":1099,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["math.floor(math.random",{"_index":650,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["math.floor(seconds",{"_index":659,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["me(@request",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["me(req",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["media",{"_index":743,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["mess",{"_index":429,"title":{},"body":{"injectables/ChatService.html":{}}}],["mess.date",{"_index":443,"title":{},"body":{"injectables/ChatService.html":{}}}],["message",{"_index":343,"title":{"interfaces/message.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["message(socket",{"_index":1147,"title":{},"body":{"classes/SharedGateway.html":{}}}],["message._id",{"_index":445,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.email",{"_index":578,"title":{},"body":{"injectables/Email.html":{}}}],["message.reason",{"_index":580,"title":{},"body":{"injectables/Email.html":{}}}],["message.save",{"_index":444,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.userid",{"_index":579,"title":{},"body":{"injectables/Email.html":{}}}],["message.username",{"_index":576,"title":{},"body":{"injectables/Email.html":{}}}],["messageid",{"_index":393,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["messagemodel",{"_index":388,"title":{},"body":{"injectables/ChatService.html":{}}}],["messages",{"_index":353,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["messagetext",{"_index":1200,"title":{},"body":{"classes/SharedGateway.html":{}}}],["metadata",{"_index":1769,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":696,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["mimetype",{"_index":768,"title":{},"body":{"injectables/ImagesService.html":{}}}],["min",{"_index":667,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["minutes",{"_index":638,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["miscellaneous",{"_index":1775,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":572,"title":{},"body":{"injectables/Email.html":{}}}],["model",{"_index":386,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["models/board.schema",{"_index":314,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["models/chat.schema",{"_index":375,"title":{},"body":{"modules/ChatModule.html":{}}}],["models/pin.schema",{"_index":316,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/topic.schema",{"_index":318,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/user.schema",{"_index":319,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["modules/mailer",{"_index":1718,"title":{},"body":{"dependencies.html":{}}}],["mon",{"_index":661,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["mongo",{"_index":1750,"title":{},"body":{"dependencies.html":{}}}],["mongoosastic",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":412,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"dependencies.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["mongoose.schema",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.types.objectid",{"_index":1645,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["mongoose.types.objectid(pinid",{"_index":1402,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoose.types.objectid(userid",{"_index":1436,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoosemodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":320,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.connection_string",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1642,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["morgan",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["n",{"_index":783,"title":{},"body":{"injectables/ImagesService.html":{}}}],["nada",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"classes/HelpersUtils.html":{}}}],["name",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":610,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":609,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["ne",{"_index":467,"title":{},"body":{"injectables/ChatService.html":{}}}],["nestinterceptor",{"_index":823,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":1717,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1240,"title":{},"body":{"modules/SharedModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":720,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":718,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1167,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["new",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newemail",{"_index":843,"title":{},"body":{"interfaces/Payload.html":{}}}],["newpassword",{"_index":1514,"title":{},"body":{"controllers/UserController.html":{}}}],["newuser",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":817,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node",{"_index":1760,"title":{},"body":{"dependencies.html":{}}}],["nodemailer",{"_index":538,"title":{},"body":{"injectables/Email.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":542,"title":{},"body":{"injectables/Email.html":{}}}],["none",{"_index":734,"title":{},"body":{"controllers/ImagesController.html":{}}}],["notacceptableexception",{"_index":1534,"title":{},"body":{"controllers/UserController.html":{}}}],["notacceptableexception('cant",{"_index":1586,"title":{},"body":{"controllers/UserController.html":{}}}],["notacceptableexception('view",{"_index":1582,"title":{},"body":{"controllers/UserController.html":{}}}],["note",{"_index":486,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["notfoundexception('no",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('there",{"_index":355,"title":{},"body":{"controllers/ChatController.html":{}}}],["notification.service",{"_index":1245,"title":{},"body":{"modules/SharedModule.html":{}}}],["notificationcounter",{"_index":1452,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationofpinsactivity",{"_index":1793,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notifications",{"_index":1794,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationservice",{"_index":853,"title":{},"body":{"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"coverage.html":{},"index.html":{}}}],["now",{"_index":827,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":836,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{}}}],["number",{"_index":491,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/HelpersUtils.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["number(limit",{"_index":1634,"title":{},"body":{"injectables/ValidationService.html":{}}}],["number(offset",{"_index":1635,"title":{},"body":{"injectables/ValidationService.html":{}}}],["oauth20",{"_index":596,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/HelpersUtils.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["objectid",{"_index":1627,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectid.isvalid(id",{"_index":1631,"title":{},"body":{"injectables/ValidationService.html":{}}}],["objects",{"_index":398,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["observable",{"_index":821,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["offlinenotifications",{"_index":1795,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["offset",{"_index":888,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["oldpassword",{"_index":1515,"title":{},"body":{"controllers/UserController.html":{}}}],["on('end",{"_index":750,"title":{},"body":{"controllers/ImagesController.html":{}}}],["on('error",{"_index":751,"title":{},"body":{"controllers/ImagesController.html":{}}}],["optional",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["out",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{}}}],["overview",{"_index":1778,"title":{"index.html":{}},"body":{"index.html":{}}}],["owner",{"_index":537,"title":{},"body":{"injectables/Email.html":{}}}],["package",{"_index":1710,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":581,"title":{},"body":{"injectables/Email.html":{}}}],["param",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["param('boardid",{"_index":943,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('pinid",{"_index":937,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('recieverids",{"_index":349,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('sectionid",{"_index":946,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('senderid",{"_index":350,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('topicid",{"_index":1308,"title":{},"body":{"controllers/TopicController.html":{}}}],["param('topicname",{"_index":956,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["parameters",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["params",{"_index":1050,"title":{},"body":{"injectables/SearchService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["params.fcmtoken",{"_index":1596,"title":{},"body":{"controllers/UserController.html":{}}}],["params.topicid",{"_index":1332,"title":{},"body":{"controllers/TopicController.html":{}}}],["params.userid",{"_index":1590,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":1756,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":551,"title":{},"body":{"injectables/Email.html":{}}}],["passport",{"_index":595,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":593,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":598,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"interfaces/LoginDto.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":694,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["path.resolve(filepath",{"_index":738,"title":{},"body":{"controllers/ImagesController.html":{}}}],["payload",{"_index":169,"title":{"interfaces/Payload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["people",{"_index":1097,"title":{},"body":{"injectables/SearchService.html":{}}}],["permissions.dto.ts",{"_index":515,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["permissions.dto.ts:2",{"_index":523,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:3",{"_index":528,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:4",{"_index":524,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:5",{"_index":522,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:6",{"_index":526,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:7",{"_index":527,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:8",{"_index":525,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["personalization",{"_index":505,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["phantom",{"_index":556,"title":{},"body":{"injectables/Email.html":{}}}],["phantomconfirm",{"_index":570,"title":{},"body":{"injectables/Email.html":{}}}],["photos",{"_index":606,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":612,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":611,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pin",{"_index":315,"title":{"interfaces/pin.html":{}},"body":{"modules/BoardModule.html":{},"injectables/Email.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["pin.counts.goodideareacts",{"_index":1224,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.goodideareacts.valueof",{"_index":1223,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts",{"_index":1228,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts.valueof",{"_index":1227,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts",{"_index":1219,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts.valueof",{"_index":1218,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts",{"_index":1232,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts.valueof",{"_index":1231,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts",{"_index":1215,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts.valueof",{"_index":1214,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.dto.ts",{"_index":480,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["pin.dto.ts:10",{"_index":499,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:2",{"_index":493,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:3",{"_index":494,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:4",{"_index":492,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:5",{"_index":496,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:6",{"_index":498,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:7",{"_index":490,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:8",{"_index":497,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:9",{"_index":495,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.save().catch(err",{"_index":1405,"title":{},"body":{"injectables/TopicService.html":{}}}],["pin.title",{"_index":1108,"title":{},"body":{"injectables/SearchService.html":{}}}],["pin.topic",{"_index":1404,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinfullmatch",{"_index":1077,"title":{},"body":{"injectables/SearchService.html":{}}}],["pinfullmatch.length",{"_index":1079,"title":{},"body":{"injectables/SearchService.html":{}}}],["pinid",{"_index":880,"title":{},"body":{"controllers/RecommendationController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinmodel",{"_index":1044,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["pins",{"_index":938,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pins.controller",{"_index":851,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins.length",{"_index":1312,"title":{},"body":{"controllers/TopicController.html":{}}}],["pins.push(pin",{"_index":1412,"title":{},"body":{"injectables/TopicService.html":{}}}],["pins.service",{"_index":852,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins/pins.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["pinscontroller",{"_index":850,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{}}}],["pinsforyou",{"_index":1453,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsids",{"_index":1410,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinsinspired",{"_index":1454,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinslength",{"_index":1431,"title":{},"body":{"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinsmodule",{"_index":45,"title":{"modules/PinsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["pinsnotification",{"_index":1455,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsservice",{"_index":848,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{},"index.html":{}}}],["pipe",{"_index":834,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipe(response",{"_index":752,"title":{},"body":{"controllers/ImagesController.html":{}}}],["please",{"_index":568,"title":{},"body":{"injectables/Email.html":{}}}],["popularpins",{"_index":1456,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":545,"title":{},"body":{"injectables/Email.html":{}}}],["post",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/TopicController.html":{}}}],["post('/createtopic",{"_index":1319,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/createtopics",{"_index":1278,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/forget",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/me/uploadimage",{"_index":725,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/me/uploadimage')@apiconsumes('multipart/form",{"_index":711,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/seen",{"_index":359,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sentmessage",{"_index":364,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sign_up",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/sign_up/confirm",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/topic/addpin",{"_index":1313,"title":{},"body":{"controllers/TopicController.html":{}}}],["prefix",{"_index":987,"title":{},"body":{"controllers/SearchController.html":{}}}],["private",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["process.env.admin_email",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.base_url}/api/google/redirect",{"_index":603,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.connection_string",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.drive_client_email",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.drive_private_key",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.email",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.email_password",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_auth_provider_x509_cert_url",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_auth_uri",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_client_email",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_client_id",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_client_x509_cert_url",{"_index":97,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_private_key",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_private_key_id",{"_index":90,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_project_id",{"_index":89,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_token_uri",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.firebase_creadential_type",{"_index":88,"title":{},"body":{"injectables/AppService.html":{}}}],["process.env.front_base_url",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{}}}],["process.env.google_client_id",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/GoogleStrategy.html":{}}}],["process.env.secret_key",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{}}}],["process.exit",{"_index":103,"title":{},"body":{"injectables/AppService.html":{}}}],["profile",{"_index":588,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["profileimage",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["profileurl",{"_index":1646,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":1100,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["promise",{"_index":396,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["properties",{"_index":481,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/ImagesService.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["provide",{"_index":1247,"title":{},"body":{"modules/SharedModule.html":{}}}],["provided",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["public",{"_index":760,"title":{},"body":{"injectables/ImagesService.html":{}}}],["pull",{"_index":1090,"title":{},"body":{"injectables/SearchService.html":{}}}],["push",{"_index":469,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{}}}],["pusheddata",{"_index":622,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["put",{"_index":921,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/edit",{"_index":1263,"title":{},"body":{"controllers/TopicController.html":{}}}],["put('/home/me",{"_index":925,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/log",{"_index":1597,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/:fcmtoken",{"_index":1593,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/boards/view",{"_index":1576,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/confirm",{"_index":1562,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/follow",{"_index":1329,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/me/reset",{"_index":1546,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/update",{"_index":1554,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/more/boards/:boardid",{"_index":942,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/pins/:pinid",{"_index":935,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/sections/:boardid/:sectionid",{"_index":945,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["query",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":932,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('name",{"_index":1018,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('offset",{"_index":933,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('recentsearch",{"_index":1019,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('type",{"_index":1564,"title":{},"body":{"controllers/UserController.html":{}}}],["query('viewstate",{"_index":1578,"title":{},"body":{"controllers/UserController.html":{}}}],["reactpin",{"_index":1122,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reactpin(socket",{"_index":1150,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reacts",{"_index":1659,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reacttype",{"_index":1208,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["readable",{"_index":771,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable._read",{"_index":791,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable.push(null",{"_index":793,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable.push(stream",{"_index":792,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["recent",{"_index":1088,"title":{},"body":{"injectables/SearchService.html":{}}}],["recentsearch",{"_index":996,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["reciever",{"_index":408,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["reciever.firstname",{"_index":1188,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.lastname",{"_index":1189,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.profileimage",{"_index":1184,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recieverid",{"_index":338,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["recieverids",{"_index":336,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["recieverids.concat(senderid",{"_index":431,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverids.split",{"_index":352,"title":{},"body":{"controllers/ChatController.html":{}}}],["recieverids[0",{"_index":427,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverimage",{"_index":1183,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recievername",{"_index":1187,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recommendation.controller",{"_index":979,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["recommendation.service",{"_index":924,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{}}}],["recommendation/recommendation.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["recommendationcontroller",{"_index":855,"title":{"controllers/RecommendationController.html":{}},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{}}}],["recommendationmodule",{"_index":46,"title":{"modules/RecommendationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"index.html":{},"modules.html":{}}}],["recommendationservice",{"_index":923,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{},"index.html":{}}}],["recommendedusers",{"_index":1788,"title":{},"body":{"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1768,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":587,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["registerdto",{"_index":153,"title":{"interfaces/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["rejectunauthorized",{"_index":554,"title":{},"body":{"injectables/Email.html":{}}}],["repins",{"_index":1799,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["replier",{"_index":1654,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["replies",{"_index":1653,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply",{"_index":1123,"title":{"interfaces/reply.html":{}},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply(socket",{"_index":1153,"title":{},"body":{"classes/SharedGateway.html":{}}}],["report",{"_index":574,"title":{},"body":{"injectables/Email.html":{}}}],["reported",{"_index":575,"title":{},"body":{"injectables/Email.html":{}}}],["req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.header('authorization",{"_index":1570,"title":{},"body":{"controllers/UserController.html":{}}}],["req.method",{"_index":830,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.settimeout(0",{"_index":927,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["req.url",{"_index":832,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.user",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["req.user._id",{"_index":928,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["req.user.email",{"_index":1565,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.firstname",{"_index":1571,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.newemail",{"_index":1566,"title":{},"body":{"controllers/UserController.html":{}}}],["reqired",{"_index":1551,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["request.method",{"_index":697,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":695,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('cors",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('fs",{"_index":774,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('googleapis",{"_index":772,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('graceful",{"_index":776,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":1170,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["require('mongoose').types.objectid",{"_index":1628,"title":{},"body":{"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["require('morgan",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('path",{"_index":724,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{}}}],["res.data",{"_index":749,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.data.id",{"_index":798,"title":{},"body":{"injectables/ImagesService.html":{}}}],["res.redirect",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["resetemail",{"_index":1572,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword(req",{"_index":1513,"title":{},"body":{"controllers/UserController.html":{}}}],["resolvedpath",{"_index":737,"title":{},"body":{"controllers/ImagesController.html":{}}}],["resource",{"_index":796,"title":{},"body":{"injectables/ImagesService.html":{}}}],["response",{"_index":685,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{}}}],["response.sendfile(resolvedpath",{"_index":739,"title":{},"body":{"controllers/ImagesController.html":{}}}],["response.status(status).json(errorresponse",{"_index":702,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsetype",{"_index":744,"title":{},"body":{"controllers/ImagesController.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":1075,"title":{},"body":{"injectables/SearchService.html":{}}}],["result:pin",{"_index":1055,"title":{},"body":{"injectables/SearchService.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HelpersUtils.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["rimraf",{"_index":1771,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["rxjs",{"_index":824,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":826,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["s",{"_index":670,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["savedpins",{"_index":1796,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["savepin",{"_index":521,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["savers",{"_index":1657,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["saves",{"_index":1800,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["schema",{"_index":321,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":604,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["scopes",{"_index":778,"title":{},"body":{"injectables/ImagesService.html":{}}}],["search",{"_index":988,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["search(model",{"_index":1072,"title":{},"body":{"injectables/SearchService.html":{}}}],["search.controller",{"_index":1039,"title":{},"body":{"modules/SearchModule.html":{}}}],["search.service",{"_index":1015,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{}}}],["search/search.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["searchcontroller",{"_index":985,"title":{"controllers/SearchController.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"coverage.html":{}}}],["searcher",{"_index":1071,"title":{},"body":{"injectables/SearchService.html":{}}}],["searcher.search(name",{"_index":1074,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchmodule",{"_index":47,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{},"index.html":{},"modules.html":{}}}],["searchservice",{"_index":1014,"title":{"injectables/SearchService.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"coverage.html":{},"index.html":{}}}],["sec",{"_index":669,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["seconds",{"_index":668,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["secretorkey",{"_index":809,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":487,"title":{"interfaces/section.html":{}},"body":{"classes/CreatePinDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sectionid",{"_index":884,"title":{},"body":{"controllers/RecommendationController.html":{},"miscellaneous/variables.html":{}}}],["sectionname",{"_index":1643,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sections",{"_index":1112,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":547,"title":{},"body":{"injectables/Email.html":{}}}],["seen",{"_index":382,"title":{},"body":{"injectables/ChatService.html":{}}}],["seen(userid",{"_index":404,"title":{},"body":{"injectables/ChatService.html":{}}}],["seendeliver",{"_index":326,"title":{},"body":{"controllers/ChatController.html":{}}}],["seendeliver(senderid",{"_index":337,"title":{},"body":{"controllers/ChatController.html":{}}}],["seenmessage",{"_index":383,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["seenmessage(senderid",{"_index":406,"title":{},"body":{"injectables/ChatService.html":{}}}],["seenmessage(socket",{"_index":1156,"title":{},"body":{"classes/SharedGateway.html":{}}}],["seenstatus",{"_index":451,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":424,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"modules/SharedModule.html":{}}}],["sendemail",{"_index":531,"title":{},"body":{"injectables/Email.html":{}}}],["sendemail(email",{"_index":533,"title":{},"body":{"injectables/Email.html":{}}}],["sender",{"_index":402,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["sender.firstname",{"_index":1191,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.lastname",{"_index":1192,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.profileimage",{"_index":1186,"title":{},"body":{"classes/SharedGateway.html":{}}}],["senderdelete",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["senderid",{"_index":333,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["senderimage",{"_index":1185,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendername",{"_index":1190,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendmessage",{"_index":384,"title":{},"body":{"injectables/ChatService.html":{}}}],["sendmessage(senderid",{"_index":409,"title":{},"body":{"injectables/ChatService.html":{}}}],["sentmessage",{"_index":327,"title":{},"body":{"controllers/ChatController.html":{}}}],["sentmessage(senderid",{"_index":342,"title":{},"body":{"controllers/ChatController.html":{}}}],["server",{"_index":700,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{}}}],["set",{"_index":436,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/UserController.html":{}}}],["setfcmtoken",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(@param",{"_index":1594,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(params",{"_index":1518,"title":{},"body":{"controllers/UserController.html":{}}}],["settings",{"_index":1532,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto",{"_index":1537,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto.ts",{"_index":1443,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["setuserid",{"_index":1124,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setuserid(socket",{"_index":1159,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setviewstate",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{}}}],["setviewstate(@request",{"_index":1577,"title":{},"body":{"controllers/UserController.html":{}}}],["setviewstate(req",{"_index":1521,"title":{},"body":{"controllers/UserController.html":{}}}],["shared.gateway",{"_index":1244,"title":{},"body":{"modules/SharedModule.html":{}}}],["shared/http",{"_index":922,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["shared/notification.service",{"_index":854,"title":{},"body":{"modules/PinsModule.html":{},"modules/RecommendationModule.html":{}}}],["shared/send",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["shared/shared.gateway",{"_index":377,"title":{},"body":{"modules/ChatModule.html":{}}}],["shared/shared.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["shared/validation.service",{"_index":416,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["sharedgateway",{"_index":376,"title":{"classes/SharedGateway.html":{}},"body":{"modules/ChatModule.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["sharedmodule",{"_index":48,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["shuffle",{"_index":619,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["shuffle(arr",{"_index":644,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["shuffled",{"_index":647,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["sign",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign(payload",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign_up",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(@body",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(userdto",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["signpayload",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["signpayload(payload",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":563,"title":{},"body":{"injectables/Email.html":{}}}],["similar",{"_index":640,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["site/23259289#23259289",{"_index":643,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["size",{"_index":434,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["smtp.gmail.com",{"_index":544,"title":{},"body":{"injectables/Email.html":{}}}],["socket",{"_index":1129,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.id",{"_index":1176,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.io",{"_index":1168,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["socketid",{"_index":1174,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["sort",{"_index":453,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{}}}],["sorttype",{"_index":1797,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["specificelements",{"_index":1625,"title":{},"body":{"injectables/ValidationService.html":{}}}],["specificelements.length",{"_index":1632,"title":{},"body":{"injectables/ValidationService.html":{}}}],["specificelements.slice(offset",{"_index":1636,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/.../board.schema.ts",{"_index":1801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chat.schema.ts",{"_index":1802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../images.controller.ts",{"_index":1807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../images.service.ts",{"_index":1803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1777,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message.schema.ts",{"_index":1805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pin.schema.ts",{"_index":1808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shared.gateway.ts",{"_index":1804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../topic.schema.ts",{"_index":1809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation.service.ts",{"_index":1806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:34",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:6",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:102",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:121",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:73",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:86",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:96",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":244,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":840,"title":{},"body":{"interfaces/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":980,"title":{},"body":{"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":583,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:17",{"_index":591,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":585,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":799,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:24",{"_index":804,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":801,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/board/board.controller.ts",{"_index":1670,"title":{},"body":{"coverage.html":{}}}],["src/board/board.module.ts",{"_index":309,"title":{},"body":{"modules/BoardModule.html":{}}}],["src/board/board.service.ts",{"_index":1672,"title":{},"body":{"coverage.html":{}}}],["src/board/dto/edit",{"_index":501,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts",{"_index":323,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:22",{"_index":335,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:33",{"_index":330,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:40",{"_index":341,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:56",{"_index":345,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.module.ts",{"_index":372,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service",{"_index":1169,"title":{},"body":{"classes/SharedGateway.html":{},"modules/SharedModule.html":{}}}],["src/chat/chat.service.ts",{"_index":379,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:111",{"_index":394,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:134",{"_index":405,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:158",{"_index":407,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:25",{"_index":411,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:58",{"_index":400,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:76",{"_index":397,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:9",{"_index":390,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/images/images.controller.ts",{"_index":704,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/images/images.controller.ts:26",{"_index":713,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:35",{"_index":709,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.module.ts",{"_index":757,"title":{},"body":{"modules/ImagesModule.html":{}}}],["src/images/images.service.ts",{"_index":759,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/images/images.service.ts:14",{"_index":764,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:26",{"_index":766,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:41",{"_index":769,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/main.ts",{"_index":1678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/models/board.schema.ts",{"_index":1680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/chat.schema",{"_index":1246,"title":{},"body":{"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/chat.schema.ts",{"_index":1681,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/message.schema",{"_index":378,"title":{},"body":{"modules/ChatModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/message.schema.ts",{"_index":1682,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/pin.schema.ts",{"_index":1683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/topic.schema.ts",{"_index":1684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.schema",{"_index":1616,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user.schema.ts",{"_index":1685,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pins/dto/create",{"_index":479,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["src/pins/pins.controller.ts",{"_index":1686,"title":{},"body":{"coverage.html":{}}}],["src/pins/pins.module.ts",{"_index":849,"title":{},"body":{"modules/PinsModule.html":{}}}],["src/pins/pins.service.ts",{"_index":1687,"title":{},"body":{"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts",{"_index":856,"title":{},"body":{"controllers/RecommendationController.html":{},"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts:119",{"_index":890,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:138",{"_index":914,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:159",{"_index":896,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:173",{"_index":917,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:191",{"_index":920,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:205",{"_index":893,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:21",{"_index":878,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:217",{"_index":911,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:229",{"_index":905,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:241",{"_index":908,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:33",{"_index":899,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:52",{"_index":882,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:64",{"_index":902,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:83",{"_index":875,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:98",{"_index":886,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.module.ts",{"_index":978,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["src/recommendation/recommendation.service.ts",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["src/search/search.controller.ts",{"_index":986,"title":{},"body":{"controllers/SearchController.html":{},"coverage.html":{}}}],["src/search/search.controller.ts:19",{"_index":998,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:34",{"_index":1007,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:49",{"_index":1010,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:64",{"_index":1001,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:79",{"_index":1013,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:87",{"_index":1004,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.module.ts",{"_index":1038,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/search/search.service.ts",{"_index":1041,"title":{},"body":{"injectables/SearchService.html":{},"coverage.html":{}}}],["src/search/search.service.ts:10",{"_index":1045,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:109",{"_index":1063,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:139",{"_index":1059,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:153",{"_index":1065,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:169",{"_index":1057,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:27",{"_index":1051,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:56",{"_index":1054,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:74",{"_index":1061,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:89",{"_index":1048,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/shared/http",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts",{"_index":813,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts:13",{"_index":819,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/notification.service.ts",{"_index":1693,"title":{},"body":{"coverage.html":{}}}],["src/shared/send",{"_index":529,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["src/shared/shared.gateway.ts",{"_index":1116,"title":{},"body":{"classes/SharedGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/shared.gateway.ts:121",{"_index":1155,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:126",{"_index":1152,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:15",{"_index":1126,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:166",{"_index":1143,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:191",{"_index":1146,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:21",{"_index":1139,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:222",{"_index":1131,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:24",{"_index":1161,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:36",{"_index":1134,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:40",{"_index":1164,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:56",{"_index":1137,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:76",{"_index":1158,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:95",{"_index":1149,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.module.ts",{"_index":1237,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/shared/validation.service.ts",{"_index":1618,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validation.service.ts:10",{"_index":1623,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:17",{"_index":1626,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:7",{"_index":1621,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/static/default.jpg",{"_index":736,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/topic/topic.controller.ts",{"_index":1250,"title":{},"body":{"controllers/TopicController.html":{},"coverage.html":{}}}],["src/topic/topic.controller.ts:103",{"_index":1285,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:110",{"_index":1298,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:117",{"_index":1272,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:127",{"_index":1282,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:27",{"_index":1295,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:36",{"_index":1292,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:44",{"_index":1289,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:57",{"_index":1268,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:67",{"_index":1275,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:86",{"_index":1279,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:95",{"_index":1264,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.module.ts",{"_index":1347,"title":{},"body":{"modules/TopicModule.html":{}}}],["src/topic/topic.service.ts",{"_index":1349,"title":{},"body":{"injectables/TopicService.html":{},"coverage.html":{}}}],["src/topic/topic.service.ts:125",{"_index":1359,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:153",{"_index":1374,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:16",{"_index":1356,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:178",{"_index":1361,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:200",{"_index":1372,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:25",{"_index":1380,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:251",{"_index":1382,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:261",{"_index":1369,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:31",{"_index":1367,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:52",{"_index":1362,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:83",{"_index":1376,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:98",{"_index":1378,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/types/board.ts",{"_index":1637,"title":{},"body":{"interfaces/board.html":{},"coverage.html":{},"interfaces/section.html":{}}}],["src/types/chat.ts",{"_index":1648,"title":{},"body":{"interfaces/chat.html":{},"coverage.html":{}}}],["src/types/message",{"_index":417,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/types/message.ts",{"_index":1698,"title":{},"body":{"coverage.html":{},"interfaces/message.html":{}}}],["src/types/payload.ts",{"_index":841,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/types/pin.ts",{"_index":1650,"title":{},"body":{"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{}}}],["src/types/topic.ts",{"_index":1699,"title":{},"body":{"coverage.html":{},"interfaces/topic.html":{}}}],["src/types/user.ts",{"_index":1701,"title":{},"body":{"coverage.html":{},"interfaces/user.html":{}}}],["src/user/dto/update",{"_index":1438,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:129",{"_index":1524,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:139",{"_index":1507,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:150",{"_index":1484,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:157",{"_index":1526,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:164",{"_index":1520,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:173",{"_index":1510,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:179",{"_index":1479,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:188",{"_index":1487,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:198",{"_index":1489,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:208",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:219",{"_index":1504,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:229",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:30",{"_index":1512,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:37",{"_index":1492,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:49",{"_index":1517,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":1530,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:77",{"_index":1533,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:94",{"_index":1482,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"modules/TopicModule.html":{}}}],["src/user/user.module.ts",{"_index":1614,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1705,"title":{},"body":{"coverage.html":{}}}],["src/utilities/helpers.utils.ts",{"_index":615,"title":{},"body":{"classes/HelpersUtils.html":{},"coverage.html":{}}}],["src/utilities/helpers.utils.ts:21",{"_index":627,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["src/utilities/helpers.utils.ts:34",{"_index":629,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["src/utilities/helpers.utils.ts:8",{"_index":645,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["src/utilities/helpers.utils.ts:82",{"_index":624,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["src/utilities/user.decorator.ts",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stack",{"_index":641,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["startdate",{"_index":506,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["state",{"_index":1587,"title":{},"body":{"controllers/UserController.html":{}}}],["statements",{"_index":1663,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":688,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ImagesService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["strategies/google.strategy",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":594,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":745,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.drive_client_email",{"_index":781,"title":{},"body":{"injectables/ImagesService.html":{}}}],["string(process.env.drive_private_key.replace(/\\\\n/g",{"_index":782,"title":{},"body":{"injectables/ImagesService.html":{}}}],["string(process.env.email",{"_index":550,"title":{},"body":{"injectables/Email.html":{}}}],["string(process.env.email_password",{"_index":552,"title":{},"body":{"injectables/Email.html":{}}}],["string(user",{"_index":463,"title":{},"body":{"injectables/ChatService.html":{}}}],["string(userid",{"_index":464,"title":{},"body":{"injectables/ChatService.html":{}}}],["subject",{"_index":557,"title":{},"body":{"injectables/Email.html":{}}}],["subscribemessage",{"_index":1165,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('clearuserid",{"_index":1130,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('comment",{"_index":1133,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('delivered",{"_index":1136,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likecomment",{"_index":1142,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likereply",{"_index":1145,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('message",{"_index":1148,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reactpin",{"_index":1151,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reply",{"_index":1154,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('seen",{"_index":1157,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('setuserid",{"_index":1160,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('typing",{"_index":1163,"title":{},"body":{"classes/SharedGateway.html":{}}}],["success",{"_index":790,"title":{},"body":{"injectables/ImagesService.html":{},"controllers/UserController.html":{}}}],["successfully",{"_index":1318,"title":{},"body":{"controllers/TopicController.html":{}}}],["such",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":599,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":1785,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1786,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1709,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1708,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":825,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["text",{"_index":410,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/SearchService.html":{}}}],["thanks",{"_index":1230,"title":{},"body":{"classes/SharedGateway.html":{}}}],["thanksreacts",{"_index":1229,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.googlelogin(req",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(payload",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(userdto",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.boardmodel.aggregate",{"_index":1111,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.chatmodel",{"_index":438,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.find",{"_index":457,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findone",{"_index":449,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findoneandupdate",{"_index":432,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatservice.deliver(recieverid",{"_index":1197,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.getchats(userid",{"_index":358,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.getmessage(ids",{"_index":354,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.seen(recieverid",{"_index":1199,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.seenmessage",{"_index":363,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.sendmessage",{"_index":367,"title":{},"body":{"controllers/ChatController.html":{},"classes/SharedGateway.html":{}}}],["this.checkfollowtopic(userid",{"_index":1421,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.drive",{"_index":784,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.drive.files",{"_index":788,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.drive.files.create",{"_index":795,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.email.sendemail",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.fuzzy",{"_index":1103,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.fuzzy(pin",{"_index":1082,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.gettopicbyid(topicid",{"_index":1408,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.imagesservice.drive.files.get",{"_index":740,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.uploadfile",{"_index":729,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.messagemodel",{"_index":440,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.find",{"_index":450,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.findoneandupdate",{"_index":466,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.updatemany",{"_index":474,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.pinmodel",{"_index":1083,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.find",{"_index":1078,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.findbyid(data.pinid",{"_index":1205,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.pinmodel.findbyid(id",{"_index":1403,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.recommendationservice.boardmorelike(userid",{"_index":944,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.boardsforyou(userid",{"_index":964,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.followallrecommendation",{"_index":954,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getboardmorelike",{"_index":949,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.gethomefeed",{"_index":934,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getpinmorelike",{"_index":941,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getsectionmorelike",{"_index":951,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.homefeed(userid",{"_index":930,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinmorelike(userid",{"_index":939,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsforyou(userid",{"_index":970,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsinspired(userid",{"_index":973,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.popularpins(userid",{"_index":967,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.sectionmorelike",{"_index":947,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.topicrecommendation",{"_index":957,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.trendingrecommendation",{"_index":960,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.searchservice.addtorecentsearch(userid",{"_index":1020,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getallpins(name",{"_index":1021,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getboards(name",{"_index":1028,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getkeys(name",{"_index":1034,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getmypins(name",{"_index":1023,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getpeople(name",{"_index":1026,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getrecentsearch(userid",{"_index":1031,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.server.emit('sendcomment",{"_index":1177,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.emit('sendpinreact",{"_index":1207,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.emit('sendreply",{"_index":1203,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(reciever.socketid).emit('istyping",{"_index":1182,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(reciever.socketid).emit('sendmessage",{"_index":1202,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(sender.socketid).emit('setdelivered",{"_index":1196,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(sender.socketid).emit('setseen",{"_index":1198,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.topicmodel",{"_index":1387,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.aggregate",{"_index":1435,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.find",{"_index":1393,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.findbyid(topicid",{"_index":1392,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicservice.addpintotopic(topicname",{"_index":1316,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.checkfollowtopic(req.user._id",{"_index":1340,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.createtopic",{"_index":1324,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.edittopic(topics",{"_index":1328,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followingtopics(req.user._id",{"_index":1343,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followtopic(req.user._id",{"_index":1331,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.getpinsoftopic(topicid",{"_index":1311,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopicbyid(topicid",{"_index":1309,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopics(userid",{"_index":1304,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.topicsseeds(topics",{"_index":1326,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.unfollowtopic(req.user._id",{"_index":1336,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.usermodel",{"_index":1095,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.aggregate",{"_index":1098,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.findbyid(recieverid",{"_index":1181,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(senderid",{"_index":1179,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1109,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":1089,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.userservice.checkcreatedata(userdto",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkfollowuser(user",{"_index":1600,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat",{"_index":1568,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat(body.email",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(email",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(user.email",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.checkupdatedata(updatedata",{"_index":1556,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(req.user",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(req.user._id",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findbylogin(userdto",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.followuser(req.user._id",{"_index":1589,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getpublichome(index",{"_index":1609,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(payload._id",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(req.user._id",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(userid",{"_index":1415,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.userservice.getuserme(params.id",{"_index":1545,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserme(req.user._id",{"_index":1540,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusernotifications(req.user._id",{"_index":1543,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getviewstate(req.user._id",{"_index":1585,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.resetpassword",{"_index":1553,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setemail(req.user._id",{"_index":1574,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setviewstate(req.user._id",{"_index":1580,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.unfollowtopic(userid",{"_index":1434,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.userservice.unfollowuser(req.user._id",{"_index":1592,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatedatainuser(req.user._id",{"_index":1559,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatefcmtocken",{"_index":1595,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatesettings(req.user._id",{"_index":1560,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserinfo(req.user._id",{"_index":1557,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(params.userid",{"_index":1605,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(req.user._id",{"_index":1602,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(params.userid",{"_index":1607,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(req.user._id",{"_index":1603,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validationservice.checkmongooseid([imageid",{"_index":1385,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([pinid",{"_index":1401,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([senderid",{"_index":426,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.checkmongooseid([topicid",{"_index":1391,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([userid",{"_index":456,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid(userids",{"_index":447,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.limitoffset",{"_index":1076,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.validationservice.limitoffset(limit",{"_index":1080,"title":{},"body":{"injectables/SearchService.html":{}}}],["throw",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["time",{"_index":339,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/HelpersUtils.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":471,"title":{},"body":{"injectables/ChatService.html":{},"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":488,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["tls",{"_index":553,"title":{},"body":{"injectables/Email.html":{}}}],["token",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{},"controllers/UserController.html":{}}}],["topic",{"_index":317,"title":{"interfaces/topic.html":{}},"body":{"modules/BoardModule.html":{},"classes/EditBoardDto.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["topic._id",{"_index":1397,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.controller",{"_index":1348,"title":{},"body":{"modules/TopicModule.html":{}}}],["topic.description",{"_index":1399,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers",{"_index":1418,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.includes(userid",{"_index":1396,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.length",{"_index":1419,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.push(userid",{"_index":1423,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.imageid",{"_index":1400,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.name",{"_index":1398,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins",{"_index":1411,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins.length",{"_index":1409,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.save",{"_index":1390,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.service",{"_index":1301,"title":{},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{}}}],["topic/:topicid",{"_index":1271,"title":{},"body":{"controllers/TopicController.html":{}}}],["topic/topic.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["topic[0].pins.push(pinid",{"_index":1406,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic[0].save().catch(err",{"_index":1407,"title":{},"body":{"injectables/TopicService.html":{}}}],["topiccontroller",{"_index":1249,"title":{"controllers/TopicController.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"coverage.html":{}}}],["topicexist",{"_index":1386,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicid",{"_index":1287,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topicmodel",{"_index":1357,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicmodule",{"_index":49,"title":{"modules/TopicModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["topicname",{"_index":489,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["topics",{"_index":1265,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topics.map(topic",{"_index":1394,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicservice",{"_index":1300,"title":{"injectables/TopicService.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"coverage.html":{},"index.html":{}}}],["topicsseeds",{"_index":1354,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicsseeds(topics",{"_index":1379,"title":{},"body":{"injectables/TopicService.html":{}}}],["transformer",{"_index":1735,"title":{},"body":{"dependencies.html":{}}}],["transporter",{"_index":541,"title":{},"body":{"injectables/Email.html":{}}}],["transporter.sendmail(mailoptions",{"_index":582,"title":{},"body":{"injectables/Email.html":{}}}],["true",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HelpersUtils.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["type(socket",{"_index":1162,"title":{},"body":{"classes/SharedGateway.html":{}}}],["types",{"_index":1066,"title":{},"body":{"injectables/SearchService.html":{}}}],["types.objectid(userid",{"_index":1086,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/board",{"_index":1067,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/chat",{"_index":415,"title":{},"body":{"injectables/ChatService.html":{}}}],["types/fuzzy",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1731,"title":{},"body":{"dependencies.html":{}}}],["types/payload",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["types/pin",{"_index":1068,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["types/topic",{"_index":1383,"title":{},"body":{"injectables/TopicService.html":{}}}],["types/user",{"_index":414,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/ValidationService.html":{}}}],["undefined",{"_index":1629,"title":{},"body":{"injectables/ValidationService.html":{}}}],["unfollow",{"_index":1337,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic",{"_index":1261,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic(@param",{"_index":1335,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(params",{"_index":1296,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(userid",{"_index":1381,"title":{},"body":{"injectables/TopicService.html":{}}}],["unfollowuser",{"_index":1474,"title":{},"body":{"controllers/UserController.html":{}}}],["unfollowuser(@param",{"_index":1591,"title":{},"body":{"controllers/UserController.html":{}}}],["unfollowuser(params",{"_index":1525,"title":{},"body":{"controllers/UserController.html":{}}}],["update",{"_index":564,"title":{},"body":{"injectables/Email.html":{},"controllers/UserController.html":{}}}],["updated",{"_index":1581,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata",{"_index":1528,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata.deleteflag",{"_index":1561,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata.notificationcounter",{"_index":1558,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedto",{"_index":1437,"title":{"interfaces/UpdateDto.html":{}},"body":{"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatesettingsdto",{"_index":1442,"title":{"interfaces/UpdateSettingsDto.html":{}},"body":{"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updateuser",{"_index":1475,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(@request",{"_index":1555,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(req",{"_index":1527,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings",{"_index":1476,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings(req",{"_index":1531,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadedfiles",{"_index":716,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadfile",{"_index":763,"title":{},"body":{"injectables/ImagesService.html":{}}}],["uploadfile(filename",{"_index":767,"title":{},"body":{"injectables/ImagesService.html":{}}}],["uploadimage",{"_index":706,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadimage(@uploadedfiles",{"_index":728,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadimage(files",{"_index":710,"title":{},"body":{"controllers/ImagesController.html":{}}}],["url",{"_index":831,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":1248,"title":{},"body":{"modules/SharedModule.html":{}}}],["usefilters",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('google",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('jwt",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@delete('/me/delete",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@delete('/me/follow",{"_index":1297,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/follower",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/following",{"_index":1503,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/allpins",{"_index":997,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/board",{"_index":1000,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getchats/:userid",{"_index":329,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/getkeys",{"_index":1003,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getmessagessent/:recieverids/:senderid",{"_index":334,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/me",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@get('/me/boards/view",{"_index":1506,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/boardsforyou",{"_index":892,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/follow",{"_index":1270,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/follower",{"_index":1486,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/following",{"_index":1281,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/home",{"_index":898,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsforyou",{"_index":904,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsrecentactivity",{"_index":907,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/popularpins",{"_index":910,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/follow",{"_index":895,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/topics/:topicname",{"_index":916,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/trending",{"_index":919,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/boards/:boardid",{"_index":889,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/pins/:pinid",{"_index":901,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/sections/:boardid/:sectionid",{"_index":913,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/mypins",{"_index":1006,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/people",{"_index":1009,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/recentsearch",{"_index":1012,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/topic",{"_index":1294,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid",{"_index":1291,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid/pins",{"_index":1288,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('notifications/me",{"_index":1491,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('users/me",{"_index":1511,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('/createtopic",{"_index":1274,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@post('/seen",{"_index":340,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sentmessage",{"_index":344,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sign_up/confirm",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@post('/topic/addpin",{"_index":1267,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@put('/home/me",{"_index":877,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/log",{"_index":1509,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/:fcmtoken",{"_index":1519,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/boards/view",{"_index":1523,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/confirm",{"_index":1481,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/follow",{"_index":1284,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/reset",{"_index":1516,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/update",{"_index":1529,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/more/boards/:boardid",{"_index":874,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/pins/:pinid",{"_index":881,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/sections/:boardid/:sectionid",{"_index":885,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useinterceptors",{"_index":715,"title":{},"body":{"controllers/ImagesController.html":{}}}],["useinterceptors(filesinterceptor('file",{"_index":727,"title":{},"body":{"controllers/ImagesController.html":{}}}],["user",{"_index":199,"title":{"interfaces/user.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1615,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1538,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":1439,"title":{},"body":{"interfaces/UpdateDto.html":{},"coverage.html":{}}}],["user.email",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.firstname",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.followingtopics",{"_index":1424,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.followingtopics.push(topicid",{"_index":1425,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lastname",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.lasttopics",{"_index":1426,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.length",{"_index":1427,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.push",{"_index":1430,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.slice(1",{"_index":1433,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics[user.lasttopics.length",{"_index":1428,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.password",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user.picture",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.profileimage",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["user.recentsearch",{"_index":1092,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.length",{"_index":1091,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.slice(0",{"_index":1093,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.save",{"_index":1094,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["user.service",{"_index":1535,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.socketid",{"_index":1175,"title":{},"body":{"classes/SharedGateway.html":{}}}],["user/:userid",{"_index":1478,"title":{},"body":{"controllers/UserController.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{}}}],["user/user.service",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TopicService.html":{}}}],["usercontroller",{"_index":1457,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.email",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.firstname",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["useremail",{"_index":577,"title":{},"body":{"injectables/Email.html":{}}}],["userid",{"_index":331,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["userids",{"_index":401,"title":{},"body":{"injectables/ChatService.html":{}}}],["userids.concat(senderid",{"_index":448,"title":{},"body":{"injectables/ChatService.html":{}}}],["userimage",{"_index":1210,"title":{},"body":{"classes/SharedGateway.html":{}}}],["usermodel",{"_index":391,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["username",{"_index":534,"title":{},"body":{"injectables/Email.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1025,"title":{},"body":{"controllers/SearchController.html":{}}}],["userservice",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["usersids",{"_index":433,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["v3",{"_index":787,"title":{},"body":{"injectables/ImagesService.html":{}}}],["validate",{"_index":584,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(accesstoken",{"_index":586,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":802,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.service",{"_index":1243,"title":{},"body":{"modules/SharedModule.html":{}}}],["validationservice",{"_index":389,"title":{"injectables/ValidationService.html":{}},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"index.html":{}}}],["value",{"_index":1813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":654,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["var",{"_index":540,"title":{},"body":{"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["variable",{"_index":1676,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":100,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AppService.html":{},"miscellaneous/variables.html":{}}}],["verifiedcallback",{"_index":803,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifycallback",{"_index":590,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["version",{"_index":786,"title":{},"body":{"injectables/ImagesService.html":{}}}],["view",{"_index":1579,"title":{},"body":{"controllers/UserController.html":{}}}],["viewstate",{"_index":1522,"title":{},"body":{"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":682,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["websocketgateway",{"_index":1166,"title":{},"body":{"classes/SharedGateway.html":{}}}],["websocketserver",{"_index":1127,"title":{},"body":{"classes/SharedGateway.html":{}}}],["went",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["width",{"_index":1364,"title":{},"body":{"injectables/TopicService.html":{}}}],["world",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["wow",{"_index":1213,"title":{},"body":{"classes/SharedGateway.html":{}}}],["wowreacts",{"_index":1212,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["x1f44b",{"_index":558,"title":{},"body":{"injectables/Email.html":{}}}],["x1f60a",{"_index":561,"title":{},"body":{"injectables/Email.html":{}}}],["x1f614",{"_index":571,"title":{},"body":{"injectables/Email.html":{}}}],["xxx",{"_index":634,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["yr",{"_index":657,"title":{},"body":{"classes/HelpersUtils.html":{}}}],["zoom",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nPinsModule\n\nPinsModule\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BoardModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            PinsModule\n                        \n                        \n                            RecommendationModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PinsModule } from './pins/pins.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { SharedModule } from './shared/shared.module';\nimport { BoardModule } from './board/board.module';\nimport { ImagesModule } from './images/images.module';\nimport { TopicModule } from './topic/topic.module';\nimport { UserModule } from './user/user.module';\nimport { SearchModule } from './search/search.module';\nimport { ChatModule } from './chat/chat.module';\nimport { RecommendationModule } from './recommendation/recommendation.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.CONNECTION_STRING),\n    PinsModule,\n    BoardModule,\n    ImagesModule,\n    TopicModule,\n    SharedModule,\n    AuthModule,\n    UserModule,\n    SearchModule,\n    ChatModule,\n    RecommendationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**\n * @module App\n */\n@Injectable()\nexport class AppService {\n  constructor() {\n    if (\n      !process.env.SECRET_KEY ||\n      !process.env.CONNECTION_STRING ||\n      !process.env.EMAIL ||\n      !process.env.EMAIL_PASSWORD ||\n      !process.env.GOOGLE_CLIENT_ID ||\n      !process.env.GOOGLE_SECRET ||\n      !process.env.ADMIN_EMAIL ||\n      !process.env.FRONT_BASE_URL ||\n      !process.env.DRIVE_CLIENT_EMAIL ||\n      !process.env.DRIVE_PRIVATE_KEY ||\n      !process.env.FIREBASE_CREADENTIAL_TYPE ||\n      !process.env.FIREBASE_CREADENTIAL_PROJECT_ID ||\n      !process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY_ID ||\n      !process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY ||\n      !process.env.FIREBASE_CREADENTIAL_CLIENT_ID ||\n      !process.env.FIREBASE_CREADENTIAL_CLIENT_EMAIL ||\n      !process.env.FIREBASE_CREADENTIAL_AUTH_URI ||\n      !process.env.FIREBASE_CREADENTIAL_TOKEN_URI ||\n      !process.env.FIREBASE_CREADENTIAL_AUTH_PROVIDER_X509_CERT_URL ||\n      !process.env.FIREBASE_CREADENTIAL_CLIENT_X509_CERT_URL\n    ) {\n      console.error('All Env Variables Should Be Provided To Run The App');\n      process.exit();\n    }\n  }\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkEmail\n                            \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                deleteMe\n                            \n                            \n                                    Async\n                                forgetPassword\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                sign_up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/checkEmail')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sign_up/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/delete')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            forgetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forgetPassword(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forget-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userDTO: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign_up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign_up(userDTO: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign_up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Post,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Req,\n  NotFoundException,\n  Res,\n  UseFilters,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { AuthService } from './auth.service';\nimport { Email } from '../shared/send-email.service';\nimport { HttpExceptionFilter } from 'src/shared/http-exception.filter';\n\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private email: Email,\n  ) {}\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req) {}\n\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthRedirect(@Req() req, @Res() res) {\n    const data = await this.authService.googleLogin(req);\n    if (data) {\n      console.log(\n        process.env.FRONT_BASE_URL +\n          '/aouth/google?token=' +\n          data.token +\n          '&type=' +\n          data.type,\n      );\n      res.redirect(\n        process.env.FRONT_BASE_URL +\n          '/aouth/google?token=' +\n          data.token +\n          '&type=' +\n          data.type,\n      );\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @Post('/login')\n  async login(@Body() userDTO: LoginDto) {\n    const user = await this.userService.findByLogin(userDTO);\n    if (!user) throw new Error('topic not found');\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Post('/sign_up')\n  async sign_up(@Body() userDTO: RegisterDto) {\n    const user = await this.userService.checkCreateData(userDTO);\n    const token = await this.authService.signPayload(userDTO);\n    await this.email.sendEmail(\n      userDTO.email,\n      token,\n      'confirm',\n      userDTO.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sign_up/confirm')\n  async confirm(@Request() req) {\n    const user = await this.userService.createUser(req.user);\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Get('/checkEmail')\n  async checkEmail(@Query('email') email: string) {\n    const user = await this.userService.checkMAilExistAndFormat(email);\n    if (user)\n      throw new HttpException('this user is exists', HttpStatus.FORBIDDEN);\n  }\n  @Post('/forget-password')\n  async forgetPassword(@Body() body) {\n    const user = await this.userService.checkMAilExistAndFormat(body.email);\n    if (!user)\n      throw new HttpException('not user by this email', HttpStatus.FORBIDDEN);\n    const payload: Payload = {\n      _id: user._id,\n      email: user.email,\n    };\n    const token = await this.authService.signPayload(payload);\n    await this.email.sendEmail(\n      user.email,\n      token,\n      'forget Password',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/delete')\n  async deleteMe(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    await this.userService.deleteUser(req.user._id);\n    await this.email.sendEmail(\n      user.email,\n      null,\n      'Delete account',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    user.password = null;\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { UserModule } from 'src/user/user.module';\n@Module({\n  imports: [SharedModule, UserModule],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, GoogleStrategy],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                    Async\n                                signPayload\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signPayload(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject went to convert to token\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        token which created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n                    validateUser : check if this object which come from token is user or not .\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject which come from token .\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        user object\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { sign } from 'jsonwebtoken';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\n/**\n * @module Authorization\n */\n@Injectable()\nexport class AuthService {\n  constructor(private userService: UserService) { }\n  /**\n   * @author Nada Abdelmaboud \n   * @description google aouth handler\n   * @param {Object}\n   */\n  async googleLogin(req) {\n    if (!req.user) {\n      throw new NotFoundException('no such user on google');\n    }\n    let user = req.user;\n    let type;\n    let checkUser = await this.userService.checkMAilExistAndFormat(user.email);\n    let payload;\n    if (!checkUser) {\n      type = 'sign';\n      let newUser = await this.userService.createUser({\n        email: user.email,\n        birthday: null,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        password: '',\n        isGoogle: true,\n        profileImage: user.picture,\n      });\n      if (!newUser) {\n        throw new BadRequestException();\n      }\n      payload = {\n        _id: newUser._id,\n      };\n    } else {\n      type = 'login';\n      payload = {\n        _id: checkUser._id,\n      };\n    }\n    return {\n      token:\n        'Bearer ' +\n        sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' }),\n      type: type,\n    };\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description sign payload function : create token\n   * @param payload - object went to convert to token\n   * @returns token which created\n   */\n  async signPayload(payload) {\n    return (\n      'Bearer ' +\n      sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' })\n    );\n  }\n\n  /**\n   * validateUser : check if this object which come from token is user or not .\n   * @param payload - object which come from token .\n   * @returns user object\n   */\n  async validateUser(payload: Payload) {\n    const user = await this.userService.getUserById(payload._id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardModule.html":{"url":"modules/BoardModule.html","title":"module - BoardModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_imports\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nBoardModule\n\nBoardModule\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BoardController } from './board.controller';\nimport { BoardService } from './board.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [BoardController],\n  providers: [BoardService],\n  exports: [BoardService],\n})\nexport class BoardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessagesSent\n                            \n                            \n                                    Async\n                                seenDeliver\n                            \n                            \n                                    Async\n                                sentMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getChats/:userId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessagesSent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesSent(recieverIds: string, senderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getMessagesSent/:recieverIds/:senderId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recieverIds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenDeliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenDeliver(senderId: string, recieverId: string, time: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/seen')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sentMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sentMessage(senderId: string, recieverId: [string], message: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sentMessage')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                            [string]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Get,\n  NotFoundException,\n  UseGuards,\n  UseFilters,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ChatService } from './chat.service';\nimport { HttpExceptionFilter } from 'src/shared/http-exception.filter';\n\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class ChatController {\n  constructor(private ChatService: ChatService) {}\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getMessagesSent/:recieverIds/:senderId')\n  async getMessagesSent(\n    @Param('recieverIds') recieverIds: string,\n    @Param('senderId') senderId: string,\n  ) {\n    let ids = recieverIds.split(',');\n    let messages = await this.ChatService.getMessage(ids, senderId);\n    if (messages) return messages;\n    throw new NotFoundException('there is no messages');\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getChats/:userId')\n  async getChats(@Param('userId') userId) {\n    let messages = await this.ChatService.getChats(userId);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/seen')\n  async seenDeliver(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: string,\n    @Body('time') time: string,\n  ) {\n    let messages = await this.ChatService.seenMessage(\n      senderId,\n      recieverId,\n      time,\n    );\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sentMessage')\n  async sentMessage(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: [string],\n    @Body('message') message: string,\n    @Body('name') name: string,\n  ) {\n    let messages = await this.ChatService.sendMessage(\n      senderId,\n      recieverId,\n      message,\n    );\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatController } from './chat.controller';\nimport { ChatService } from './chat.service';\nimport { User } from '../models/user.schema';\nimport { Chat } from '../models/chat.schema';\nimport { SharedGateway } from '../shared/shared.gateway';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { Message } from 'src/models/message.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Chat', schema: Chat },\n      { name: 'Message', schema: Message },\n\n    ]),\n  ],\n  controllers: [ChatController],\n  providers: [ChatService],\n  exports: [ChatService],\n})\nexport class ChatModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessage\n                            \n                            \n                                    Async\n                                seen\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, chatModel: Model, messageModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(userId: String, messageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -message id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -message object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        -chat objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessage(userIds: String[], senderId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user ids\n\n                                    \n                                \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -message objects | 0\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seen(userId: String, messageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -message id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -message object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(senderId: String, recieverId: String, time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                                \n                                    recieverId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -reciever id \n\n                                    \n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -time\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(senderId: String, recieverIds: String[], text: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                                \n                                    recieverIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -reciever ids\n\n                                    \n                                \n                                \n                                    text\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -message id\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { user } from '../types/user';\nimport { chat } from '../types/chat';\nimport { ValidationService } from '../shared/validation.service';\nimport { message } from 'src/types/message';\n@Injectable()\nexport class ChatService {\n  constructor(\n    @InjectModel('User') private readonly userModel: Model,\n    @InjectModel('Chat') private readonly chatModel: Model,\n    @InjectModel('Message') private readonly messageModel: Model,\n\n    private ValidationService: ValidationService,\n  ) { }\n  /**\n* @author Dina Alaa \n* @descriptionget send message\n* @param {String} senderId -sender id \n* @param {Array} recieverIds -reciever ids\n* @param {String} text -name\n* @returns {String} -message id\n*/\n  async sendMessage(senderId: String, recieverIds: String[], text: String): Promise {\n    if (!this.ValidationService.checkMongooseID([senderId, recieverIds[0]]))\n      throw new Error('not mongoose id');\n    let mess = { userId: senderId, message: text, date: new Date() };\n    let ids = recieverIds.concat(senderId);\n    let chat = await this.chatModel.findOneAndUpdate(\n      { usersIds: { $all: ids, $size: ids.length } },\n      { $set: { lastMessage: mess } },\n    );\n    if (!chat) {\n      chat = new this.chatModel({\n        usersIds: ids,\n        lastMessage: mess,\n        date: new Date(),\n      });\n      await chat.save();\n    }\n    let message = new this.messageModel({\n      chatId: chat._id,\n      senderId: senderId,\n      message: text,\n      date: mess.date,\n    });\n    await message.save();\n    return message._id;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get messages\n* @param {String} senderId -sender id \n* @param {Array} userIds -user ids\n* @returns {Array|0} -message objects | 0\n*/\n  async getMessage(userIds: String[], senderId: String): Promise | 0> {\n    if (!this.ValidationService.checkMongooseID(userIds))\n      throw new Error('not mongoose id');\n    let ids = userIds.concat(senderId);\n    let chat = await this.chatModel.findOne({ usersIds: { $all: ids, $size: ids.length } }, '_id');\n    if (!chat) return 0;\n    return await this.messageModel.find(\n      { chatId: chat._id },\n      'message date seenStatus deliverStatus senderId',\n      { sort: { date: -1 } },\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get chats\n* @param {String} userId -user id \n* @returns {Array} -chat objects\n*/\n  async getChats(userId: String): Promise> {\n    if (!this.ValidationService.checkMongooseID([userId]))\n      throw new Error('not mongoose id');\n    let chat = await this.chatModel.find(\n      { usersIds: userId },\n      'usersIds lastMessage',\n      { sort: { 'lastMessage.date': -1 } },\n    );\n    let arr = [];\n    let result = [];\n    chat.map(conv => {\n      console.log(conv)\n      conv.usersIds.map(user => {\n        if (String(user) != String(userId)) arr.push(user);\n      });\n    });\n    for (let i = 0; i \n* @descriptionget deliver message\n* @param {String} userId -user id \n* @param {String} messageId -message id\n* @returns {Object} -message object\n*/\n  async deliver(userId: String, messageId: string): Promise {\n    if (!this.ValidationService.checkMongooseID([userId, messageId]))\n      throw new Error('not mongoose id');\n    return await this.messageModel.findOneAndUpdate(\n      {\n        _id: messageId,\n        senderId: { $ne: userId },\n        deliverStatus: { $not: { $elemMatch: { userId: userId } } },\n      },\n      {\n        $push: {\n          deliverStatus: { userId: userId, time: new Date() },\n        },\n      },\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget seen message\n* @param {String} userId -user id \n* @param {String} messageId -message id\n* @returns {Object} -message object\n*/\n  async seen(userId: String, messageId: string): Promise {\n    if (!this.ValidationService.checkMongooseID([userId, messageId]))\n      throw new Error('not mongoose id');\n\n    return await this.messageModel.findOneAndUpdate(\n      {\n        _id: messageId,\n        senderId: { $ne: userId },\n        seenStatus: { $not: { $elemMatch: { userId: userId } } }\n      },\n      {\n        $push: {\n          seenStatus: { userId: userId, time: new Date() }\n        }\n      });\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget seen messages before timeStamp\n* @param {String} senderId -sender id \n* @param {String} recieverId -reciever id \n* @param {String} time -time\n* @returns {Boolean} \n*/\n  async seenMessage(\n    senderId: String,\n    recieverId: String,\n    time: string\n  ): Promise {\n    if (!this.ValidationService.checkMongooseID([senderId, recieverId]))\n      throw new Error('not mongoose id');\n    let chat = await this.chatModel.findOne(\n      { usersIds: { $all: [senderId, recieverId], $size: 2 } },\n      '_id',\n    );\n    await this.messageModel.updateMany(\n      {\n        chatId: chat._id,\n        date: { $lt: new Date(time) },\n        senderId: { $ne: recieverId },\n        seenStatus: { $not: { $elemMatch: { userId: recieverId } } },\n      },\n      {\n        $push: {\n          seenStatus: { userId: recieverId, time: new Date() },\n        },\n      },\n    );\n    return true;\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePinDto.html":{"url":"classes/CreatePinDto.html","title":"class - CreatePinDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePinDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pins/dto/create-pin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                board\n                            \n                            \n                                    Readonly\n                                imageHeight\n                            \n                            \n                                    Readonly\n                                imageId\n                            \n                            \n                                    Readonly\n                                imageWidth\n                            \n                            \n                                    Readonly\n                                link\n                            \n                            \n                                    Readonly\n                                note\n                            \n                            \n                                    Readonly\n                                section\n                            \n                            \n                                    Readonly\n                                title\n                            \n                            \n                                    Readonly\n                                topicName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            board\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            link\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topicName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePinDto {\n  readonly imageId: String;\n  readonly imageWidth: Number;\n  readonly imageHeight: Number;\n  readonly note: String;\n  readonly title: String;\n  readonly board: String;\n  readonly section: String;\n  readonly link: String;\n  readonly topicName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditBoardDto.html":{"url":"classes/EditBoardDto.html","title":"class - EditBoardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditBoardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-board.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                collaboratores\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                endDate\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                startDate\n                            \n                            \n                                    Readonly\n                                topic\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratores\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            endDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditBoardDto {\n  readonly name: string;\n  readonly description: string;\n  readonly topic: string;\n  readonly startDate: string;\n  readonly endDate: string;\n  readonly collaboratores: string;\n  readonly personalization: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditCollaboratoresPermissionsDto.html":{"url":"classes/EditCollaboratoresPermissionsDto.html","title":"class - EditCollaboratoresPermissionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditCollaboratoresPermissionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-collaboratores-permissions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                addCollaborators\n                            \n                            \n                                    Readonly\n                                collaboratorId\n                            \n                            \n                                    Readonly\n                                createPin\n                            \n                            \n                                    Readonly\n                                editDescription\n                            \n                            \n                                    Readonly\n                                editTitle\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                savePin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            addCollaborators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createPin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editDescription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            savePin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditCollaboratoresPermissionsDto {\n  readonly collaboratorId: string;\n  readonly savePin: Boolean;\n  readonly createPin: Boolean;\n  readonly addCollaborators: Boolean;\n  readonly editTitle: Boolean;\n  readonly personalization: Boolean;\n  readonly editDescription: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Email.html":{"url":"injectables/Email.html","title":"injectable - Email","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/send-email.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/send-email.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(email, message, type, userName)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/send-email.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail should send to\n\n\n                                    \n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nmessage which should send\n\n\n                                    \n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nwhy send this email confirm ,change email ,....\n\n\n                                    \n                                \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe name of email owner\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\n/**\n * @module Email\n */\n@Injectable()\nexport class Email {\n  constructor() {}\n\n  /**\n   * @author Aya Abohadima\n   * @descriptionsend email to user email\n   * @param {String} email - email should send to\n   * @param {String} message - message which should send\n   * @param {String} type - why send this email confirm ,change email ,....\n   * @param {String} userName  - the name of email owner\n   */\n  async sendEmail(email, message, type, userName) {\n    var transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: String(process.env.EMAIL),\n        pass: String(process.env.EMAIL_PASSWORD),\n      },\n      tls: {\n        rejectUnauthorized: false,\n      },\n    });\n    var mailOptions;\n    if (type === 'confirm') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Confirm Email',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   You Should Confirm Your Email to Complete SignUp   Confirm',\n      };\n    } else if (type === 'change email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Email Update',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   The Email Address On Your Phantom Account Has Been Changed. To Confirm Changing Your Email Please Follow This Link   Confirm',\n      };\n    } else if (type === 'set email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Email Reset',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;  Follow This Link To Confirm Your New Email On PhantomConfirm',\n      };\n    } else if (type === 'forget Password') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Reset Password ',\n        html:\n          '   Hi,' +\n          userName +\n          ', &#x1F60A;  Follow This Link To Reset Your Password   Reset Password',\n      };\n    } else if (type === 'Delete account') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F614; Delete Account ',\n        html:\n          '  Hi,' +\n          userName +\n          '    Phantom Will Miss You   Follow This Link To Get Back To Phantom   Phantom',\n      };\n    } else if (type === 'report') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Pin Is Reported',\n        html:\n          ' ' +\n          message.userName +\n          ' (userEmail: ' +\n          message.email +\n          ' ) (userId: ' +\n          message.userId +\n          ' ) has reported a pin for ' +\n          message.reason +\n          '   Pin Page',\n      };\n    } else {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Phantom has a message for you',\n        text: message,\n      };\n    }\n    transporter.sendMail(mailOptions);\n    return 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/google.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\n\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n      callbackURL: `${process.env.BASE_URL}/api/google/redirect`,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { name, emails, photos } = profile;\n    console.log(profile);\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n\n      accessToken,\n    };\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HelpersUtils.html":{"url":"classes/HelpersUtils.html","title":"class - HelpersUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HelpersUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utilities/helpers.utils.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTolimitedArray\n                            \n                            \n                                    Async\n                                checkDublicates\n                            \n                            \n                                    Async\n                                dateSince\n                            \n                            \n                                    Async\n                                shuffle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTolimitedArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTolimitedArray(arr: Array, limit: number, pushedData: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/helpers.utils.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -array of data\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe limit should be\n\n\n                                    \n                                \n                                \n                                    pushedData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data should add to array\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        after delete\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkDublicates\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkDublicates(arr)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/helpers.utils.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            dateSince\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dateSince(date)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/helpers.utils.ts:34\n                \n            \n\n\n            \n                \n                    Acknowledgment : This Function Is Inspired By 'https://stackoverflow.com/questions/3177836/how-to-format-time-since-xxx-e-g-4-minutes-ago-similar-to-stack-exchange-site/23259289#23259289'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    date\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            shuffle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    shuffle(arr)\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/helpers.utils.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class HelpersUtils {\n  /**\n   * @author Nada AbdElmaboud \n   * @description shuffle an array\n   * @param {Array} a - the Array being shuffled\n   * @returns  {Promise}\n   */\n  async shuffle(arr) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n  /**\n   * @author Nada AbdElmaboud \n   * @description check if there dublicates in an array\n   * @param {Array} values - the Array being checked\n   * @returns  {Promise}\n   */\n  async checkDublicates(arr) {\n    for (let i = 0; i = 1) {\n      intervalType = 'yr';\n    } else {\n      interval = Math.floor(seconds / 2592000);\n      if (interval >= 1) {\n        intervalType = 'mon';\n      } else {\n        interval = Math.floor(seconds / 86400);\n        if (interval >= 1) {\n          intervalType = 'day';\n        } else {\n          interval = Math.floor(seconds / 3600);\n          if (interval >= 1) {\n            intervalType = 'h';\n          } else {\n            interval = Math.floor(seconds / 60);\n            if (interval >= 1) {\n              intervalType = 'min';\n            } else {\n              interval = seconds;\n              intervalType = 'sec';\n            }\n          }\n        }\n      }\n    }\n\n    if (interval > 1 || interval === 0) {\n      intervalType += 's';\n    }\n\n    return `${interval} ${intervalType}`;\n  }\n  /**\n   * @author Aya Abohadima \n   * @descriptionthis function add to array but this array has limit\n   * @param {Array} arr -array of data\n   * @param {Number} limit  - the limit should be\n   * @param {Object} pushedData Data should add to array\n   * @returns {Array} after delete\n   */\n  async addTolimitedArray(arr: Array, limit: number, pushedData: {}) {\n    if (arr.length >= limit) {\n      arr.splice(0, 1);\n    }\n    arr.push(pushedData);\n    return arr;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/http-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus\n      ? exception.getStatus()\n      : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message:\n        status !== HttpStatus.INTERNAL_SERVER_ERROR\n          ? exception.message || null\n          : 'Internal server error',\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getImage\n                            \n                            \n                                    Async\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImage(id: string, response, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/image/:id')\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadImage(files, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/me/uploadImage')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Post,\n  Get,\n  Param,\n  Res,\n  Controller,\n  UseInterceptors,\n  Request,\n  UploadedFiles,\n  UseFilters,\n} from '@nestjs/common';\nimport { ApiConsumes } from '@nestjs/swagger';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { ImagesService } from './images.service';\nimport { HttpExceptionFilter } from 'src/shared/http-exception.filter';\nconst path = require('path');\n\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class ImagesController {\n  constructor(private ImagesService: ImagesService) {}\n\n  @Post('/me/uploadImage')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(FilesInterceptor('file'))\n  async uploadImage(@UploadedFiles() files, @Request() req) {\n    return await this.ImagesService.uploadFile(\n      files[0].originalname,\n      files[0].mimetype,\n      files[0].buffer,\n    );\n  }\n\n  @Get('/image/:id')\n  async getImage(@Param('id') id: string, @Res() response, @Request() req) {\n    if (!id || id == ' ' || id == '' || id == 'none' || id == 'null') {\n      var filePath = './src/static/default.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return response.sendFile(resolvedPath);\n    }\n    await this.ImagesService.drive.files.get(\n      { fileId: id, alt: 'media' },\n      { responseType: 'stream' },\n      function(err, res) {\n        if (err) {\n          console.log(err);\n          var filePath = './src/static/default.jpg';\n          var resolvedPath = path.resolve(filePath);\n          return response.sendFile(resolvedPath);\n        }\n        res.data\n          .on('end', () => {})\n          .on('error', err => {\n            var filePath = './src/static/default.jpg';\n            var resolvedPath = path.resolve(filePath);\n            return response.sendFile(resolvedPath);\n          })\n          .pipe(response);\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_imports\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/images/images.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesController } from './images.controller';\nimport { ImagesService } from './images.service';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@Module({\n  imports: [SharedModule],\n  controllers: [ImagesController],\n  providers: [ImagesService],\n  exports: [ImagesService],\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                drive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/images/images.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(id)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(fileName, mimeType, stream)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mimeType\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stream\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            drive\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/images/images.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Readable } from 'stream';\nconst { google } = require('googleapis');\nconst fs = require('fs');\nconst gracefulFs = require('graceful-fs');\ngracefulFs.gracefulify(fs);\n\n@Injectable()\nexport class ImagesService {\n  public drive;\n  constructor() {\n    const scopes = ['https://www.googleapis.com/auth/drive'];\n    const auth = new google.auth.JWT(\n      String(process.env.DRIVE_CLIENT_EMAIL),\n      null,\n      String(process.env.DRIVE_PRIVATE_KEY.replace(/\\\\n/g, '\\n')),\n      scopes,\n    );\n    this.drive = google.drive({ version: 'v3', auth });\n  }\n\n  async deleteFile(id) {\n    this.drive.files\n      .delete({\n        fileId: id,\n      })\n      .then(\n        async function(response) {\n          return { status: 'success' };\n        },\n        function(err) {\n          throw new NotFoundException();\n        },\n      );\n  }\n\n  async uploadFile(fileName, mimeType, stream) {\n    const readable = new Readable();\n    readable._read = () => {};\n    readable.push(stream);\n    readable.push(null);\n    var fileMetadata = {\n      name: fileName,\n    };\n    var media = {\n      mimeType: mimeType,\n      body: readable,\n    };\n    let res = await this.drive.files.create({\n      resource: fileMetadata,\n      media: media,\n      fields: 'id',\n    });\n    if (res) {\n      return [{ id: res.data.id }];\n    } else {\n      throw new BadRequestException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, done: VerifiedCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the object created from token\n\n                                    \n                                \n                                \n                                    done\n                                    \n                                            VerifiedCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        return token object \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, VerifiedCallback } from 'passport-jwt';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n  constructor(private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET_KEY,\n    });\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description validate function to check correct object com from token\n   * @param payload the object created from token\n   * @param done \n   * return token object \n   */\n  async validate(payload: any, done: VerifiedCallback) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/logging.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const now = Date.now();\n    const req = context.switchToHttp().getRequest();\n\n    const method = req.method;\n    const url = req.url;\n\n    return next\n      .handle()\n      .pipe(\n        tap(() =>\n          Logger.log(\n            `${method} ${url} ${Date.now() - now}ms`,\n            context.getClass().name,\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginDto.html":{"url":"interfaces/LoginDto.html","title":"interface - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        expiresIn\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        newEmail\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newEmail\n                                    \n                                \n                                \n                                    \n                                        newEmail:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Payload {\n  _id: string;\n  email?: String;\n  newEmail?: String;\n  firstName?: String;\n  iat?: number;\n  expiresIn?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PinsModule.html":{"url":"modules/PinsModule.html","title":"module - PinsModule","body":"\n                   \n\n\n\n\n    Modules\n    PinsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_imports\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pins/pins.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PinsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PinsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BoardModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PinsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PinsController } from './pins.controller';\nimport { PinsService } from './pins.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Pin } from '../models/pin.schema';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Board } from '../models/board.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { NotificationService } from '../shared/notification.service';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    BoardModule,\n    ImagesModule,\n    MongooseModule.forFeature([\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [PinsController],\n  providers: [PinsService],\n  exports: [PinsService],\n})\nexport class PinsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecommendationController.html":{"url":"controllers/RecommendationController.html","title":"controller - RecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recommendation/recommendation.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBoardMoreLike\n                            \n                            \n                                    Async\n                                generateHomeFeed\n                            \n                            \n                                    Async\n                                generatePinMore\n                            \n                            \n                                    Async\n                                generateSectionMoreLike\n                            \n                            \n                                    Async\n                                getBoardMore\n                            \n                            \n                                    Async\n                                getBoardsForYou\n                            \n                            \n                                    Async\n                                getFollowRecommendation\n                            \n                            \n                                    Async\n                                getHomeFeed\n                            \n                            \n                                    Async\n                                getPinMore\n                            \n                            \n                                    Async\n                                getPinsForYou\n                            \n                            \n                                    Async\n                                getPinsRecentActivity\n                            \n                            \n                                    Async\n                                getPopularPins\n                            \n                            \n                                    Async\n                                getSectionMore\n                            \n                            \n                                    Async\n                                getTopicRecommendation\n                            \n                            \n                                    Async\n                                getTrendingRecommendation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateBoardMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBoardMoreLike(req, boardId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateHomeFeed(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/home/me')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generatePinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePinMore(req, pinId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSectionMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSectionMoreLike(req, boardId: string, sectionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardMore(req, boardId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardsForYou(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boardsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/follow')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHomeFeed(req, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/home')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinMore(req, pinId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsForYou(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsRecentActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsRecentActivity(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsRecentActivity')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPopularPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPopularPins(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/popularPins')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSectionMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionMore(req, boardId: string, sectionId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicRecommendation(req, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/topics/:topicName')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTrendingRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrendingRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/trending')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseFilters,\n  Param,\n  Get,\n  NotFoundException,\n  Request,\n  UseGuards,\n  Query,\n  Put,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\nimport { RecommendationService } from './recommendation.service';\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class RecommendationController {\n  constructor(private RecommendationService: RecommendationService) {}\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/home/me')\n  async generateHomeFeed(@Request() req) {\n    req.setTimeout(0);\n    let userId = req.user._id;\n    let home = await this.RecommendationService.homeFeed(userId);\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/home')\n  async getHomeFeed(\n    @Request() req,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    let home = await this.RecommendationService.getHomeFeed(\n      userId,\n      limit,\n      offset,\n    );\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/pins/:pinId')\n  async generatePinMore(@Request() req, @Param('pinId') pinId: string) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinMoreLike(userId, pinId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/pins/:pinId')\n  async getPinMore(\n    @Request() req,\n    @Param('pinId') pinId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getPinMoreLike(\n      pinId,\n      limit,\n      offset,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/boards/:boardId')\n  async generateBoardMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.boardMoreLike(userId, boardId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/sections/:boardId/:sectionId')\n  async generateSectionMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.sectionMoreLike(\n      userId,\n      boardId,\n      sectionId,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/boards/:boardId')\n  async getBoardMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getBoardMoreLike(\n      boardId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/sections/:boardId/:sectionId')\n  async getSectionMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getSectionMoreLike(\n      boardId,\n      sectionId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/follow')\n  async getFollowRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.followAllRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/topics/:topicName')\n  async getTopicRecommendation(\n    @Request() req,\n    @Param('topicName') topicName: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.topicRecommendation(\n      topicName,\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/trending')\n  async getTrendingRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.trendingRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boardsForYou')\n  async getBoardsForYou(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let boards = await this.RecommendationService.boardsForYou(userId);\n    if (boards) {\n      return boards;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/popularPins')\n  async getPopularPins(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.popularPins(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsForYou')\n  async getPinsForYou(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsForYou(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsRecentActivity')\n  async getPinsRecentActivity(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsInspired(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecommendationModule.html":{"url":"modules/RecommendationModule.html","title":"module - RecommendationModule","body":"\n                   \n\n\n\n\n    Modules\n    RecommendationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_imports\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recommendation/recommendation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecommendationController } from './recommendation.controller';\nimport { RecommendationService } from './recommendation.service';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User } from '../models/user.schema';\nimport { BoardModule } from '../board/board.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { NotificationService } from '../shared/notification.service';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [RecommendationController],\n  providers: [RecommendationService],\n  exports: [RecommendationService],\n})\nexport class RecommendationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterDto.html":{"url":"interfaces/RegisterDto.html","title":"interface - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                        birthday\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        isGoogle\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthday\n                                    \n                                \n                                \n                                    \n                                        birthday:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isGoogle\n                                    \n                                \n                                \n                                    \n                                        isGoogle:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterDto {\n  email: string;\n  password: string;\n  birthday: string;\n  firstName: string;\n  lastName: string;\n  country?: string;\n  profileImage?: string;\n  gender?: string;\n  isGoogle?: Boolean;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SearchController.html":{"url":"controllers/SearchController.html","title":"controller - SearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                search\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/allPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(req, recentSearch: Boolean, name: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/board')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(req, name)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getKeys')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/myPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/people')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/recentSearch')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n  UseFilters,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { SearchService } from './search.service';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\n@UseFilters(HttpExceptionFilter)\n@Controller('search')\nexport class SearchController {\n  constructor(private SearchService: SearchService) {}\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/allPins')\n  async getAllPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch) await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getAllPins(name, limit, offset);\n    if (pins) return pins;\n    return new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/myPins')\n  async getMyPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch) await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getMyPins(name, userId, limit, offset);\n    if (pins) return pins;\n    return new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/people')\n  async getPeople(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch) await this.SearchService.addToRecentSearch(userId, name);\n    let users = await this.SearchService.getPeople(name, limit, offset);\n    if (users) return users;\n    return new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/board')\n  async getBoards(\n    @Request() req,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('name') name: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch) await this.SearchService.addToRecentSearch(userId, name);\n    let boards = await this.SearchService.getBoards(name, limit, offset);\n    if (boards) return boards;\n    return new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/recentSearch')\n  async getRecentSearch(@Request() req) {\n    let userId = req.user._id;\n    let recentSearch = await this.SearchService.getRecentSearch(userId);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getKeys')\n  async getKeys(@Request() req, @Query('name') name) {\n    let recentSearch = await this.SearchService.getKeys(name);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_imports\n\n\n\ncluster_SearchModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SearchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SearchController } from './search.controller';\nimport { SearchService } from './search.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { Board } from '../models/board.schema';\nimport { User } from '../models/user.schema';\nimport { UserModule } from '../user/user.module';\nimport * as search from 'fuzzy-search';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [SearchController],\n  providers: [SearchService],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToRecentSearch\n                            \n                            \n                                    Async\n                                Fuzzy\n                            \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardModel: Model, pinModel: Model, userModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/search/search.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addToRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addToRecentSearch(userId, name)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id\n\n                                    \n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -user object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Fuzzy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Fuzzy(model, params: Array, name: string, limit: number, offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -model\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -params\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -result: model objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result:pin objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result: board objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(name, userId, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result: pin objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result: user objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { board } from '../types/board';\nimport { user } from '../types/user';\nimport { ValidationService } from '../shared/validation.service';\nimport { pin } from '../types/pin';\nimport * as search from 'fuzzy-search';\n@Injectable()\nexport class SearchService {\n  constructor(\n    @InjectModel('Board') private readonly boardModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n    private ValidationService: ValidationService,\n  ) { }\n  /**\n* @author Dina Alaa \n* @descriptionget fuzzy search\n* @param {Array} model -model\n* @param {String} name -name\n* @param {Array} params -params\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: model objects, length\n*/\n  async Fuzzy(\n    model, params: Array,\n    name: string,\n    limit: number,\n    offset: number) {\n    const searcher = new search(model, params, {\n      caseSensitive: false,\n      sort: true,\n    });\n    let result = searcher.search(name);\n    if (result.length == 0) {\n      throw new NotFoundException()\n    }\n    return {\n      result: this.ValidationService.limitOffset(\n        limit,\n        offset,\n        result,\n      ), length: result.length\n    };\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get all pins\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result:pin objects, length\n*/\n  async getAllPins(name, limit, offset): Promise {\n    let pinFullMatch = await this.pinModel.find({ $text: { $search: name, $caseSensitive: false } }, 'imageId');\n    if (pinFullMatch.length > 0)\n      return {\n        result: this.ValidationService.limitOffset(limit, offset, pinFullMatch),\n        length: pinFullMatch.length\n      }\n    let pin = await this.pinModel.find({}, 'title note imageId').lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get my pins\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: pin objects, length\n*/\n  async getMyPins(name, userId, limit, offset): Promise {\n    if (!(await this.ValidationService.checkMongooseID([userId])))\n      throw new Error('not mongoose id');\n    let pin = await this.pinModel\n      .find({ 'creator.id': Types.ObjectId(userId) }, 'title note imageId')\n      .lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget add to recent search\n* @param {String} userId -user id\n* @param {String} name -name\n* @returns {Object} -user object\n*/\n  async addToRecentSearch(userId, name) {\n    let user = await this.userModel.findByIdAndUpdate(userId, {\n      $pull: { recentSearch: name },\n    });\n    if (user.recentSearch.length > 4) {\n      user.recentSearch = user.recentSearch.slice(0, 4);\n      await user.save();\n    }\n    return await this.userModel\n      .findByIdAndUpdate(userId, { $push: { recentSearch: name } })\n      .lean();\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get people\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} result: user objects, length\n*/\n  async getPeople(name, limit, offset): Promise {\n    let user = await this.userModel.aggregate([\n      { $match: {} },\n      {\n        $project: {\n          boards: { $size: '$boards' },\n          followers: { $size: '$followers' },\n          profileImage: 1,\n          userName: 1,\n          lastName: 1,\n          firstName: 1,\n          google: 1,\n          googleImage: 1,\n        },\n      },\n    ]);\n    return await this.Fuzzy(\n      user,\n      ['userName'],\n      name,\n      limit,\n      offset,\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get keys\n* @param {String} name -name\n* @returns {Array}\n*/\n  async getKeys(name: string) {\n    let keysPin = await this.pinModel.find({ $text: { $search: name, $caseSensitive: false } })\n      .limit(5);\n    return keysPin.map(pin => {\n      return { name: pin.title };\n    });\n\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get recent search\n* @param {String} userId -user id\n* @returns {Array}  \n*/\n  async getRecentSearch(userId): Promise> {\n    let user = await this.userModel.findById(userId, 'recentSearch');\n    if (!user.recentSearch) {\n      user.recentSearch = [];\n      await user.save();\n    }\n    return user.recentSearch;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get all boards\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: board objects, length\n*/\n  async getBoards(name, limit, offset): Promise {\n    let boardFullMatch = await this.boardModel.aggregate([\n      { $match: { $text: { $search: name } } },\n      {\n        $project: {\n          pins: 1,\n          sections: { $size: '$sections' },\n          coverImages: 1,\n          topic: 1,\n          description: 1,\n          name: 1,\n          creator: 1,\n        },\n      },\n    ]);\n    if (boardFullMatch.length > 0)\n      return {\n        result: this.ValidationService.limitOffset(limit, offset, boardFullMatch),\n        length: boardFullMatch\n      }\n    let board = await this.boardModel.aggregate([\n      { $match: {} },\n      {\n        $project: {\n          pins: 1,\n          sections: { $size: '$sections' },\n          coverImages: 1,\n          topic: 1,\n          description: 1,\n          name: 1,\n          creator: 1,\n        },\n      },\n    ]);\n\n    let res = await this.Fuzzy(\n      board,\n      ['name', 'description', 'topic'],\n      name,\n      limit,\n      offset,\n    );\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharedGateway.html":{"url":"classes/SharedGateway.html","title":"class - SharedGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharedGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/shared.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearUserId\n                            \n                            \n                                    Async\n                                comment\n                            \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                likeComment\n                            \n                            \n                                    Async\n                                likeReply\n                            \n                            \n                                    Async\n                                message\n                            \n                            \n                                    Async\n                                reactPin\n                            \n                            \n                                    Async\n                                reply\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                setUserId\n                            \n                            \n                                    Async\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ChatService: ChatService, pinModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/shared/shared.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ChatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/shared.gateway.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('clearUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('comment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('delivered')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeComment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeComment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeReply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeReply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            message\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    message(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reactPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reactPin(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reactPin')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('seen')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('setUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            type\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    type(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { pin } from '../types/pin';\nimport { user } from '../types/user';\nimport { ChatService } from 'src/chat/chat.service';\nconst jwt = require('jsonwebtoken');\n@WebSocketGateway()\nexport class SharedGateway {\n  @WebSocketServer() server;\n  constructor(\n    private ChatService: ChatService,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n  ) {}\n  async handleConnection(client: Socket) {}\n\n  @SubscribeMessage('setUserId')\n  async setUserId(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, { socketId: 1 });\n    if (user) {\n      user.socketId = socket.id;\n      await user.save();\n    }\n  }\n\n  @SubscribeMessage('comment')\n  async comment(socket: Socket, data: any) {\n    this.server.emit('sendComment', data);\n  }\n  @SubscribeMessage('typing')\n  async type(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    if (sender && reciever) {\n      this.server.to(reciever.socketId).emit('isTyping', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n      });\n    }\n  }\n  @SubscribeMessage('delivered')\n  async deliver(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    console.log('deliver event');\n    if (sender && reciever) {\n      this.server.to(sender.socketId).emit('setDelivered', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      await this.ChatService.deliver(recieverId, messageId);\n    }\n  }\n  @SubscribeMessage('seen')\n  async seenMessage(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    if (sender && reciever) {\n      this.server.to(sender.socketId).emit('setSeen', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      if (data.messageId) await this.ChatService.seen(recieverId, messageId);\n    }\n  }\n  @SubscribeMessage('message')\n  async message(socket: Socket, data: any) {\n    let messageText = data.message;\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = await this.ChatService.sendMessage(\n      senderId,\n      [recieverId],\n      messageText,\n    );\n    if (sender && reciever && messageText) {\n      this.server.to(reciever.socketId).emit('sendMessage', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        message: messageText,\n        senderId: data.senderId,\n        date: Date.now(),\n        messageId: messageId,\n      });\n    }\n  }\n\n  @SubscribeMessage('reply')\n  async reply(socket: Socket, data: any) {\n    this.server.emit('sendReply', data);\n  }\n\n  @SubscribeMessage('reactPin')\n  async reactPin(socket: Socket, data: any) {\n    const token = data.token;\n    8;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { counts: 1 });\n    this.server.emit('sendPinReact', {\n      reactType: data.reactType,\n      userName: user.firstName + ' ' + user.lastName,\n      userImage: user.profileImage,\n      pinId: data.pinId,\n      wowReacts:\n        data.reactType == 'Wow'\n          ? pin.counts.wowReacts.valueOf() + 1\n          : pin.counts.wowReacts,\n      loveReacts:\n        data.reactType == 'Love'\n          ? pin.counts.loveReacts.valueOf() + 1\n          : pin.counts.loveReacts,\n      goodIdeaReacts:\n        data.reactType == 'Good idea'\n          ? pin.counts.goodIdeaReacts.valueOf() + 1\n          : pin.counts.goodIdeaReacts,\n      hahaReacts:\n        data.reactType == 'Haha'\n          ? pin.counts.hahaReacts.valueOf() + 1\n          : pin.counts.hahaReacts,\n      thanksReacts:\n        data.reactType == 'Thanks'\n          ? pin.counts.thanksReacts.valueOf() + 1\n          : pin.counts.thanksReacts,\n    });\n  }\n\n  @SubscribeMessage('likeComment')\n  async likeComment(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { comments: 1 });\n    for (var i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nEmail \n\nEmail \n\n\n\nNotificationService \n\nNotificationService \n\n\n\nValidationService \n\nValidationService \n\n\n\nSharedModule\n\nSharedModule\n\nEmail  -->\n\nSharedModule->Email \n\n\n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\n\n\nChatService\n\nChatService\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { User } from '../models/user.schema';\nimport { HttpExceptionFilter } from './http-exception.filter';\nimport { LoggingInterceptor } from './logging.interceptor';\nimport { ValidationService } from './validation.service';\nimport { SharedGateway } from './shared.gateway';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Email } from './send-email.service';\nimport { NotificationService } from './notification.service';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Message } from 'src/models/message.schema';\nimport { Chat } from 'src/models/chat.schema';\nimport { ChatService } from 'src/chat/chat.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  providers: [\n    SharedGateway,\n    ChatService,\n    ValidationService,\n    Email,\n    NotificationService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n  exports: [NotificationService, ValidationService, Email],\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicController.html":{"url":"controllers/TopicController.html","title":"controller - TopicController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImageToTopic\n                            \n                            \n                                    Async\n                                addPinToAtopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                createTopics\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfAtopic\n                            \n                            \n                                    Async\n                                getTopic\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImageToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImageToTopic(topics: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToAtopic(pinId: string, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/topic/addPin')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId: string, imageHeight: number, imageWidth: number, name: string, description: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/createTopic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopics(topics: Array, images: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createTopics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following-topics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfAtopic(req, topicId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId/pins')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopic(req, topicId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Put,\n  Delete,\n  ForbiddenException,\n  BadRequestException,\n  Param,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n  UseFilters,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { TopicService } from './topic.service';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class TopicController {\n  constructor(private TopicService: TopicService) {}\n  //get all the topics\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic')\n  async getTopics(@Request() req) {\n    let userId = req.user._id;\n    let topics = await this.TopicService.getTopics(userId);\n    if (topics) return topics;\n    return new NotFoundException();\n  }\n  //get a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId')\n  async getTopic(@Request() req, @Param('topicId') topicId: string) {\n    let topic = await this.TopicService.getTopicById(topicId);\n    if (topic) return topic;\n    return new NotFoundException();\n  }\n  //get all pins of a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId/pins')\n  async getPinsOfAtopic(\n    @Request() req,\n    @Param('topicId') topicId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.TopicService.getPinsOfTopic(topicId, limit, offset);\n    if (pins && pins.length != 0) return pins;\n    return new NotFoundException();\n  }\n  //add pin to a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/topic/addPin')\n  async addPinToAtopic(\n    @Body('pinId') pinId: string,\n    @Body('topicName') topicName: string,\n  ) {\n    let topics = await this.TopicService.addPinToTopic(topicName, pinId);\n    if (topics) return { message: 'pin has been added successfully!' };\n    return new ForbiddenException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/createTopic')\n  async createTopic(\n    @Body('imageId') imageId: string,\n    @Body('imageHeight') imageHeight: number,\n    @Body('imageWidth') imageWidth: number,\n    @Body('name') name: string,\n    @Body('description') description: string,\n  ) {\n    let topic = await this.TopicService.createTopic(\n      imageId,\n      description,\n      imageWidth,\n      imageHeight,\n      name,\n    );\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @Post('/createTopics')\n  async createTopics(\n    @Body('topics') topics: Array,\n    @Body('topics') images: Array,\n  ) {\n    let topic = await this.TopicService.topicsSeeds(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n  @Put('/edit')\n  async addImageToTopic(@Body('topics') topics: Array) {\n    let topic = await this.TopicService.editTopic(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-topic/:topicId')\n  async followTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.followTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not follow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-topic/:topicId')\n  async unfollowTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.unfollowTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not unfollow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-topic/:topicId')\n  async checkFollowTopic(@Param() params, @Request() req) {\n    if (\n      !(await this.TopicService.checkFollowTopic(req.user._id, params.topicId))\n    )\n      return { follow: 'false' };\n    return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following-topics')\n  async followingTopics(@Request() req) {\n    return await this.TopicService.followingTopics(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicModule.html":{"url":"modules/TopicModule.html","title":"module - TopicModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_imports\n\n\n\ncluster_TopicModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/topic/topic.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TopicService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TopicController } from './topic.controller';\nimport { TopicService } from './topic.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Topic } from '../models/topic.schema';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { User } from '../models/user.schema';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [\n    SharedModule,\n    UserModule,\n    MongooseModule.forFeature([\n      { name: 'Topic', schema: Topic },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [TopicController],\n  providers: [TopicService],\n})\nexport class TopicModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicService.html":{"url":"injectables/TopicService.html","title":"injectable - TopicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TopicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPinToTopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                editTopic\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfTopic\n                            \n                            \n                                    Async\n                                getTopicById\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                topicsSeeds\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicModel: Model, pinModel: Model, userModel: Model, UserService: UserService, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/topic/topic.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToTopic(topicName, pinId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -pin id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId: string, description: string, imageWidth: number, imageHeight: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image id  \n\n                                    \n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -description \n\n                                    \n                                \n                                \n                                    imageWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image width\n\n                                    \n                                \n                                \n                                    imageHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image height\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editTopic(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -following topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfTopic(topicId: string, limit: number, offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id  \n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -pin objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicById(topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        -topic objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            topicsSeeds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    topicsSeeds(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:251\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { topic } from '../types/topic';\nimport { ValidationService } from '../shared/validation.service';\nimport { UserService } from '../user/user.service';\nimport { pin } from '../types/pin';\n\n@Injectable()\nexport class TopicService {\n  constructor(\n    @InjectModel('Topic') private readonly topicModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n\n    private UserService: UserService,\n    private ValidationService: ValidationService,\n  ) { }\n  async topicsSeeds(topics) {\n    for (var i = 0; i \n* @descriptionget create topic\n* @param {String} imageId -image id  \n* @param {String} description -description \n* @param {String} name -name\n* @param {Number} imageHeight -image height\n* @param {Number} imageWidth -image width\n* @returns {Object} -topic object\n*/\n  async createTopic(\n    imageId: string,\n    description: string,\n    imageWidth: number,\n    imageHeight: number,\n    name: string\n  ): Promise {\n    if (!this.ValidationService.checkMongooseID([imageId]))\n      throw new Error('not mongoose id');\n    let topicExist = await this.topicModel\n      .findOne({ name: name }, '_id')\n      .lean();\n    if (topicExist) throw new Error('topic has been already exists');\n    let topic = new this.topicModel({\n      name: name,\n      imageId: imageId,\n      imageWidth: imageWidth,\n      imageHeight: imageHeight,\n      followers: [],\n      description: description,\n      pins: [],\n    });\n    await topic.save();\n    return topic;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get topic by id\n* @param {String} topicId -topic id  \n* @returns {Object} -topic object\n*/\n  async getTopicById(topicId): Promise {\n    if (!this.ValidationService.checkMongooseID([topicId]))\n      throw new Error('not mongoose id');\n    const topic = await this.topicModel.findById(topicId, 'pins followers', (err, topic) => {\n      if (err) throw new Error('topic not found');\n      return topic;\n    });\n    return topic;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get topics\n* @param {String} userId -user id  \n* @returns {Array} -topic objects\n*/\n  async getTopics(userId): Promise> {\n    let topics = await this.topicModel.find(\n      {},\n      'name description imageId followers',\n      (err, topic) => {\n        if (err) throw new Error('topic not found');\n        return topic;\n      },\n    );\n    return topics.map(topic => {\n      let isFollow = topic.followers.includes(userId);\n      return {\n        isFollow,\n        _id: topic._id,\n        name: topic.name,\n        description: topic.description,\n        imageId: topic.imageId,\n      };\n    });\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget add pin to topic\n* @param {String} topicId -topic id  \n* @param {Number} pinId -pin id\n* @returns {Boolean}\n*/\n  async addPinToTopic(topicName, pinId): Promise {\n    if (!this.ValidationService.checkMongooseID([pinId]))\n      throw new Error('not mongoose id');\n    let topic = await this.topicModel.find({ name: topicName }, 'pins');\n    let id = mongoose.Types.ObjectId(pinId);\n    const pin = await this.pinModel.findById(id, 'topic');\n    if (!pin) throw new NotFoundException();\n    pin.topic = topicName;\n    await pin.save().catch(err => {\n      return err;\n    });\n    if (topic && pin) {\n      topic[0].pins.push(pinId);\n      await topic[0].save().catch(err => {\n        return err;\n      });\n      return true;\n    }\n    throw new NotFoundException();\n  }\n  /**\n * @author Dina Alaa \n * @descriptionget get pins of a topic\n * @param {String} topicId -topic id  \n * @param {Number} limit -limit\n * @param {Number} offset -offset\n * @returns {Array} -pin objects\n */\n  async getPinsOfTopic(topicId: string, limit: number, offset: number): Promise {\n    if (!this.ValidationService.checkMongooseID([topicId]))\n      throw new Error('not mongoose id');\n    const topic = await this.getTopicById(topicId);\n    if (!topic.pins.length) return [];\n    let pinsIds = this.ValidationService.limitOffset(\n      limit,\n      offset,\n      topic.pins,\n    );\n    let pins = [];\n    for (let i = 0; i  {\n        if (pin) pins.push(pin);\n      });\n    }\n    return pins;\n  }\n  /**\n   * @author Aya Abohadima \n   * @descriptioncheck if this user follow this topic \n    * @param {String} userId -user id  \n    * @param {String} topicId -topic id\n    * @returns {Boolean}\n    */\n  async checkFollowTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (!(await this.UserService.getUserById(userId)))\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.getTopicById(topicId);\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers || topic.followers.length == 0) return false;\n    return topic.followers.includes(userId);\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @description make user follow topic\n    * @param {String} userId -user id  \n    * @param {String} topicId - topic id\n    * @returns {Number} 1\n  */\n  async followTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (await this.checkFollowTopic(userId, topicId))\n      throw new HttpException(\n        'you are already follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    const user = await this.UserService.getUserById(userId);\n    if (!user)\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.topicModel.findById(topicId, {\n      pins: 1,\n      followers: 1,\n      name: 1,\n    });\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers) topic.followers = [];\n    topic.followers.push(userId);\n    await topic.save();\n    if (!user.followingTopics) user.followingTopics = [];\n    user.followingTopics.push(topicId);\n    if (!user.lastTopics) user.lastTopics = [];\n    if (user.lastTopics.length > 0) {\n      if (user.lastTopics[user.lastTopics.length - 1].topicName == topic.name) {\n        await user.save();\n        return 1;\n      }\n    }\n    user.lastTopics.push({\n      topicName: topic.name,\n      pinsLength: topic.pins.length,\n    });\n    if (user.lastTopics.length > 5) {\n      user.lastTopics = user.lastTopics.slice(1, 5);\n    }\n    await user.save();\n    return 1;\n  }\n\n  /**\n  * @author Aya Abohadima \n  * @description make user unfollow topic\n  * @param {String} userId -user id  \n  * @param {String} topicId - topic id\n  * @returns {Number} 1\n  */\n  async unfollowTopic(userId, topicId) {\n    return this.UserService.unfollowTopic(userId, topicId);\n  }\n\n  /**\n   * @author Aya Abohadima \n   * @descriptionget user following topic\n   * @param {String} userId -user id  \n   * @returns {Array} -following topic object\n   */\n  async followingTopics(userId) {\n    return await this.topicModel.aggregate([\n      { $match: { followers: mongoose.Types.ObjectId(userId) } },\n      { $project: { followers: { $size: '$followers' }, imageId: 1, name: 1 } },\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateDto.html":{"url":"interfaces/UpdateDto.html","title":"interface - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                            Optional\n                                        birthDate\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                            Optional\n                                        location\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                                \n                                            Optional\n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateDto {\n  email?: string;\n  password?: string;\n  birthDate?: Date;\n  firstName?: string;\n  lastName?: string;\n  location?: string;\n  userName?: string;\n  country?: string;\n  gender?: string;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n  profileImage?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateSettingsDto.html":{"url":"interfaces/UpdateSettingsDto.html","title":"interface - UpdateSettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateSettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user-settings.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        activateaccount\n                                \n                                \n                                            Optional\n                                        activity\n                                \n                                \n                                            Optional\n                                        boardsForYou\n                                \n                                \n                                            Optional\n                                        boardUpdate\n                                \n                                \n                                            Optional\n                                        deleteFlag\n                                \n                                \n                                            Optional\n                                        facebook\n                                \n                                \n                                            Optional\n                                        followNotification\n                                \n                                \n                                            Optional\n                                        google\n                                \n                                \n                                            Optional\n                                        invitation\n                                \n                                \n                                            Optional\n                                        notificationCounter\n                                \n                                \n                                            Optional\n                                        pinsForYou\n                                \n                                \n                                            Optional\n                                        pinsInspired\n                                \n                                \n                                            Optional\n                                        pinsNotification\n                                \n                                \n                                            Optional\n                                        popularPins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteFlag\n                                    \n                                \n                                \n                                    \n                                        deleteFlag:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateSettingsDto {\n  facebook?: Boolean;\n  activity?: Boolean;\n  invitation?: Boolean;\n  boardUpdate?: Boolean;\n  google?: Boolean;\n  deleteFlag?: Boolean;\n  boardsForYou?: Boolean;\n  popularPins?: Boolean;\n  pinsForYou?: Boolean;\n  pinsInspired?: Boolean;\n  activateaccount?: Boolean;\n  followNotification?: Boolean;\n  pinsNotification?: Boolean;\n  notificationCounter?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkfollowingUser\n                            \n                            \n                                    Async\n                                confirmUpdateEmail\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowings\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPublicHome\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserFollowers\n                            \n                            \n                                    Async\n                                getUserFollowings\n                            \n                            \n                                    Async\n                                getViewState\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                setFCMToken\n                            \n                            \n                                    Async\n                                setViewState\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkfollowingUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkfollowingUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:179\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmUpdateEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUpdateEmail(req, type: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/confirm-update-email')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowings(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNotifications\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('notifications/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPublicHome\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicHome(index: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/Home/:index')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowers(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowings(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getViewState(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/log-out')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('users/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(req, newPassword: string, oldPassword: string, forgetPassword: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/reset-password')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oldPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    forgetPassword\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setFCMToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setFCMToken(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setViewState(req, viewState: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    viewState\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(req, updateData: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUserSettings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserSettings(req, updateData: UpdateSettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update-settings')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateSettingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Put,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Param,\n  BadRequestException,\n  NotAcceptableException,\n  UseFilters,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Email } from '../shared/send-email.service';\nimport { UpdateSettingsDto } from './dto/update-user-settings.dto';\nimport { UpdateDto } from './dto/update-user.dto';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class UserController {\n  constructor(private userService: UserService, private email: Email) {}\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('users/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserMe(req.user._id);\n\n    return user;\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('notifications/me')\n  async getNotifications(@Request() req) {\n    const user = await this.userService.getUserNotifications(req.user._id);\n    return user;\n  }\n  @Get('/user/:id')\n  async getUser(@Param() params) {\n    const user = await this.userService.getUserMe(params.id);\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/reset-password')\n  async resetPassword(\n    @Request() req,\n    @Body('newPassword') newPassword: string,\n    @Body('oldPassword') oldPassword: string,\n    @Body('forgetPassword') forgetPassword: Boolean,\n  ) {\n    if (forgetPassword == true) oldPassword = null;\n    else if (!oldPassword)\n      throw new HttpException('oldPassword is reqired', HttpStatus.FORBIDDEN);\n    const ifRest = await this.userService.resetPassword(\n      req.user._id,\n      newPassword,\n      oldPassword,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update')\n  async updateUser(@Request() req, @Body() updateData: UpdateDto) {\n    await this.userService.checkUpdateData(updateData);\n    await this.userService.updateUserInfo(req.user._id, updateData);\n    const user = await this.userService.getUserMe(req.user._id);\n    user.password = null;\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update-settings')\n  async updateUserSettings(\n    @Request() req,\n    @Body() updateData: UpdateSettingsDto,\n  ) {\n    if (updateData.notificationCounter)\n      return await this.userService.updateDataInUser(req.user._id, {\n        notificationCounter: 0,\n      });\n    await this.userService.updateSettings(req.user._id, updateData);\n    if (!updateData.deleteFlag) {\n      const user = await this.userService.getUserMe(req.user._id);\n      user.password = null;\n      return user;\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/confirm-update-email')\n  async confirmUpdateEmail(@Request() req, @Query('type') type: string) {\n    if (!req.user.email || !req.user.newEmail || !req.user._id)\n      throw new HttpException('not correct token', HttpStatus.FORBIDDEN);\n    if (type === 'changeEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.email,\n      );\n      if (!user)\n        throw new HttpException('no user by this email', HttpStatus.FORBIDDEN);\n      await this.email.sendEmail(\n        req.user.newEmail,\n        req.header('Authorization'),\n        'set email',\n        req.user.firstName,\n      );\n    } else if (type === 'resetEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.newEmail,\n      );\n      if (user)\n        throw new HttpException(\n          'this email aleardy exists',\n          HttpStatus.FORBIDDEN,\n        );\n      if (!(await this.userService.setEmail(req.user._id, req.user.newEmail)))\n        throw new HttpException(\n          'not user or not email',\n          HttpStatus.BAD_REQUEST,\n        );\n    } else if (!type)\n      throw new HttpException('type not correct', HttpStatus.FORBIDDEN);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/boards/view')\n  async setViewState(@Request() req, @Query('viewState') viewState: string) {\n    const view = await this.userService.setViewState(req.user._id, viewState);\n    if (view) {\n      return { success: 'view is updated' };\n    } else {\n      throw new NotAcceptableException('view is not updated');\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boards/view')\n  async getViewState(@Request() req) {\n    const view = await this.userService.getViewState(req.user._id);\n    if (view) {\n      return view;\n    } else {\n      throw new NotAcceptableException('cant get view state');\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-user/:userId')\n  async followUser(@Param() params, @Request() req) {\n    if (!(await this.userService.followUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-user/:userId')\n  async unfollowUser(@Param() params, @Request() req) {\n    if (!(await this.userService.unfollowUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/:fcmToken')\n  async setFCMToken(@Param() params, @Request() req) {\n    const user = await this.userService.updateFCMTocken(\n      params.fcmToken,\n      req.user._id,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/log-out')\n  async logOut(@Request() req) {\n    const user = await this.userService.updateFCMTocken(' ', req.user._id);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-user/:userId')\n  async checkfollowingUser(@Param() params, @Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    if (!(await this.userService.checkFollowUser(user, params.userId)))\n      return { follow: 'false' };\n    else return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follower')\n  async getFollowers(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following')\n  async getFollowings(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/follower')\n  async getUserFollowers(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(params.userId, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/following')\n  async getUserFollowings(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(params.userId, limit, offset);\n  }\n\n  @Get('/Home/:index')\n  async getPublicHome(@Param('index') index: number) {\n    let pins = await this.userService.getPublicHome(index);\n    return pins;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nBoardService\n\nBoardService\n\nUserModule -->\n\nBoardService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { UserController } from './user.controller';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Topic } from '../models/topic.schema';\nimport { UserService } from './user.service';\nimport { User } from 'src/models/user.schema';\nimport { Message } from 'src/models/message.schema';\nimport { BoardService } from '../board/board.service';\nimport { Chat } from 'src/models/chat.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService, BoardService],\n  exports: [UserService],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkMongooseID\n                            \n                            \n                                limitOffset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/validation.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkMongooseID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkMongooseID(ids)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            limitOffset\n                        \n                        \n                    \n                \n            \n            \n                \nlimitOffset(limit: number, offset: number, specificElements: (string | object)[])\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    specificElements\n                                    \n                                            (string | object)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { user } from '../types/user';\nconst ObjectId = require('mongoose').Types.ObjectId;\n@Injectable()\nexport class ValidationService {\n  constructor() { }\n\n  async checkMongooseID(ids) {\n    for (let id of ids) {\n      if (id == undefined) continue;\n      if (!ObjectId.isValid(id)) return 0;\n    }\n    return 1;\n  }\n  limitOffset(\n    limit: number,\n    offset: number,\n    specificElements: (string | object)[],\n  ): any[] {\n    if (offset >= specificElements.length) throw new NotFoundException();\n    let end = Number(limit) + Number(offset);\n    if (end > specificElements.length)\n      end = specificElements.length\n    return specificElements.slice(offset, end);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/board.html":{"url":"interfaces/board.html","title":"interface - board","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  board\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collaborators\n                                \n                                \n                                        counts\n                                \n                                \n                                        coverImages\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        description\n                                \n                                \n                                        endDate\n                                \n                                \n                                        followers\n                                \n                                \n                                        isJoined\n                                \n                                \n                                        more\n                                \n                                \n                                        name\n                                \n                                \n                                        personalization\n                                \n                                \n                                        pins\n                                \n                                \n                                        sections\n                                \n                                \n                                        startDate\n                                \n                                \n                                        status\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collaborators\n                                    \n                                \n                                \n                                    \n                                        collaborators:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                    \n                                \n                                \n                                    \n                                        endDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isJoined\n                                    \n                                \n                                \n                                    \n                                        isJoined:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        personalization\n                                    \n                                \n                                \n                                    \n                                        personalization:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sections\n                                    \n                                \n                                \n                                    \n                                        sections:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                    \n                                \n                                \n                                    \n                                        startDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/chat.html":{"url":"interfaces/chat.html","title":"interface - chat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  chat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/chat.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        deletedUserIds\n                                \n                                \n                                        lastMessage\n                                \n                                \n                                        name\n                                \n                                \n                                        usersIds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedUserIds\n                                    \n                                \n                                \n                                    \n                                        deletedUserIds:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastMessage\n                                    \n                                \n                                \n                                    \n                                        lastMessage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersIds\n                                    \n                                \n                                \n                                    \n                                        usersIds:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface chat extends Document {\n    name: String,\n    usersIds: Array,\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n    }\n    date: Date,\n    deletedUserIds: Array,\n\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/comment.html":{"url":"interfaces/comment.html","title":"interface - comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commenter\n                                \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replies\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commenter\n                                    \n                                \n                                \n                                    \n                                        commenter:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replies\n                                    \n                                \n                                \n                                    \n                                        replies:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            interface\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            interface\n            RegisterDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board.controller.ts\n            \n            controller\n            BoardController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/board/board.service.ts\n            \n            injectable\n            BoardService\n            \n                0 %\n                (0/31)\n            \n        \n        \n            \n                \n                src/board/dto/edit-board.dto.ts\n            \n            class\n            EditBoardDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/dto/edit-collaboratores-permissions.dto.ts\n            \n            class\n            EditCollaboratoresPermissionsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            gracefulFs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            cors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Board\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Chat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Pin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Topic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pins/dto/create-pin.dto.ts\n            \n            class\n            CreatePinDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/pins/pins.controller.ts\n            \n            controller\n            PinsController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/pins/pins.service.ts\n            \n            injectable\n            PinsService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.controller.ts\n            \n            controller\n            RecommendationController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.service.ts\n            \n            injectable\n            RecommendationService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/search/search.service.ts\n            \n            injectable\n            SearchService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/shared/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/shared/send-email.service.ts\n            \n            injectable\n            Email\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            class\n            SharedGateway\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            variable\n            ObjectId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/topic/topic.controller.ts\n            \n            controller\n            TopicController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/topic/topic.service.ts\n            \n            injectable\n            TopicService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            board\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            section\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/chat.ts\n            \n            interface\n            chat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/message.ts\n            \n            interface\n            message\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/payload.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            pin\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            reply\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/topic.ts\n            \n            interface\n            topic\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/types/user.ts\n            \n            interface\n            user\n            \n                0 %\n                (0/46)\n            \n        \n        \n            \n                \n                src/user/dto/update-user-settings.dto.ts\n            \n            interface\n            UpdateSettingsDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            interface\n            UpdateDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/36)\n            \n        \n        \n            \n                \n                src/utilities/helpers.utils.ts\n            \n            class\n            HelpersUtils\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/utilities/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.11\n        \n            @google-cloud/firestore : ^4.2.0\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs-modules/mailer : ^1.5.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/platform-socket.io : ^7.3.2\n        \n            @nestjs/serve-static : ^2.1.3\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjs/websockets : ^7.3.2\n        \n            @types/fuzzy-search : ^2.1.0\n        \n            @types/nodemailer : ^6.4.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            dotenv : ^8.2.0\n        \n            elasticsearch : ^16.7.1\n        \n            firebase-admin : ^9.1.1\n        \n            fuzzy-search : ^3.2.1\n        \n            googleapis : ^60.0.1\n        \n            graceful-fs : ^4.2.4\n        \n            jsonwebtoken : ^8.5.1\n        \n            mongo-gridfs : ^1.1.0\n        \n            mongoosastic : ^4.6.0\n        \n            mongoose : ^5.9.26\n        \n            mongoose-partial-search : ^1.0.5\n        \n            morgan : ^1.10.0\n        \n            node-fetch : ^2.6.0\n        \n            nodemailer : ^6.4.10\n        \n            partial : 0.0.7\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            search : ^1.0.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nEmail \n\nEmail \n\nEmail  -->\n\nSharedModule->Email \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\nUserModule -->\n\nBoardService->UserModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/message.html":{"url":"interfaces/message.html","title":"interface - message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/message.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chatId\n                                \n                                \n                                        date\n                                \n                                \n                                        deliverStatus\n                                \n                                \n                                        message\n                                \n                                \n                                        seenStatus\n                                \n                                \n                                        senderId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chatId\n                                    \n                                \n                                \n                                    \n                                        chatId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deliverStatus\n                                    \n                                \n                                \n                                    \n                                        deliverStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seenStatus\n                                    \n                                \n                                \n                                    \n                                        seenStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                    \n                                \n                                \n                                    \n                                        senderId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nexport interface message extends Document {\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array\n    seenStatus: Array\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PinsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecommendationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/pin.html":{"url":"interfaces/pin.html","title":"interface - pin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  pin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        board\n                                \n                                \n                                        comments\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        destLink\n                                \n                                \n                                        driveImageId\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        more\n                                \n                                \n                                        note\n                                \n                                \n                                        reacts\n                                \n                                \n                                        savers\n                                \n                                \n                                        section\n                                \n                                \n                                        title\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        board\n                                    \n                                \n                                \n                                    \n                                        board:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destLink\n                                    \n                                \n                                \n                                    \n                                        destLink:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driveImageId\n                                    \n                                \n                                \n                                    \n                                        driveImageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reacts\n                                    \n                                \n                                \n                                    \n                                        reacts:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savers\n                                    \n                                \n                                \n                                    \n                                        savers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reply.html":{"url":"interfaces/reply.html","title":"interface - reply","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  reply\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replier\n                                \n                                \n                                        reply\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replier\n                                    \n                                \n                                \n                                    \n                                        replier:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reply\n                                    \n                                \n                                \n                                    \n                                        reply:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/section.html":{"url":"interfaces/section.html","title":"interface - section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coverImages\n                                \n                                \n                                        creatorId\n                                \n                                \n                                        more\n                                \n                                \n                                        pins\n                                \n                                \n                                        sectionName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorId\n                                    \n                                \n                                \n                                    \n                                        creatorId:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionName\n                                    \n                                \n                                \n                                    \n                                        sectionName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/topic.html":{"url":"interfaces/topic.html","title":"interface - topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/topic.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        followers\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        name\n                                \n                                \n                                        pins\n                                \n                                \n                                        recommendedUsers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:         [mongoose.Types.ObjectId]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [mongoose.Types.ObjectId]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recommendedUsers\n                                    \n                                \n                                \n                                    \n                                        recommendedUsers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface topic extends Document {\n  name: String;\n  followers: Array;\n  description: String;\n  pins: [mongoose.Types.ObjectId];\n  imageWidth: Number;\n  imageHeight: Number;\n  recommendedUsers: Array;\n  imageId: String;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/user.html":{"url":"interfaces/user.html","title":"interface - user","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  user\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        about\n                                \n                                \n                                        activateaccount\n                                \n                                \n                                        activity\n                                \n                                \n                                        birthDate\n                                \n                                \n                                        boards\n                                \n                                \n                                        boardsForYou\n                                \n                                \n                                        boardUpdate\n                                \n                                \n                                        confirm\n                                \n                                \n                                        country\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                        facebook\n                                \n                                \n                                        fcmToken\n                                \n                                \n                                        firstName\n                                \n                                \n                                        followers\n                                \n                                \n                                        following\n                                \n                                \n                                        followingTopics\n                                \n                                \n                                        followNotification\n                                \n                                \n                                        gender\n                                \n                                \n                                        google\n                                \n                                \n                                        googleImage\n                                \n                                \n                                        history\n                                \n                                \n                                        homeFeed\n                                \n                                \n                                        invitation\n                                \n                                \n                                        lastName\n                                \n                                \n                                        lastTopics\n                                \n                                \n                                        location\n                                \n                                \n                                        notificationCounter\n                                \n                                \n                                        notificationOfPinsActivity\n                                \n                                \n                                        notifications\n                                \n                                \n                                        offlineNotifications\n                                \n                                \n                                        password\n                                \n                                \n                                        pins\n                                \n                                \n                                        pinsForYou\n                                \n                                \n                                        pinsInspired\n                                \n                                \n                                        pinsNotification\n                                \n                                \n                                        popularPins\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        recentSearch\n                                \n                                \n                                        savedPins\n                                \n                                \n                                        socketId\n                                \n                                \n                                        sortType\n                                \n                                \n                                        userName\n                                \n                                \n                                        viewState\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        about\n                                    \n                                \n                                \n                                    \n                                        about:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boards\n                                    \n                                \n                                \n                                    \n                                        boards:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirm\n                                    \n                                \n                                \n                                    \n                                        confirm:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fcmToken\n                                    \n                                \n                                \n                                    \n                                        fcmToken:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followingTopics\n                                    \n                                \n                                \n                                    \n                                        followingTopics:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleImage\n                                    \n                                \n                                \n                                    \n                                        googleImage:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        history\n                                    \n                                \n                                \n                                    \n                                        history:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        homeFeed\n                                    \n                                \n                                \n                                    \n                                        homeFeed:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastTopics\n                                    \n                                \n                                \n                                    \n                                        lastTopics:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationOfPinsActivity\n                                    \n                                \n                                \n                                    \n                                        notificationOfPinsActivity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notifications\n                                    \n                                \n                                \n                                    \n                                        notifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offlineNotifications\n                                    \n                                \n                                \n                                    \n                                        offlineNotifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentSearch\n                                    \n                                \n                                \n                                    \n                                        recentSearch:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savedPins\n                                    \n                                \n                                \n                                    \n                                        savedPins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        socketId\n                                    \n                                \n                                \n                                    \n                                        socketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortType\n                                    \n                                \n                                \n                                    \n                                        sortType:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewState\n                                    \n                                \n                                \n                                    \n                                        viewState:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface user extends Document {\n  firstName: String;\n  lastName: String;\n  userName: String;\n  location: String;\n  email: String;\n  password: String;\n  country: String;\n  boardsForYou: Boolean;\n  popularPins: Boolean;\n  pinsForYou: Boolean;\n  activity: Boolean;\n  invitation: Boolean;\n  boardUpdate: Boolean;\n  activateaccount: Boolean;\n  followNotification: Boolean;\n  pinsNotification: Boolean;\n  pinsInspired: Boolean;\n  birthDate: Date;\n  about: String;\n  facebook: Boolean;\n  google: Boolean;\n  notificationOfPinsActivity: Boolean;\n  gender: String;\n  googleImage: String;\n  sortType: String;\n  socketId: string;\n  notificationCounter: number;\n  profileImage: String;\n  lastTopics: Array;\n  history: Array;\n  pins: Array;\n  savedPins: Array;\n  recentSearch: Array;\n  confirm: Boolean;\n  fcmToken: String;\n  homeFeed: Array;\n  followingTopics: Array;\n  notifications: [{}];\n  offlineNotifications: [{}];\n  followers: Array;\n  following: Array;\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId;\n      name: String;\n      createdAt: Date;\n      isJoined: Boolean;\n      createdOrjoined: String;\n    },\n  ];\n  viewState: string;\n  counts: {\n    likes: Number;\n    comments: Number;\n    repins: Number;\n    saves: Number;\n  };\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Board   (src/.../board.schema.ts)\n                        \n                        \n                            Chat   (src/.../chat.schema.ts)\n                        \n                        \n                            cors   (src/.../main.ts)\n                        \n                        \n                            fs   (src/.../images.service.ts)\n                        \n                        \n                            gracefulFs   (src/.../images.service.ts)\n                        \n                        \n                            jwt   (src/.../shared.gateway.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            Message   (src/.../message.schema.ts)\n                        \n                        \n                            ObjectId   (src/.../validation.service.ts)\n                        \n                        \n                            path   (src/.../images.controller.ts)\n                        \n                        \n                            Pin   (src/.../pin.schema.ts)\n                        \n                        \n                               (src/.../images.service.ts)\n                        \n                        \n                            Schema   (src/.../pin.schema.ts)\n                        \n                        \n                            Schema   (src/.../message.schema.ts)\n                        \n                        \n                            Schema   (src/.../topic.schema.ts)\n                        \n                        \n                            Schema   (src/.../chat.schema.ts)\n                        \n                        \n                            Schema   (src/.../user.schema.ts)\n                        \n                        \n                            Schema   (src/.../board.schema.ts)\n                        \n                        \n                            Topic   (src/.../topic.schema.ts)\n                        \n                        \n                            User   (src/.../user.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/board.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Board\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  url: String,\n  name: { type: String, index: true },\n  startDate: String,\n  endDate: String,\n  status: String,\n  topic: { type: String, index: true },\n  description: { type: String, index: true },\n  personalization: Boolean,\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  more: Array(Object),\n  coverImages: Array(String),\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    topic: String,\n  }),\n  createdAt: Date,\n  sections: [\n    {\n      sectionId: mongoose.Types.ObjectId,\n      sectionName: String,\n      more: Array(Object),\n      pins: Array({\n        pinId: mongoose.Types.ObjectId,\n        topic: String,\n      }),\n      creatorId: mongoose.Types.ObjectId,\n      coverImages: Array(String),\n    },\n  ],\n  collaborators: [\n    {\n      collaboratorId: mongoose.Types.ObjectId,\n      savePin: Boolean,\n      createPin: Boolean,\n      editTitle: Boolean,\n      editDescription: Boolean,\n      personalization: Boolean,\n      addCollaborators: Boolean,\n    },\n  ],\n  isJoined: Boolean,\n  followers: Array(mongoose.Types.ObjectId),\n  counts: {\n    followers: Number,\n    joiners: Number,\n    pins: Number,\n  },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/chat.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Chat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    name: String,\n    usersIds: Array(String),\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n    },\n    date: Date,\n    deletedUserIds: Array(String)\n\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cors\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('cors')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('morgan')\n                        \n                    \n\n\n            \n        \n\n    src/images/images.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gracefulFs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('graceful-fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('googleapis')\n                        \n                    \n\n\n            \n        \n\n    src/shared/shared.gateway.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/models/message.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Message\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array({\n        userId: String,\n        time: Date\n    }),\n    seenStatus: Array({\n        userId: String,\n        time: Date\n    }),\n    senderDelete: Boolean\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/shared/validation.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ObjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('mongoose').Types.ObjectId\n                        \n                    \n\n\n            \n        \n\n    src/images/images.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('path')\n                        \n                    \n\n\n            \n        \n\n    src/models/pin.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Pin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  imageId: String,\n  driveImageId: String,\n  imageWidth: Number,\n  imageHeight: Number,\n  url: String,\n  title: { type: String, index: true },\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  savers: Array(mongoose.Types.ObjectId),\n  board: mongoose.Types.ObjectId,\n  section: mongoose.Types.ObjectId,\n  createdAt: Date,\n  topic: String,\n  note: { type: String, index: true },\n  destLink: String,\n  comments: Array({\n    commenter: mongoose.Types.ObjectId,\n    comment: String,\n    date: Date,\n    replies: [\n      {\n        replier: mongoose.Types.ObjectId,\n        reply: String,\n        date: Date,\n        likes: {\n          counts: Number,\n          likers: [mongoose.Types.ObjectId],\n        },\n      },\n    ],\n    likes: {\n      counts: Number,\n      likers: [mongoose.Types.ObjectId],\n    },\n  }),\n  more: Array(Object),\n  counts: {\n    comments: Number,\n    thanksReacts: Number,\n    loveReacts: Number,\n    wowReacts: Number,\n    goodIdeaReacts: Number,\n    hahaReacts: Number,\n  },\n  reacts: [\n    {\n      reactType: String,\n      userId: mongoose.Types.ObjectId,\n    },\n  ],\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/topic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: String,\n  followers: [mongoose.Types.ObjectId],\n  description: String,\n  pins: [mongoose.Types.ObjectId],\n  imageWidth: Number,\n  imageHeight: Number,\n  recommendedUsers: [mongoose.Types.ObjectId],\n  imageId: String,\n})\n                        \n                    \n\n\n            \n        \n\n    src/models/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  recentSearch: Array(String),\n  firstName: { type: String, index: true },\n  lastName: { type: String, index: true },\n  email: String,\n  password: String,\n  country: String,\n  birthDate: Date,\n  followingTopics: Array(mongoose.Types.ObjectId),\n  location: String,\n  activateaccount: Boolean,\n  notificationCounter: Number,\n  activity: Boolean,\n  lastTopics: Array({\n    topicName: String,\n    pinsLength: Number,\n  }),\n  invitation: Boolean,\n  boardUpdate: Boolean,\n  followNotification: Boolean,\n  pinsNotification: Boolean,\n  facebook: Boolean,\n  google: Boolean,\n  notificationOfPinsActivity: Boolean,\n  userName: { type: String, index: true },\n  boardsForYou: Boolean,\n  pinsForYou: Boolean,\n  pinsInspired: Boolean,\n  popularPins: Boolean,\n  about: String,\n  sortType: String,\n  gender: String,\n  socketId: String,\n  homeFeed: Array(Object),\n  history: Array({\n    topic: String,\n    pinId: mongoose.Types.ObjectId,\n  }),\n  googleImage: String,\n  profileImage: String,\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n  }),\n  savedPins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n    note: String,\n  }),\n  confirm: Boolean,\n  fcmToken: String,\n  notifications: [{}],\n  offlineNotifications: [{}],\n  followers: Array(mongoose.Types.ObjectId),\n  following: Array(mongoose.Types.ObjectId),\n  viewState: String,\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId,\n      name: String,\n      createdAt: Date,\n      isJoined: Boolean,\n      createdOrjoined: String,\n    },\n  ],\n  counts: {\n    likes: Number,\n    comments: Number,\n    repins: Number,\n    saves: Number,\n  },\n  createdAt: Date,\n})\n                        \n                    \n\n\n            \n        \n\n    src/utilities/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req) => req.user)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
