var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.265,1,2.642]],["body/controllers/AppController.html",[0,2.228,1,4.651,2,1.711,3,0.169,4,0.169,5,0.169,6,4.793,7,0.44,8,1.702,9,6.294,10,2.504,11,0.017,12,1.142,13,5.56,14,1.431,15,0.916,16,0.523,17,0.855,18,4.263,19,4.793,20,0.197,21,0.344,22,2.79,23,2.79,24,1.636,25,5.56,26,0.012,27,0.015,28,0.012]],["title/modules/AppModule.html",[29,0.807,30,2.642]],["body/modules/AppModule.html",[1,4.357,2,1.702,3,0.127,4,0.127,5,0.127,11,0.018,16,0.604,17,0.643,18,4.253,19,3.606,20,0.148,21,0.259,26,0.009,27,0.012,28,0.009,29,1.332,30,5.533,31,1.622,32,1.622,33,1.789,34,1.789,35,1.622,36,2.649,37,1.789,38,3.606,39,3.606,40,3.606,41,4.571,42,3.532,43,4.571,44,3.744,45,3.744,46,4.571,47,4.571,48,2.729,49,4.571,50,3.744,51,2.365,52,1.702,53,1.622,54,4.183,55,2.49,56,4.183,57,2.943,58,2.099,59,1.476,60,4.183,61,1.986,62,2.716,63,2.943,64,4.183,65,3.606,66,4.183,67,4.183,68,4.183,69,4.183]],["title/injectables/AppService.html",[18,2.269,70,0.807]],["body/injectables/AppService.html",[3,0.171,4,0.171,5,0.171,7,0.445,8,1.713,9,6.317,11,0.017,12,1.154,14,1.447,15,0.922,16,0.445,17,0.865,18,4.021,20,0.199,21,0.348,24,1.654,26,0.012,27,0.015,28,0.012,29,1.209,70,1.431,71,2.179,72,4.846,73,3.954,74,5.621,75,3.65,76,5.621,77,5.621]],["title/controllers/AuthController.html",[0,1.265,78,2.642]],["body/controllers/AuthController.html",[0,1.429,2,0.882,3,0.087,4,0.087,5,0.087,7,0.227,8,1.092,10,3.047,11,0.018,12,1.389,14,1.742,15,0.7,16,0.524,17,0.441,20,0.101,21,0.177,24,1.486,26,0.006,27,0.009,28,0.006,78,2.984,79,2.471,80,2.457,81,4.241,82,3.552,83,4.241,84,3.657,85,4.241,86,4.241,87,3.657,88,4.241,89,2.866,90,4.241,91,2.866,92,1.991,93,0.988,94,0.544,95,1.666,96,2.386,97,2.866,98,2.866,99,2.866,100,3.315,101,2.866,102,2.866,103,2.866,104,2.866,105,4.241,106,2.534,107,2.866,108,3.051,109,2.866,110,2.866,111,2.866,112,2.866,113,4.594,114,2.866,115,2.866,116,2.866,117,3.925,118,4.241,119,2.866,120,5.58,121,2.471,122,2.866,123,2.866,124,2.866,125,3.925,126,4.241,127,2.866,128,1.861,129,1.525,130,2.399,131,1.621,132,1.621,133,1.621,134,1.621,135,2.399,136,1.732,137,1.439,138,2.685,139,2.017,140,3.899,141,2.471,142,2.866,143,2.866,144,2.856,145,2.211,146,2.471,147,2.211,148,1.167,149,2.856,150,2.866,151,4.241,152,2.866,153,2.866,154,2.866,155,2.815,156,2.984,157,2.834,158,2.866,159,2.866,160,2.866,161,2.866,162,2.471,163,2.866,164,2.65,165,1.797,166,2.866,167,1.758,168,2.866,169,2.471,170,2.471,171,3.051,172,5.049,173,4.003,174,5.049,175,2.256,176,3.657,177,2.866,178,2.866,179,2.866,180,4.353,181,2.866,182,2.866,183,3.051,184,2.866,185,2.866,186,2.866,187,2.866,188,2.866,189,2.866,190,2.471,191,3.272,192,2.866,193,2.866,194,2.866,195,4.353,196,2.471,197,3.272,198,2.866,199,2.866,200,3.657,201,2.866,202,2.754,203,2.471,204,2.866,205,2.471,206,2.471]],["title/modules/AuthModule.html",[29,0.807,41,2.438]],["body/modules/AuthModule.html",[2,1.874,3,0.148,4,0.148,5,0.148,11,0.018,16,0.588,17,0.748,20,0.172,21,0.301,26,0.011,27,0.014,28,0.011,29,1.43,31,1.885,32,1.885,33,2.079,34,2.079,35,1.885,36,2.845,37,2.079,41,5.049,48,2.84,50,3.896,51,2.605,52,1.978,53,1.885,55,2.742,61,2.308,78,4.679,144,4.143,145,3.749,207,4.19,208,4.86,209,4.19,210,4.757,211,4.757,212,4.86,213,4.86,214,4.86,215,4.86,216,4.19]],["title/injectables/AuthService.html",[70,0.807,144,2.124]],["body/injectables/AuthService.html",[3,0.108,4,0.108,5,0.108,7,0.282,8,1.275,11,0.018,12,1.266,14,1.668,16,0.488,17,0.547,20,0.126,21,0.22,22,1.786,24,1.677,26,0.008,27,0.011,28,0.008,29,0.765,70,1.065,71,1.38,73,2.503,80,2.296,87,3.068,92,1.814,93,0.9,94,0.671,95,1.517,96,1.316,100,1.69,106,1.786,135,2.013,138,3.568,139,2.503,140,4.448,141,3.068,144,2.802,148,1.448,155,1.38,157,2.21,164,2.352,165,1.595,167,1.728,171,2.994,173,4.363,175,1.893,195,3.068,197,2.745,202,2.311,217,3.068,218,4.954,219,4.954,220,6.163,221,3.558,222,3.558,223,4.954,224,3.558,225,4.954,226,3.558,227,2.508,228,4.308,229,4.954,230,4.954,231,4.271,232,4.954,233,3.558,234,3.821,235,6.163,236,3.485,237,4.914,238,3.068,239,3.558,240,2.994,241,3.068,242,3.068,243,2.635,244,3.558,245,3.558,246,2.706,247,4.271,248,3.558,249,3.558,250,4.954,251,3.558,252,4.954,253,3.558,254,3.068,255,1.38,256,1.448,257,3.068,258,3.068,259,1.893,260,3.558,261,3.558,262,3.558,263,4.954,264,4.954,265,3.821,266,4.271,267,4.954,268,2.311,269,2.311,270,2.503,271,3.558,272,3.558]],["title/modules/BoardModule.html",[29,0.807,42,1.884]],["body/modules/BoardModule.html",[2,1.822,3,0.141,4,0.141,5,0.141,11,0.018,16,0.595,17,0.715,20,0.165,21,0.288,26,0.01,27,0.013,28,0.01,29,1.401,31,1.802,32,1.802,33,1.988,34,1.988,35,1.802,36,2.787,37,2.787,42,3.775,48,2.808,51,2.533,52,1.892,53,1.802,55,2.666,58,2.333,59,1.64,61,2.207,93,1.002,167,1.604,273,4.007,274,4.648,275,4.007,276,4.007,277,5.916,278,4.648,279,5.617,280,4.648,281,4.648,282,2.299,283,2.809,284,2.005,285,2.629,286,1.917,287,2.809,288,2.629,289,2.472,290,3.257]],["title/controllers/ChatController.html",[0,1.265,291,2.642]],["body/controllers/ChatController.html",[0,1.746,2,1.169,3,0.115,4,0.115,5,0.115,7,0.3,8,1.334,10,2.853,11,0.018,12,1.301,14,1.631,15,1.084,16,0.467,17,0.584,20,0.134,21,0.235,22,1.905,24,1.864,26,0.008,27,0.012,28,0.008,80,2.396,92,1.864,93,1.023,94,0.575,95,1.56,108,2.294,128,2.465,129,2.019,133,2.148,134,2.148,135,3.583,136,2.294,137,1.905,157,2.456,164,3.008,165,2.04,183,3.828,246,1.803,291,3.645,292,3.273,293,4.466,294,5.084,295,5.897,296,5.084,297,3.273,298,3.797,299,3.797,300,2.109,301,3.797,302,4.63,303,3.797,304,3.797,305,4.466,306,3.797,307,5.499,308,4.114,309,5.462,310,2.287,311,3.797,312,3.797,313,3.273,314,2.135,315,3.797,316,3.797,317,3.136,318,3.273,319,3.797,320,3.797,321,3.797,322,2.929,323,3.797,324,6.458,325,3.797,326,3.797,327,3.797,328,3.797,329,3.797,330,3.797,331,5.181,332,5.181,333,3.797,334,3.797,335,3.797,336,3.797,337,3.797,338,3.273,339,3.797]],["title/modules/ChatModule.html",[29,0.807,43,2.438]],["body/modules/ChatModule.html",[2,1.846,3,0.144,4,0.144,5,0.144,11,0.018,16,0.592,17,0.729,20,0.168,21,0.294,26,0.011,27,0.013,28,0.011,29,1.414,31,1.839,32,1.839,33,2.029,34,2.029,35,1.839,36,2.813,37,2.813,43,4.902,48,2.823,51,2.565,52,1.93,53,1.839,55,2.7,58,2.38,59,1.674,61,2.252,93,0.961,167,1.619,288,2.683,289,2.523,290,3.123,291,4.627,314,2.216,317,4.091,318,4.089,340,4.089,341,4.743,342,4.089,343,4.089,344,4.743,345,4.743,346,3.498,347,4.743,348,3.658]],["title/injectables/ChatService.html",[70,0.807,317,1.997]],["body/injectables/ChatService.html",[3,0.086,4,0.086,5,0.086,7,0.224,8,1.08,11,0.018,12,1.409,14,1.735,15,1.076,16,0.522,17,0.435,20,0.1,21,0.175,23,2.512,24,1.473,26,0.009,27,0.009,28,0.006,59,0.997,70,0.902,71,1.095,80,2.409,92,2.018,93,1.002,94,0.657,95,1.688,148,1.708,149,3.134,157,2.405,164,2.377,165,2.068,167,0.695,171,1.707,293,3.618,294,3.618,296,3.618,297,3.618,300,2.525,302,4.454,305,4.316,307,4.273,308,2.725,309,4.777,310,2.405,313,2.436,314,2.164,317,2.232,322,4.566,346,3.416,349,2.436,350,3.618,351,4.196,352,4.196,353,4.196,354,3.618,355,4.196,356,2.825,357,4.454,358,5.006,359,5.006,360,3.223,361,2.825,362,2.952,363,2.825,364,4.777,365,4.196,366,2.825,367,2.825,368,2.825,369,2.825,370,4.196,371,2.825,372,2.825,373,2.825,374,4.196,375,2.825,376,2.825,377,2.825,378,2.825,379,2.825,380,2.825,381,4.196,382,4.566,383,2.825,384,2.825,385,2.825,386,2.189,387,1.835,388,1.988,389,2.825,390,1.988,391,2.825,392,1.988,393,2.825,394,2.825,395,2.825,396,2.825,397,3.861,398,2.255,399,5.006,400,2.747,401,2.825,402,2.825,403,4.566,404,1.988,405,2.825,406,2.179,407,3.861,408,2.825,409,2.825,410,2.825,411,3.237,412,4.196,413,2.825,414,2.825,415,2.825,416,2.825,417,2.825,418,2.825,419,1.992,420,2.825,421,2.179,422,2.179,423,3.618,424,2.374,425,1.598,426,1.272,427,2.179,428,2.825,429,2.825,430,2.825,431,2.825,432,2.825,433,2.825,434,2.825,435,2.825]],["title/classes/CreatePinDto.html",[21,0.232,436,2.896]],["body/classes/CreatePinDto.html",[3,0.142,4,0.142,5,0.142,7,0.37,11,0.017,12,1.547,15,1.073,20,0.166,21,0.29,23,3.982,26,0.01,27,0.013,28,0.01,94,0.735,282,2.307,426,2.944,436,4.588,437,2.49,438,6.543,439,4.037,440,1.674,441,3.477,442,3.477,443,5.636,444,3.95,445,3.281,446,3.698,447,4.245,448,4.682,449,2.117,450,4.682,451,4.682,452,4.682,453,4.682,454,4.682,455,4.682,456,4.682,457,4.682]],["title/classes/EditBoardDto.html",[21,0.232,458,2.896]],["body/classes/EditBoardDto.html",[3,0.15,4,0.15,5,0.15,7,0.389,11,0.017,12,1.53,15,1.071,20,0.174,21,0.304,23,3.967,26,0.011,27,0.014,28,0.011,93,0.977,94,0.727,227,2.721,286,1.967,310,2.378,437,2.615,440,1.726,458,4.731,459,5.81,460,4.239,461,5.157,462,4.703,463,4.341,464,4.703,465,4.917,466,4.917,467,4.917,468,4.917,469,4.917,470,4.917,471,4.917]],["title/classes/EditCollaboratoresPermissionsDto.html",[21,0.232,472,2.896]],["body/classes/EditCollaboratoresPermissionsDto.html",[3,0.147,4,0.147,5,0.147,7,0.383,11,0.017,12,1.525,15,0.842,20,0.171,21,0.3,23,3.962,26,0.011,27,0.013,28,0.011,94,0.724,310,2.99,437,2.575,440,1.71,459,5.793,461,5.793,463,4.311,472,4.686,473,4.174,474,5.724,475,5.724,476,5.724,477,5.724,478,5.724,479,5.724,480,4.842,481,4.842,482,4.842,483,4.842,484,4.842,485,4.842,486,4.842]],["title/injectables/Email.html",[70,0.807,96,1.388]],["body/injectables/Email.html",[3,0.098,4,0.098,5,0.098,7,0.255,8,1.188,11,0.018,12,0.947,14,0.828,15,0.817,16,0.365,17,0.495,20,0.114,21,0.199,24,1.358,26,0.007,27,0.01,28,0.007,29,0.692,52,2.539,70,0.992,71,1.247,73,2.263,80,1.737,82,4.704,92,0.947,93,0.788,94,0.689,95,0.792,96,2.88,106,2.957,130,2.61,148,2.195,165,1.036,167,1.136,196,2.774,203,4.65,227,1.309,237,2.774,240,1.944,246,2.798,268,2.089,269,2.089,284,1.66,300,1.309,314,2.305,382,2.482,406,2.482,424,1.82,425,3.94,443,4.65,487,4.65,488,2.774,489,4.614,490,3.217,491,4.614,492,3.217,493,5.008,494,6.492,495,3.978,496,3.978,497,2.774,498,3.246,499,3.217,500,3.217,501,2.774,502,3.217,503,3.217,504,3.217,505,3.217,506,2.788,507,3.217,508,3.217,509,3.217,510,3.217,511,3.217,512,3.217,513,6.84,514,6.232,515,6.687,516,5.394,517,5.08,518,6.492,519,6.238,520,5.892,521,3.217,522,3.217,523,4.614,524,5.394,525,2.774,526,3.217,527,3.561,528,5.394,529,3.217,530,3.217,531,3.217,532,4.614,533,3.217,534,3.217,535,3.217,536,3.217,537,4.614,538,3.217,539,3.217,540,3.217,541,3.217,542,3.217]],["title/classes/FileInfoVm.html",[21,0.232,543,2.642]],["body/classes/FileInfoVm.html",[3,0.226,4,0.148,5,0.148,7,0.384,10,3.231,11,0.017,12,1.474,15,1.015,16,0.481,20,0.172,21,0.376,26,0.011,27,0.014,28,0.011,94,0.7,437,2.58,440,1.712,449,2.144,543,4.279,544,5.647,545,5.151,546,4.182,547,5.125,548,5.125,549,4.675,550,4.675,551,5.125,552,7.175,553,4.851,554,4.851,555,4.851,556,4.851,557,4.851,558,6.312,559,3.413,560,7.322,561,4.182]],["title/classes/FileResponseVm.html",[21,0.232,562,2.642]],["body/classes/FileResponseVm.html",[3,0.196,4,0.162,5,0.224,7,0.422,10,2.905,11,0.017,12,1.325,15,0.894,16,0.51,20,0.189,21,0.33,26,0.012,27,0.014,28,0.012,94,0.676,314,2.337,437,2.839,440,1.816,543,5.188,544,5.348,545,4.878,558,6.21,559,3.756,562,4.539,563,4.878,564,4.603,565,5.339,566,5.339,567,5.339,568,5.339]],["title/injectables/GoogleStrategy.html",[70,0.807,210,2.438]],["body/injectables/GoogleStrategy.html",[3,0.146,4,0.146,5,0.146,7,0.379,8,1.553,11,0.018,12,1.239,14,1.232,15,1.011,16,0.523,17,0.736,20,0.17,21,0.296,26,0.011,27,0.013,28,0.011,70,1.297,71,1.856,80,2.127,92,1.409,93,0.881,94,0.467,95,1.179,96,2.23,137,2.403,148,2.688,155,2.339,167,1.485,210,3.917,243,3.208,255,1.856,256,1.949,569,4.127,570,5.694,571,4.787,572,4.787,573,6.605,574,7.147,575,5.694,576,6.934,577,4.787,578,6.605,579,4.244,580,4.127,581,4.127,582,3.693,583,4.127,584,2.156,585,4.127,586,4.127,587,3.693,588,4.787,589,4.787,590,4.787,591,4.787,592,4.787,593,4.787,594,4.787,595,4.787,596,4.787,597,4.787,598,4.787,599,4.787,600,4.787,601,4.787,602,4.787]],["title/injectables/GridFsMulterConfigService.html",[70,0.807,603,2.438]],["body/injectables/GridFsMulterConfigService.html",[3,0.148,4,0.148,5,0.203,7,0.386,8,1.571,11,0.018,12,1.368,14,1.256,16,0.527,17,0.75,20,0.216,21,0.302,24,1.796,26,0.011,27,0.014,28,0.011,70,1.312,71,1.892,94,0.476,100,2.317,148,2.712,155,2.367,165,1.966,440,1.718,549,4.687,603,3.964,604,6.019,605,4.206,606,7.439,607,6.981,608,6.104,609,4.879,610,6.662,611,6.104,612,3.432,613,3.432,614,3.763,615,3.432,616,5.263,617,3.763,618,6.104,619,2.595,620,4.879,621,4.879,622,4.879,623,4.879,624,4.879,625,4.206,626,3.432,627,4.879]],["title/classes/HttpExceptionFilter.html",[21,0.232,628,2.438]],["body/classes/HttpExceptionFilter.html",[3,0.15,4,0.15,5,0.15,7,0.391,8,1.585,11,0.018,12,1.016,14,1.273,16,0.391,17,0.761,20,0.175,21,0.306,26,0.011,27,0.014,28,0.011,92,1.455,93,0.722,94,0.482,95,1.217,129,2.63,131,2.797,132,3.968,155,2.798,165,1.592,202,3.211,314,1.666,437,2.63,501,5.779,563,3.479,617,4.748,628,3.997,629,5.307,630,4.264,631,6.703,632,7.015,633,6.156,634,7.015,635,4.945,636,4.945,637,4.945,638,4.945,639,4.945,640,4.945,641,4.945,642,4.716,643,6.156,644,6.156,645,4.945,646,4.945,647,4.945,648,4.945,649,3.479,650,4.945,651,3.814,652,4.945,653,4.945,654,4.945,655,4.264,656,4.264,657,4.945]],["title/controllers/ImagesController.html",[0,1.265,658,2.642]],["body/controllers/ImagesController.html",[0,1.458,2,0.907,3,0.09,4,0.09,5,0.216,7,0.233,8,1.114,10,2.712,11,0.018,12,1.237,14,1.551,15,0.985,16,0.477,17,0.453,20,0.104,21,0.182,22,1.478,24,1.965,26,0.007,27,0.01,28,0.007,80,2.288,92,1.773,93,0.88,94,0.665,95,1.483,100,2.86,113,5.256,128,1.913,129,2.302,130,1.666,131,1.666,132,2.902,133,1.666,134,1.666,155,2.723,156,2.072,157,2.755,164,2.055,165,1.394,236,4.43,246,1.399,286,1.853,314,0.993,398,2.859,404,2.072,498,4.697,545,2.072,547,2.272,548,2.272,549,3.045,550,2.072,551,2.272,559,2.072,562,3.609,563,3.609,579,3.045,612,2.072,613,2.072,625,2.54,649,2.072,656,3.731,658,3.045,659,2.272,660,3.731,661,4.328,662,5.13,663,4.328,664,4.328,665,2.54,666,2.946,667,2.946,668,2.946,669,2.946,670,2.946,671,2.946,672,2.946,673,4.328,674,2.946,675,2.946,676,2.946,677,2.946,678,2.946,679,2.946,680,2.946,681,2.946,682,4.328,683,2.946,684,2.946,685,2.272,686,4.328,687,2.946,688,5.654,689,2.946,690,2.902,691,2.54,692,2.946,693,2.54,694,2.946,695,2.946,696,2.946,697,2.946,698,2.54,699,2.946,700,2.946,701,2.946,702,2.946,703,2.946,704,2.946,705,2.946,706,2.946,707,2.946,708,4.328,709,2.54,710,2.946,711,2.946,712,2.946,713,2.946,714,2.946,715,2.946,716,2.946,717,5.13,718,2.946,719,2.946,720,2.946,721,2.946,722,2.946,723,2.946,724,5.654,725,2.54,726,2.946,727,5.654,728,5.654,729,5.654,730,2.946,731,5.13,732,3.731,733,2.946,734,5.13,735,6.297,736,4.328,737,5.654,738,2.946,739,4.328,740,2.946,741,2.946,742,4.328,743,2.946,744,4.328,745,2.946,746,2.946,747,2.946,748,2.946,749,2.946,750,2.946,751,2.946,752,2.946]],["title/modules/ImagesModule.html",[29,0.807,44,1.997]],["body/modules/ImagesModule.html",[2,1.857,3,0.146,4,0.146,5,0.183,11,0.018,16,0.577,17,0.736,20,0.17,21,0.296,26,0.011,27,0.013,28,0.011,29,1.491,31,1.856,32,1.856,33,2.048,34,2.048,35,1.856,36,2.825,37,2.825,44,4.075,48,2.829,51,2.581,52,1.949,53,1.856,55,2.716,61,2.273,603,4.811,612,3.368,613,3.368,614,4.653,615,3.368,658,4.646,690,4.356,691,4.127,753,4.127,754,4.787,755,4.127,756,4.127,757,4.787,758,4.787,759,3.693,760,4.787,761,4.787,762,4.787,763,4.787,764,4.787,765,4.787,766,4.787,767,4.787,768,4.127]],["title/injectables/ImagesService.html",[70,0.807,690,2.124]],["body/injectables/ImagesService.html",[3,0.112,4,0.112,5,0.112,7,0.291,8,1.304,11,0.018,12,1.426,14,1.688,15,1.026,16,0.536,17,0.565,20,0.13,21,0.228,23,1.845,24,2.113,26,0.016,27,0.011,28,0.008,59,1.297,70,1.09,71,1.425,80,2.428,92,1.929,93,0.958,94,0.661,95,1.614,131,2.08,132,2.08,148,2.063,149,3.708,155,1.965,157,2.628,165,1.184,259,2.695,360,3.485,386,1.297,390,2.586,398,2.544,419,1.746,440,1.426,506,3.504,547,2.836,548,2.836,549,2.586,550,2.586,551,2.836,579,4.768,615,2.586,626,2.586,660,4.369,665,4.369,690,2.866,732,4.369,769,3.169,770,5.799,771,5.067,772,6.25,773,5.067,774,3.676,775,6.777,776,5.067,777,5.067,778,3.676,779,3.676,780,5.067,781,3.676,782,3.676,783,5.067,784,3.676,785,5.799,786,5.067,787,3.169,788,3.676,789,3.676,790,3.676,791,3.676,792,3.676,793,3.676,794,5.799,795,3.676,796,3.676,797,3.676,798,4.369,799,3.676,800,3.676,801,3.676,802,3.676,803,3.676,804,3.676,805,3.676]],["title/injectables/JwtStrategy.html",[70,0.807,211,2.438]],["body/injectables/JwtStrategy.html",[3,0.143,4,0.143,5,0.143,7,0.373,8,1.538,11,0.018,12,1.227,14,1.214,16,0.546,17,0.725,20,0.167,21,0.292,22,2.367,24,1.93,26,0.01,27,0.013,28,0.01,70,1.285,71,1.829,80,2.112,92,1.759,93,0.873,94,0.583,95,1.471,131,2.668,132,2.668,137,2.367,140,3.964,144,4.112,145,3.638,148,1.92,173,4.3,211,3.88,227,2.432,228,4.3,231,5.152,234,3.638,240,2.85,246,2.838,265,3.638,268,3.063,269,3.063,270,3.318,570,5.655,575,5.945,580,4.066,581,4.066,582,3.638,584,2.124,585,4.066,586,4.066,806,4.066,807,4.717,808,4.717,809,5.976,810,6.896,811,4.717,812,4.717,813,3.063,814,4.717,815,4.717,816,4.717,817,3.638,818,4.717]],["title/injectables/LoggingInterceptor.html",[70,0.807,819,2.642]],["body/injectables/LoggingInterceptor.html",[3,0.153,4,0.153,5,0.153,7,0.398,8,1.602,11,0.018,12,1.034,14,1.296,16,0.535,17,0.774,20,0.178,21,0.311,24,1.481,26,0.011,27,0.014,28,0.011,70,1.338,71,1.952,92,1.481,93,0.735,94,0.491,95,1.239,100,2.39,155,2.737,617,3.882,619,3.31,651,4.801,819,4.378,820,4.339,821,6.224,822,6.224,823,7.058,824,7.058,825,7.058,826,5.033,827,5.033,828,6.756,829,3.882,830,6.224,831,4.339,832,6.224,833,5.033,834,5.033,835,4.801,836,5.033,837,5.033,838,5.033,839,5.033,840,5.033,841,5.033,842,5.033,843,5.033]],["title/interfaces/LoginDto.html",[117,2.642,844,0.736]],["body/interfaces/LoginDto.html",[3,0.174,4,0.174,5,0.174,7,0.454,11,0.017,15,1.056,20,0.203,26,0.013,27,0.015,28,0.013,94,0.657,96,2.727,106,3.701,117,4.737,440,1.895,844,1.124,845,2.12,846,4.944]],["title/injectables/NotificationService.html",[70,0.807,847,2.124]],["body/injectables/NotificationService.html",[3,0.034,4,0.034,5,0.034,7,0.088,8,0.504,11,0.018,12,1.126,14,1.63,15,1.001,16,0.155,17,0.171,20,0.039,21,0.069,24,1.748,26,0.002,27,0.004,28,0.002,29,0.239,53,1.224,70,0.421,71,0.431,73,0.782,75,1.271,80,2.223,92,1.57,93,0.78,94,0.611,95,1.314,108,3.392,130,1.482,148,1.067,155,0.759,156,4.033,157,2.738,165,1.016,167,1.754,173,1.182,202,2.049,227,2.032,228,3.741,234,2.434,240,3.016,241,2.259,242,2.259,243,2.42,246,3.318,268,2.779,269,2.779,270,0.782,284,2.095,300,0.796,308,3.36,314,2.293,324,2.259,398,2.231,419,2.903,424,3.679,426,2.528,446,3.502,449,1.536,493,4.33,495,0.959,497,2.259,514,2.721,527,1.907,587,0.858,626,4.356,759,2.021,835,2.021,847,1.107,848,0.858,849,2.621,850,1.377,851,1.957,852,1.687,853,1.377,854,1.377,855,1.377,856,1.687,857,1.957,858,1.957,859,1.687,860,1.957,861,1.112,862,1.112,863,2.625,864,2.42,865,3.156,866,1.107,867,1.112,868,3.156,869,2.259,870,1.112,871,1.182,872,1.112,873,1.957,874,3.156,875,2.752,876,5.613,877,3.644,878,1.112,879,3.966,880,4.55,881,1.957,882,4.55,883,1.112,884,3.156,885,3.156,886,1.957,887,3.048,888,1.112,889,1.957,890,1.112,891,1.957,892,1.112,893,1.957,894,4.55,895,6.988,896,1.112,897,1.957,898,1.112,899,5.174,900,3.156,901,1.957,902,1.957,903,3.156,904,5.336,905,1.957,906,2.434,907,1.112,908,2.621,909,1.957,910,1.957,911,1.112,912,1.957,913,1.112,914,1.687,915,0.959,916,0.672,917,0.959,918,0.959,919,0.959,920,0.959,921,0.959,922,0.959,923,0.959,924,0.959,925,0.959,926,0.959,927,0.959,928,0.959,929,0.959,930,0.959,931,0.959,932,0.959,933,0.959,934,0.959,935,0.959,936,0.959,937,0.959,938,0.959,939,1.112,940,2.621,941,1.112,942,1.112,943,1.957,944,1.112,945,1.112,946,1.112,947,1.112,948,1.112,949,1.112,950,1.112,951,1.112,952,1.957,953,1.687,954,1.112,955,2.621,956,1.112,957,1.112,958,1.112,959,1.112,960,1.112,961,3.156,962,3.156,963,3.156,964,3.201,965,1.957,966,1.957,967,1.957,968,1.957,969,1.957,970,1.957,971,1.957,972,1.957,973,3.156,974,2.621,975,3.156,976,3.597,977,5.841,978,5.841,979,3.156,980,4.991,981,3.966,982,3.966,983,2.621,984,3.966,985,0.858,986,0.858,987,0.722,988,1.112,989,1.509,990,1.957,991,1.957,992,1.957,993,3.156,994,1.112,995,1.112,996,1.112,997,1.112,998,1.957,999,1.112,1000,1.112,1001,1.112,1002,3.966,1003,4.55,1004,4.55,1005,4.55,1006,5.732,1007,1.112,1008,1.687,1009,1.957,1010,1.687,1011,1.687,1012,1.957,1013,1.509,1014,1.957,1015,1.687,1016,1.957,1017,1.687,1018,1.957,1019,1.112,1020,1.112,1021,1.112,1022,1.112,1023,1.112,1024,1.112,1025,1.957,1026,3.156,1027,2.621,1028,3.156,1029,3.156,1030,6.192,1031,4.991,1032,3.366,1033,3.966,1034,4.785,1035,4.55,1036,1.957,1037,2.621,1038,1.112,1039,1.957,1040,1.957,1041,1.957,1042,1.377,1043,1.112,1044,1.112,1045,1.112,1046,1.112,1047,1.112,1048,1.112]],["title/interfaces/Payload.html",[140,2.269,844,0.736]],["body/interfaces/Payload.html",[3,0.158,4,0.158,5,0.158,7,0.411,11,0.017,15,1.089,20,0.184,26,0.012,27,0.014,28,0.012,94,0.726,95,1.899,96,2.639,140,3.836,171,4.313,255,2.767,266,6.153,440,1.786,449,2.109,844,1.019,845,1.922,1049,4.481,1050,5.505,1051,7.137]],["title/modules/PinsModule.html",[29,0.807,45,1.997]],["body/modules/PinsModule.html",[2,1.759,3,0.134,4,0.134,5,0.134,11,0.018,16,0.602,17,0.677,20,0.156,21,0.272,26,0.01,27,0.013,28,0.01,29,1.365,31,1.706,32,1.706,33,1.882,34,1.882,35,1.706,36,2.715,37,2.715,42,3.582,44,3.796,45,4.069,48,2.767,51,2.445,52,1.791,53,1.706,55,2.573,58,2.208,59,1.552,61,2.089,62,2.857,63,3.095,93,0.982,167,1.563,282,2.24,283,2.658,284,1.954,285,2.488,286,1.868,287,2.658,288,2.488,289,2.34,290,3.191,847,2.488,1052,3.793,1053,4.399,1054,3.793,1055,3.793,1056,5.871,1057,4.399,1058,5.472,1059,4.399,1060,4.399,1061,3.793]],["title/controllers/RecommendationController.html",[0,1.265,1062,2.642]],["body/controllers/RecommendationController.html",[0,1.067,2,0.605,3,0.06,4,0.06,5,0.06,7,0.155,8,0.815,10,3.034,11,0.018,12,1.384,14,1.734,15,1.012,16,0.361,17,0.302,20,0.07,21,0.122,22,0.986,24,1.983,26,0.004,27,0.007,28,0.004,80,2.453,92,1.983,93,0.984,94,0.618,95,1.659,100,3.503,108,1.188,128,1.276,129,3.212,130,1.112,133,1.112,134,1.112,135,3.853,136,1.188,137,0.986,157,2.612,164,3.199,165,2.169,183,4.071,246,0.933,300,2.8,310,2.342,447,2.962,449,2.218,527,3.649,628,1.276,685,1.516,698,5.464,864,3.623,871,2.404,877,3.535,887,3.287,1062,2.228,1063,1.694,1064,3.978,1065,3.167,1066,3.167,1067,3.978,1068,3.978,1069,3.167,1070,3.167,1071,3.978,1072,3.978,1073,3.167,1074,3.978,1075,3.167,1076,3.978,1077,3.978,1078,3.167,1079,1.965,1080,5.254,1081,1.965,1082,1.965,1083,1.965,1084,1.965,1085,1.965,1086,1.965,1087,1.965,1088,1.965,1089,1.965,1090,5.043,1091,1.965,1092,1.965,1093,1.965,1094,3.853,1095,1.965,1096,1.965,1097,1.965,1098,1.965,1099,1.965,1100,1.965,1101,1.965,1102,1.965,1103,1.965,1104,1.965,1105,1.965,1106,1.965,1107,1.965,1108,1.965,1109,1.965,1110,6.458,1111,1.965,1112,1.965,1113,1.965,1114,1.965,1115,1.965,1116,1.965,1117,1.965,1118,1.965,1119,1.965,1120,1.965,1121,1.965,1122,1.965,1123,1.965,1124,1.965,1125,1.965,1126,1.965,1127,1.965,1128,1.965,1129,1.694,1130,1.516,1131,1.965,1132,1.694,1133,2.798,1134,1.694,1135,1.965,1136,1.965,1137,1.965,1138,4.543,1139,5.347,1140,1.965,1141,1.965,1142,3.209,1143,3.209,1144,1.965,1145,1.965,1146,1.965,1147,3.167,1148,1.965,1149,1.965,1150,1.965,1151,1.965,1152,4.562,1153,1.965,1154,1.965,1155,3.167,1156,1.965,1157,1.965,1158,1.965,1159,1.965,1160,1.965,1161,1.965,1162,1.965,1163,1.965,1164,1.965,1165,1.965,1166,1.965,1167,1.965,1168,1.965,1169,1.965,1170,1.965,1171,1.965,1172,1.965,1173,1.965,1174,1.965,1175,3.978,1176,1.965,1177,1.965,1178,1.965,1179,1.965,1180,1.965,1181,1.965]],["title/modules/RecommendationModule.html",[29,0.807,46,2.438]],["body/modules/RecommendationModule.html",[2,1.791,3,0.138,4,0.138,5,0.138,11,0.018,16,0.605,17,0.696,20,0.16,21,0.28,26,0.01,27,0.013,28,0.01,29,1.383,31,1.754,32,1.754,33,1.935,34,1.935,35,1.754,36,2.752,37,2.752,42,2.27,45,2.406,46,4.86,48,2.788,51,2.489,52,1.841,53,1.754,55,2.62,57,3.183,58,2.27,59,1.596,61,2.148,62,2.938,93,0.992,167,1.584,282,2.27,283,2.734,284,1.98,285,2.559,286,1.893,287,2.734,288,2.559,289,2.406,290,3.224,847,2.559,1061,3.9,1062,4.525,1133,5.376,1134,3.9,1182,3.9,1183,4.524,1184,3.9,1185,3.9,1186,4.524,1187,4.524]],["title/interfaces/RegisterDto.html",[125,2.642,844,0.736]],["body/interfaces/RegisterDto.html",[3,0.141,4,0.141,5,0.141,7,0.368,11,0.017,15,1.105,20,0.165,26,0.01,27,0.013,28,0.01,94,0.748,95,1.904,96,2.536,106,3.442,125,4.165,175,3.648,254,5.914,255,2.66,256,2.792,258,5.914,310,2.526,440,1.666,844,0.911,845,1.718,1050,5.291,1188,4.007,1189,5.914,1190,4.825,1191,5.914,1192,4.825]],["title/controllers/SearchController.html",[0,1.265,1193,2.642]],["body/controllers/SearchController.html",[0,1.028,2,0.939,3,0.093,4,0.093,5,0.093,7,0.241,8,1.143,10,2.871,11,0.018,12,1.309,14,1.641,15,0.992,16,0.414,17,0.469,20,0.108,21,0.189,22,1.531,24,2.106,26,0.007,27,0.01,28,0.007,80,2.402,92,1.876,93,1.116,94,0.561,95,1.57,100,3.398,129,3.5,133,1.726,134,1.726,135,3.722,136,1.844,137,1.531,157,2.708,165,2.053,183,3.853,300,2.595,310,2.774,449,2.346,864,3.926,871,3.164,887,2.871,1094,4.175,1138,4.298,1142,4.045,1143,4.045,1193,3.124,1194,2.631,1195,3.052,1196,2.147,1197,4.514,1198,4.514,1199,4.514,1200,4.514,1201,4.514,1202,4.514,1203,3.052,1204,5.33,1205,3.052,1206,3.052,1207,3.052,1208,3.052,1209,3.052,1210,3.052,1211,3.052,1212,3.052,1213,3.052,1214,3.052,1215,3.052,1216,3.052,1217,3.052,1218,3.052,1219,3.052,1220,3.052,1221,3.052,1222,3.164,1223,2.631,1224,3.052,1225,3.052,1226,6.11,1227,5.75,1228,5.75,1229,3.052,1230,3.052,1231,3.052,1232,3.052,1233,5.235,1234,3.052,1235,3.052,1236,3.052,1237,3.052,1238,3.052,1239,3.052,1240,3.052]],["title/modules/SearchModule.html",[29,0.807,47,2.438]],["body/modules/SearchModule.html",[2,1.816,3,0.141,4,0.141,5,0.141,11,0.018,16,0.609,17,0.711,20,0.164,21,0.286,26,0.01,27,0.013,28,0.01,29,1.397,31,1.792,32,1.792,33,1.977,34,1.977,35,1.792,36,2.78,37,1.977,42,2.32,44,2.459,45,2.459,47,4.832,48,2.804,50,2.459,51,2.524,52,1.881,53,1.792,55,2.657,57,3.252,58,2.32,59,1.631,61,2.195,62,3.002,63,3.252,65,3.985,93,0.949,167,1.6,282,2.293,283,2.793,284,2,285,2.615,288,2.615,289,2.459,290,3.086,1193,4.571,1196,4.15,1222,4.37,1223,3.985,1241,3.985,1242,4.623,1243,3.985,1244,4.623,1245,4.623,1246,3.566]],["title/injectables/SearchService.html",[70,0.807,1222,2.269]],["body/injectables/SearchService.html",[3,0.078,4,0.078,5,0.078,7,0.202,8,1.001,11,0.018,12,1.346,14,1.647,15,0.653,16,0.506,17,0.393,20,0.09,21,0.158,23,2.364,24,1.968,26,0.012,27,0.009,28,0.009,59,0.901,70,0.836,71,0.99,80,2.405,92,1.929,93,1.112,94,0.459,95,1.614,113,1.97,148,1.583,149,2.979,155,0.99,157,2.78,164,1.213,165,1.252,167,1.395,171,1.543,175,1.358,227,1.583,243,1.358,255,1.508,256,1.583,259,1.358,282,1.662,284,1.45,286,1.144,300,2.307,357,4.414,360,3.115,362,3.313,382,1.97,386,1.372,387,1.658,388,1.796,390,1.796,392,1.796,397,1.97,398,1.039,404,3.313,419,2.5,423,2.202,424,3.946,425,2.2,426,1.15,427,1.97,444,3.182,446,2.979,449,1.838,506,1.543,550,1.796,864,3.907,871,2.35,887,1.15,916,3.182,964,1.796,1032,1.796,1094,4.156,1196,3.313,1197,3.353,1198,3.353,1199,3.353,1200,3.353,1201,3.353,1202,3.353,1204,3.705,1222,2.35,1246,3.633,1247,2.202,1248,3.889,1249,2.554,1250,3.633,1251,2.554,1252,3.889,1253,3.889,1254,2.554,1255,3.889,1256,2.554,1257,3.889,1258,2.554,1259,3.889,1260,2.554,1261,3.889,1262,2.554,1263,3.889,1264,2.554,1265,3.889,1266,2.554,1267,3.889,1268,2.554,1269,2.554,1270,2.554,1271,1.97,1272,2.554,1273,1.97,1274,2.554,1275,2.554,1276,2.554,1277,2.554,1278,3.889,1279,2.202,1280,2.554,1281,2.554,1282,2.554,1283,3.889,1284,3.889,1285,3.889,1286,2.554,1287,2.554,1288,4.061,1289,2.554,1290,2.202,1291,2.554,1292,2.202,1293,5.266,1294,2.554,1295,2.554,1296,2.202,1297,2.202,1298,2.554,1299,2.554,1300,3.353,1301,3,1302,2.2,1303,3.889,1304,2.554,1305,2.554,1306,2.554,1307,2.554,1308,2.554,1309,2.554,1310,2.554,1311,2.554,1312,2.554,1313,3.889,1314,2.554,1315,2.554,1316,2.554,1317,3.889,1318,2.554,1319,2.554,1320,3.889,1321,2.202,1322,2.554,1323,2.736,1324,1.796,1325,1.444]],["title/classes/SharedGateway.html",[21,0.232,1326,2.642]],["body/classes/SharedGateway.html",[3,0.065,4,0.065,5,0.065,7,0.168,8,0.869,10,2.919,11,0.018,12,1.355,14,1.669,16,0.491,20,0.075,21,0.132,23,1.693,26,0.005,27,0.007,28,0.005,59,0.751,80,2.405,92,1.941,93,0.964,94,0.661,95,1.624,138,1.132,139,1.497,148,1.373,149,2.372,155,2.25,156,5.282,157,2.769,162,3.615,167,1.281,173,2.534,175,1.795,176,1.834,197,1.641,255,1.308,256,1.373,257,1.834,259,1.795,265,3.235,284,1.291,300,1.707,302,4.027,307,4.014,308,1.381,314,1.413,317,2.946,350,2.909,354,2.909,357,3.769,362,2.95,364,5.346,386,0.751,387,1.381,388,1.497,392,1.497,400,0.91,419,1.01,424,3.835,425,1.203,437,1.132,498,1.497,813,1.381,835,1.641,856,2.909,875,1.795,877,1.286,1008,1.834,1010,1.834,1011,1.834,1013,1.641,1015,1.834,1017,1.834,1032,1.497,1250,3.235,1271,1.641,1273,1.641,1321,3.615,1326,2.374,1327,1.641,1328,3.374,1329,3.374,1330,3.374,1331,1.909,1332,3.374,1333,2.127,1334,2.127,1335,2.127,1336,7.648,1337,2.127,1338,2.127,1339,3.374,1340,3.374,1341,2.127,1342,3.374,1343,3.374,1344,2.127,1345,3.374,1346,3.374,1347,2.127,1348,2.127,1349,2.127,1350,2.127,1351,3.374,1352,3.374,1353,2.127,1354,3.374,1355,3.374,1356,2.127,1357,3.374,1358,3.374,1359,2.127,1360,3.374,1361,3.374,1362,2.127,1363,3.374,1364,3.374,1365,2.127,1366,3.374,1367,3.374,1368,2.127,1369,2.127,1370,3.374,1371,1.834,1372,1.834,1373,1.834,1374,2.127,1375,1.834,1376,4.194,1377,4.194,1378,4.194,1379,1.641,1380,2.127,1381,3.374,1382,2.127,1383,2.127,1384,6.021,1385,6.021,1386,4.773,1387,4.773,1388,6.021,1389,4.773,1390,2.127,1391,2.127,1392,4.773,1393,4.773,1394,4.773,1395,4.773,1396,4.773,1397,4.773,1398,4.773,1399,4.773,1400,4.773,1401,4.773,1402,4.773,1403,2.127,1404,2.127,1405,2.127,1406,2.127,1407,2.127,1408,2.127,1409,2.127,1410,2.127,1411,4.773,1412,2.127,1413,2.127,1414,2.127,1415,2.127,1416,3.374,1417,1.132,1418,2.127,1419,1.834,1420,5.538,1421,2.127,1422,2.127,1423,1.381,1424,2.127,1425,2.127,1426,1.381,1427,2.127,1428,2.127,1429,1.381,1430,2.127,1431,2.127,1432,1.381,1433,2.127,1434,2.127,1435,1.381,1436,2.127,1437,2.127,1438,1.286]],["title/modules/SharedModule.html",[29,0.807,48,1.456]],["body/modules/SharedModule.html",[3,0.121,4,0.121,5,0.121,11,0.018,16,0.605,17,0.612,20,0.141,21,0.246,26,0.009,27,0.012,28,0.009,29,1.299,31,1.543,32,1.543,33,1.703,34,1.703,35,1.543,36,2.584,37,2.584,48,2.954,51,2.288,52,1.62,53,1.543,55,1.792,58,1.998,59,1.405,93,1.014,96,2.772,147,3.07,167,1.487,282,2.132,283,2.405,284,1.859,285,2.252,286,1.778,287,2.405,288,2.252,289,2.117,290,3.295,314,2.036,317,3.691,346,3.213,348,3.07,360,3.762,493,3.07,628,3.473,768,4.612,819,3.763,847,4.241,1132,3.432,1326,3.763,1373,3.432,1439,3.432,1440,3.432,1441,3.432,1442,3.98,1443,5.349,1444,5.349,1445,3.432,1446,3.98,1447,3.98,1448,3.98,1449,3.98,1450,3.98,1451,3.432,1452,5.349]],["title/controllers/TopicController.html",[0,1.265,1453,2.642]],["body/controllers/TopicController.html",[0,1.318,2,0.791,3,0.078,4,0.078,5,0.078,7,0.203,8,1.006,10,3.066,11,0.018,12,1.398,14,1.753,15,1.024,16,0.418,17,0.396,20,0.091,21,0.159,22,1.291,24,2.127,26,0.006,27,0.009,28,0.006,80,2.463,92,2.004,93,1.04,94,0.584,95,1.676,100,3.433,108,1.554,128,1.67,129,3.024,130,1.455,133,1.455,134,1.455,135,2.989,136,1.554,137,1.291,157,2.64,164,1.857,165,2.115,183,3.969,227,2.151,236,1.809,246,1.221,259,1.368,284,1.203,286,2.127,300,1.925,314,0.867,338,2.217,419,1.221,426,2.13,441,2.811,442,2.811,447,3.072,449,2.125,506,1.554,527,2.858,626,3.328,685,4.385,690,1.455,863,2.673,864,2.811,869,2.217,877,2.858,887,2.38,916,3.618,953,2.217,1094,2.989,1130,1.984,1138,2.751,1142,1.809,1143,1.809,1453,2.751,1454,2.217,1455,3.91,1456,4.73,1457,3.371,1458,4.078,1459,4.73,1460,2.751,1461,3.371,1462,4.73,1463,3.91,1464,3.371,1465,3.371,1466,2.572,1467,3.91,1468,2.572,1469,5.952,1470,2.572,1471,2.572,1472,2.572,1473,2.572,1474,2.217,1475,5.987,1476,2.572,1477,2.217,1478,2.572,1479,2.572,1480,2.572,1481,3.91,1482,2.572,1483,2.572,1484,2.217,1485,2.572,1486,2.572,1487,2.217,1488,2.572,1489,2.572,1490,5.365,1491,2.572,1492,2.572,1493,2.572,1494,2.572,1495,2.572,1496,2.572,1497,2.572,1498,2.572,1499,2.572,1500,2.217,1501,2.572,1502,2.572,1503,2.858,1504,2.217,1505,2.572,1506,2.572,1507,2.572,1508,4.73,1509,2.572,1510,2.572,1511,3.91,1512,2.572,1513,2.572,1514,2.572,1515,2.572,1516,2.572,1517,2.572,1518,2.572,1519,2.572,1520,2.572,1521,2.572,1522,2.572,1523,2.572,1524,2.572,1525,2.572,1526,2.572,1527,3.91,1528,2.572,1529,2.572,1530,2.572,1531,2.217,1532,2.572,1533,2.572,1534,4.73,1535,3.371,1536,2.217,1537,2.572,1538,2.572,1539,2.217,1540,2.217,1541,2.572,1542,2.572,1543,2.217,1544,2.572,1545,2.572]],["title/modules/TopicModule.html",[29,0.807,49,2.438]],["body/modules/TopicModule.html",[2,1.81,3,0.14,4,0.14,5,0.14,11,0.018,16,0.606,17,0.707,20,0.163,21,0.285,26,0.01,27,0.013,28,0.01,29,1.394,31,1.783,32,1.783,33,1.967,34,1.967,35,1.783,36,2.773,37,1.967,42,2.307,44,2.445,45,2.445,48,2.8,49,4.914,50,3.841,51,2.515,52,1.871,53,1.783,55,2.647,57,3.234,58,2.307,59,1.622,61,2.183,62,2.985,63,3.234,93,0.947,167,1.596,216,3.964,284,1.995,285,2.601,286,1.907,287,2.778,288,2.601,289,2.445,290,3.078,1453,4.56,1503,4.364,1504,3.964,1546,3.964,1547,4.598,1548,3.964,1549,4.598,1550,4.598]],["title/injectables/TopicService.html",[70,0.807,1503,2.269]],["body/injectables/TopicService.html",[3,0.06,4,0.06,5,0.06,7,0.157,8,0.823,11,0.018,12,1.33,14,1.739,15,0.783,16,0.465,17,0.306,20,0.07,21,0.123,23,2.012,24,2.01,26,0.004,27,0.007,28,0.004,59,0.702,70,0.687,71,0.771,80,2.379,92,1.906,93,1.024,94,0.194,95,1.595,131,1.125,132,3.323,135,2.268,138,3.005,139,1.399,148,1.301,149,2.846,155,2.191,157,2.737,164,3.328,165,2.257,167,1.725,169,2.756,170,2.756,171,1.201,191,4.146,227,2.533,228,1.932,240,2.775,246,2.683,259,1.057,268,2.982,269,2.982,284,1.549,286,2.181,300,2.679,310,0.771,357,4.041,360,2.835,362,2.82,386,1.776,387,1.291,390,1.399,392,1.399,397,2.466,398,2.965,404,1.399,419,2.181,424,3.664,426,2.068,427,3.092,441,1.7,442,1.7,447,2.982,449,0.984,498,1.399,506,1.201,525,2.756,527,3.248,579,3.781,817,4.677,863,0.809,864,2.443,877,2.423,887,2.068,1032,2.249,1094,2.598,1250,3.092,1271,1.534,1273,1.534,1279,1.714,1288,2.756,1290,2.756,1292,2.756,1296,1.714,1297,1.714,1300,1.714,1301,1.534,1302,3.04,1457,2.756,1458,2.756,1460,2.82,1461,2.756,1464,2.756,1465,2.756,1469,3.456,1477,1.714,1490,6.085,1503,1.932,1539,1.714,1551,1.714,1552,3.197,1553,3.197,1554,3.197,1555,3.197,1556,3.197,1557,1.988,1558,1.988,1559,3.197,1560,3.197,1561,1.988,1562,3.197,1563,1.988,1564,1.988,1565,1.988,1566,1.988,1567,3.197,1568,1.988,1569,3.092,1570,3.197,1571,1.988,1572,3.197,1573,1.988,1574,1.988,1575,1.988,1576,3.197,1577,1.988,1578,3.197,1579,1.988,1580,3.197,1581,1.988,1582,1.988,1583,1.988,1584,5.032,1585,3.197,1586,1.988,1587,3.197,1588,3.197,1589,1.988,1590,4.009,1591,1.988,1592,1.988,1593,1.988,1594,1.988,1595,1.988,1596,1.988,1597,1.988,1598,1.988,1599,1.988,1600,1.988,1601,4.009,1602,3.197,1603,1.988,1604,1.988,1605,1.988,1606,1.988,1607,4.009,1608,4.009,1609,4.009,1610,4.009,1611,4.592,1612,1.988,1613,3.197,1614,1.988,1615,3.959,1616,1.988,1617,1.988,1618,1.988,1619,4.009,1620,1.988,1621,4.009,1622,3.197,1623,1.988,1624,1.988,1625,1.988,1626,1.714,1627,1.988,1628,4.009,1629,1.988,1630,1.988,1631,1.988,1632,1.988,1633,1.988]],["title/interfaces/UpdateDto.html",[844,0.736,1634,2.642]],["body/interfaces/UpdateDto.html",[3,0.136,4,0.136,5,0.136,7,0.354,11,0.017,15,1.105,20,0.158,26,0.01,27,0.013,28,0.01,94,0.748,95,1.945,96,2.499,106,3.392,175,3.595,255,2.621,256,2.751,400,2.736,425,3.823,440,1.625,844,0.876,845,1.652,1050,5.214,1189,5.827,1190,4.755,1191,5.827,1192,4.755,1634,4.061,1635,3.447,1636,3.853,1637,5.214,1638,5.214]],["title/interfaces/UpdateSettingsDto.html",[844,0.736,1639,2.642]],["body/interfaces/UpdateSettingsDto.html",[3,0.134,4,0.134,5,0.134,7,0.348,11,0.017,20,0.156,26,0.01,27,0.013,28,0.01,94,0.749,95,1.948,167,1.083,243,3.574,310,3.093,440,1.608,844,0.863,845,1.627,850,4.727,853,4.727,854,4.727,855,4.727,987,4.363,1042,4.727,1635,3.393,1639,4.02,1640,3.793,1641,5.183,1642,5.183,1643,6.719,1644,5.183,1645,5.183,1646,5.183,1647,5.183]],["title/controllers/UserController.html",[0,1.265,1648,2.642]],["body/controllers/UserController.html",[0,1.026,2,0.576,3,0.057,4,0.057,5,0.057,7,0.148,8,0.784,10,3.094,11,0.018,12,1.411,14,1.769,15,0.883,16,0.414,17,0.288,20,0.066,21,0.116,22,0.94,24,1.935,26,0.004,27,0.007,28,0.004,53,1.181,80,2.471,84,3.823,92,2.022,93,1.004,94,0.657,95,1.692,96,2.196,100,3.557,106,1.529,108,2.326,121,1.615,129,3.498,130,1.059,131,1.059,132,3.118,133,1.059,134,1.059,136,1.132,137,0.94,138,2.048,146,1.615,147,1.445,149,1.059,155,2.513,157,2.8,164,2.899,165,1.966,167,1.741,173,1.132,180,1.615,183,4.114,190,1.615,191,3.764,200,3.319,202,2.5,205,1.615,206,2.626,236,1.318,246,2.106,259,1.62,310,1.493,406,1.445,419,0.889,449,2.201,506,1.132,527,2.68,817,2.349,852,2.626,859,2.626,864,3.585,916,4.073,987,1.216,1094,3.812,1129,1.615,1130,1.445,1138,3.12,1142,3.12,1143,3.12,1474,1.615,1484,1.615,1487,1.615,1500,1.615,1531,1.615,1535,2.626,1536,1.615,1540,1.615,1543,1.615,1615,1.615,1634,3.12,1639,3.12,1648,2.143,1649,1.615,1650,3.85,1651,3.85,1652,3.85,1653,3.85,1654,3.046,1655,3.046,1656,3.85,1657,3.85,1658,3.046,1659,3.046,1660,3.85,1661,3.046,1662,3.85,1663,3.85,1664,3.85,1665,1.873,1666,5.23,1667,1.873,1668,1.873,1669,1.873,1670,3.046,1671,1.873,1672,1.873,1673,1.873,1674,1.873,1675,1.873,1676,1.873,1677,1.873,1678,1.873,1679,1.873,1680,1.873,1681,1.873,1682,1.873,1683,3.046,1684,1.873,1685,1.873,1686,1.873,1687,1.873,1688,1.873,1689,1.873,1690,1.873,1691,1.873,1692,1.873,1693,1.873,1694,1.873,1695,1.873,1696,1.873,1697,1.873,1698,1.873,1699,1.873,1700,4.435,1701,5.512,1702,1.873,1703,1.873,1704,1.873,1705,1.873,1706,1.873,1707,1.873,1708,3.421,1709,1.873,1710,1.873,1711,1.873,1712,1.873,1713,1.873,1714,5.744,1715,3.046,1716,1.873,1717,1.873,1718,3.046,1719,1.873,1720,1.615,1721,3.046,1722,1.873,1723,1.873,1724,1.873,1725,1.873,1726,1.873,1727,1.873,1728,1.873,1729,1.873,1730,1.873,1731,1.873,1732,1.873,1733,1.873,1734,1.873,1735,1.873,1736,1.873,1737,1.873,1738,3.046,1739,1.873,1740,1.873,1741,1.873,1742,1.873,1743,1.873,1744,1.873,1745,1.873,1746,3.046,1747,4.435,1748,1.873,1749,3.046,1750,1.873,1751,1.873,1752,1.873,1753,1.873,1754,1.873,1755,1.873,1756,1.873,1757,5.512,1758,1.873,1759,1.873,1760,3.046,1761,1.873,1762,1.873,1763,1.873,1764,1.873,1765,1.873,1766,1.873,1767,1.873,1768,1.873,1769,3.85,1770,1.873,1771,1.873,1772,1.873,1773,1.873,1774,3.046,1775,1.873,1776,1.873,1777,1.873,1778,1.873,1779,1.873,1780,1.873,1781,1.873,1782,1.873,1783,1.873,1784,1.873,1785,1.873]],["title/modules/UserModule.html",[29,0.807,50,1.997]],["body/modules/UserModule.html",[2,1.775,3,0.136,4,0.136,5,0.136,11,0.018,16,0.6,17,0.686,20,0.158,21,0.276,26,0.01,27,0.013,28,0.01,29,1.374,31,1.73,32,1.73,33,1.908,34,1.908,35,1.73,36,2.733,37,2.733,48,2.778,50,3.971,51,2.467,52,1.816,53,1.73,55,2.597,58,2.239,59,1.574,61,2.118,93,1.047,138,4.056,167,1.573,282,2.255,283,2.696,284,1.967,285,2.523,286,1.88,287,2.696,289,2.373,290,3.402,314,2.153,346,3.398,348,3.441,1451,3.846,1648,4.495,1720,3.846,1786,3.846,1787,4.461,1788,3.846,1789,3.846,1790,4.461,1791,4.461,1792,4.461]],["title/injectables/ValidationService.html",[70,0.807,360,1.884]],["body/injectables/ValidationService.html",[3,0.143,4,0.143,5,0.143,7,0.372,8,1.537,11,0.018,12,1.346,14,1.537,15,0.908,16,0.545,17,0.724,20,0.167,21,0.291,24,1.757,26,0.01,27,0.013,28,0.01,59,1.661,70,1.283,71,1.825,80,2.11,92,1.757,93,0.872,94,0.459,95,1.469,148,2.668,155,1.825,167,1.159,228,3.96,322,4.604,357,3.057,360,2.995,386,1.661,387,3.057,388,3.312,398,2.429,419,3.272,424,2.663,449,2.236,798,4.059,864,3.175,1094,4.11,1793,3.631,1794,5.969,1795,6.554,1796,4.708,1797,5.969,1798,4.708,1799,4.708,1800,6.554,1801,4.708,1802,3.631,1803,4.059,1804,4.708,1805,4.708,1806,4.059,1807,4.708,1808,4.708,1809,4.708]],["title/interfaces/board.html",[282,1.325,844,0.736]],["body/interfaces/board.html",[3,0.121,4,0.121,5,0.121,7,0.316,11,0.018,15,1.085,16,0.424,20,0.19,26,0.009,27,0.012,28,0.009,93,0.945,94,0.759,227,2.632,255,1.548,256,1.625,282,1.891,286,1.903,310,2.693,386,2.135,398,1.625,400,2.589,440,1.509,445,2.004,449,1.862,462,4.55,463,4.2,464,4.55,584,2.725,619,3.44,642,4.55,844,1.051,845,1.476,863,3.161,866,3.658,887,3.128,1302,3.816,1323,4.55,1324,4.746,1325,3.658,1417,3.44,1810,3.08,1811,3.246,1812,4.989,1813,3.658,1814,4.55,1815,3.816,1816,3.08,1817,3.08,1818,2.851,1819,2.413,1820,3.08]],["title/interfaces/chat.html",[346,1.997,844,0.736]],["body/interfaces/chat.html",[3,0.16,4,0.16,5,0.16,7,0.416,11,0.017,15,1.018,16,0.506,20,0.186,26,0.012,27,0.014,28,0.012,93,1.047,94,0.728,300,2.142,314,1.773,346,3.401,386,2.431,400,3.287,403,5.529,407,5.529,440,1.8,584,2.88,844,1.032,845,1.945,863,2.804,866,3.618,1811,3.458,1821,4.536]],["title/interfaces/comment.html",[844,0.736,875,1.997]],["body/interfaces/comment.html",[3,0.135,4,0.135,5,0.135,7,0.351,11,0.017,15,1.056,16,0.455,20,0.226,26,0.01,27,0.013,28,0.01,94,0.71,255,1.721,256,1.806,282,1.566,284,1.366,286,1.306,386,2.249,398,1.806,400,3.218,426,1.998,440,1.617,441,2.36,442,2.36,444,2.681,445,2.227,446,2.51,449,2.315,584,3.036,619,2.36,844,1.25,845,1.641,863,3.036,866,3.251,875,3.805,1325,2.51,1331,3.251,1417,3.39,1423,2.882,1426,2.882,1429,2.882,1432,2.882,1435,2.882,1438,3.473,1811,3.504,1813,2.51,1815,2.51,1818,3.925,1819,2.681,1822,3.122,1823,4.743,1824,4.534,1825,4.743,1826,3.122,1827,4.043,1828,3.122,1829,3.122,1830,3.122]],["title/coverage.html",[1831,3.966]],["body/coverage.html",[0,2.34,1,2.092,3,0.09,5,0.09,6,2.563,11,0.018,18,1.797,21,0.404,26,0.007,27,0.01,28,0.007,35,1.153,70,1.59,72,2.563,75,1.931,78,2.092,79,2.563,94,0.29,96,1.099,117,2.092,125,2.092,138,1.581,140,1.797,144,1.682,165,0.957,167,1.398,210,1.931,211,1.931,217,2.563,270,2.092,277,2.293,279,2.563,282,1.538,284,1.341,286,1.282,290,3,291,2.092,292,2.563,314,1.468,317,1.581,346,2.318,349,2.563,360,1.492,419,3.776,436,2.293,438,2.563,439,2.563,445,1.492,458,2.293,459,3.361,460,2.563,461,2.293,472,2.293,473,2.563,487,2.563,488,2.563,543,2.092,544,3.361,545,3.065,546,2.563,562,2.092,563,2.092,564,2.563,569,2.563,603,1.931,604,2.563,605,2.563,628,1.931,629,2.563,630,2.563,649,2.092,658,2.092,659,3.361,690,1.682,769,2.563,806,2.563,813,1.931,819,2.092,820,2.563,829,2.293,844,1.421,846,2.563,847,1.682,848,3.978,875,1.581,916,1.797,1049,2.563,1056,2.293,1058,2.563,1062,2.092,1063,2.563,1133,2.092,1188,2.563,1193,2.092,1194,2.563,1222,1.797,1247,2.563,1326,2.092,1327,3.361,1331,1.682,1453,2.092,1454,2.563,1503,1.797,1551,2.563,1634,2.092,1635,3.361,1636,2.563,1639,2.092,1640,2.563,1648,2.092,1649,2.563,1793,3.361,1802,2.293,1810,3.361,1821,2.563,1822,3.628,1831,2.293,1832,2.973,1833,2.973,1834,2.973,1835,5.679,1836,5.158,1837,2.973,1838,2.973,1839,6.046,1840,5.158,1841,2.973,1842,6.046,1843,2.973,1844,2.973,1845,5.158,1846,5.158,1847,2.973,1848,5.679,1849,7.528,1850,7.554,1851,4.357,1852,4.381,1853,2.563,1854,2.563,1855,3.757,1856,3.757,1857,3.757,1858,3.757,1859,3.757,1860,3.757,1861,2.973,1862,2.973,1863,2.973,1864,2.973,1865,2.973,1866,5.158,1867,4.357,1868,2.973,1869,2.563,1870,2.973,1871,2.563,1872,2.973,1873,2.563,1874,2.973,1875,2.973,1876,2.973,1877,2.973,1878,2.563,1879,2.973,1880,2.973]],["title/dependencies.html",[32,1.753,1881,3.128]],["body/dependencies.html",[11,0.018,17,0.695,21,0.279,26,0.01,27,0.013,28,0.01,32,1.751,59,1.594,137,2.266,238,3.894,243,3.091,386,2.051,496,3.894,559,3.177,561,3.894,582,4.957,583,3.894,612,4.089,613,3.177,614,4.483,615,4.522,616,5.011,651,3.483,709,3.894,725,3.894,787,3.894,813,2.933,831,3.894,914,3.894,915,3.894,1196,4.774,1246,3.483,1371,3.894,1372,3.894,1445,3.894,1882,4.516,1883,4.516,1884,4.516,1885,5.812,1886,4.516,1887,4.516,1888,4.516,1889,4.516,1890,4.516,1891,6.427,1892,4.516,1893,5.812,1894,4.516,1895,5.812,1896,4.516,1897,4.516,1898,4.516,1899,4.516,1900,4.516,1901,4.516,1902,4.516,1903,4.516,1904,4.516,1905,4.516,1906,4.516,1907,4.516,1908,4.516,1909,4.516,1910,4.516,1911,4.516,1912,4.516,1913,4.516,1914,4.516,1915,4.516,1916,4.516,1917,4.516,1918,4.516,1919,4.516,1920,4.516,1921,4.516,1922,4.516,1923,5.812,1924,4.516,1925,4.516,1926,4.516,1927,4.516,1928,4.516,1929,4.516,1930,4.516,1931,4.516,1932,4.516,1933,4.516,1934,4.516,1935,4.516,1936,4.516,1937,4.516,1938,4.516,1939,4.516,1940,4.516,1941,4.516]],["title/miscellaneous/functions.html",[1942,2.2,1943,3.898]],["body/miscellaneous/functions.html",[7,0.48,11,0.015,26,0.013,27,0.015,28,0.013,35,2.835,1852,4.676,1942,4.265,1943,5.226,1944,5.226]],["title/index.html",[7,0.247,1945,3.128,1946,3.128]],["body/index.html",[4,0.153,11,0.017,26,0.011,27,0.014,28,0.011,75,3.262,227,2.045,240,3.035,517,4.331,655,4.331,759,3.875,1013,3.875,1301,3.875,1806,4.331,1815,2.841,1831,3.875,1947,5.023,1948,5.023,1949,6.216,1950,5.023,1951,5.023,1952,5.023,1953,5.023,1954,5.023,1955,5.023,1956,5.023,1957,6.75,1958,5.023,1959,5.023,1960,5.023,1961,5.023,1962,7.486,1963,5.023,1964,5.023,1965,7.385,1966,5.023,1967,6.216,1968,5.023,1969,5.023,1970,5.023,1971,5.023,1972,6.216,1973,6.216,1974,5.023,1975,5.023,1976,5.023,1977,6.216,1978,6.216,1979,5.023,1980,5.023,1981,5.023,1982,4.331,1983,5.023,1984,5.023,1985,5.023,1986,5.023,1987,5.023,1988,5.023,1989,5.023,1990,5.023,1991,5.023,1992,5.023,1993,5.023,1994,5.023,1995,5.023,1996,5.023,1997,5.023]],["title/interfaces/message.html",[314,1.265,844,0.736]],["body/interfaces/message.html",[3,0.158,4,0.158,5,0.158,7,0.412,11,0.017,15,1.063,16,0.412,20,0.184,26,0.012,27,0.014,28,0.012,94,0.727,302,4.638,314,2.511,386,1.838,400,3.227,411,5.509,421,5.509,422,5.509,440,1.789,584,2.862,844,1.021,845,1.926,863,3.032,1811,3.442,1869,4.49]],["title/modules.html",[31,1.994]],["body/modules.html",[11,0.014,26,0.012,27,0.014,28,0.012,30,3.828,31,2.11,41,3.533,42,2.731,43,3.533,44,2.894,45,2.894,46,3.533,47,3.533,48,2.11,49,3.533,50,2.894,1982,6.724,1998,7.799,1999,7.799,2000,7.799]],["title/overview.html",[2001,4.433]],["body/overview.html",[2,1.071,11,0.018,18,3.403,26,0.008,27,0.011,28,0.008,29,0.748,30,5.431,31,1.35,32,1.35,33,1.489,34,1.489,35,1.35,36,1.489,37,1.489,38,3.001,39,3.001,40,3.001,41,4.798,42,3.56,43,4.533,44,3.864,45,3.9,46,4.533,47,4.442,48,2.987,49,4.607,50,3.823,51,2.087,52,1.417,53,1.35,71,1.35,96,2.529,138,3.638,144,3.186,207,3.001,209,3.001,210,3.657,211,3.657,273,3.001,275,3.001,276,3.001,277,5.276,317,3.713,340,3.001,342,3.001,343,3.001,360,3.433,437,1.851,603,3.657,690,3.869,753,3.001,755,3.001,756,3.001,845,1.287,847,3.869,1052,3.001,1054,3.001,1055,3.001,1056,5.276,1133,4.812,1182,3.001,1184,3.001,1185,3.001,1222,3.403,1241,3.001,1243,3.001,1439,3.001,1440,3.001,1441,3.001,1503,3.403,1546,3.001,1548,3.001,1786,3.001,1788,3.001,1789,3.001,2001,3.001,2002,3.481,2003,3.481,2004,3.481,2005,3.481,2006,3.481]],["title/interfaces/pin.html",[284,1.156,844,0.736]],["body/interfaces/pin.html",[3,0.117,4,0.117,5,0.117,7,0.305,11,0.018,15,1.07,16,0.415,20,0.211,26,0.009,27,0.012,28,0.009,94,0.755,255,1.497,256,1.571,282,2.251,284,1.613,286,1.877,386,2.099,398,1.571,400,3.009,426,2.872,440,1.474,441,3.393,442,3.393,444,3.854,445,3.201,446,3.608,449,2.324,584,2.872,619,3.393,844,1.166,845,1.427,863,3.089,866,3.608,875,2.787,1325,3.608,1331,2.964,1417,3.658,1423,2.506,1426,2.506,1429,2.506,1432,2.506,1435,2.506,1438,4.03,1811,3.347,1813,3.608,1815,3.608,1818,3.968,1819,2.332,1822,2.715,1823,2.715,1824,3.402,1825,2.715,1826,2.715,1827,3.686,1828,4.488,1829,4.488,1830,4.488]],["title/interfaces/reply.html",[844,0.736,1331,2.124]],["body/interfaces/reply.html",[3,0.137,4,0.137,5,0.137,7,0.355,11,0.017,15,1.058,16,0.458,20,0.227,26,0.01,27,0.013,28,0.01,94,0.7,255,1.742,256,1.828,282,1.585,284,1.383,286,1.322,386,2.262,398,1.828,400,3.225,426,2.023,440,1.63,441,2.389,442,2.389,444,2.715,445,2.254,446,2.541,449,2.32,584,3.05,619,2.389,844,1.257,845,1.661,863,2.972,866,3.277,875,3.081,1325,2.541,1331,4.06,1417,3.41,1423,2.917,1426,2.917,1429,2.917,1432,2.917,1435,2.917,1438,3.5,1811,3.518,1813,2.541,1815,2.541,1818,3.935,1819,2.715,1822,3.16,1823,3.16,1824,4.552,1825,3.16,1826,4.765,1827,4.075,1828,3.16,1829,3.16,1830,3.16]],["title/interfaces/section.html",[445,1.884,844,0.736]],["body/interfaces/section.html",[3,0.143,4,0.143,5,0.143,7,0.371,11,0.017,15,1.069,16,0.471,20,0.211,26,0.01,27,0.013,28,0.01,93,0.685,94,0.693,227,1.909,255,1.819,256,1.909,282,1.655,286,1.38,310,2.309,386,2.309,398,1.909,400,2.007,440,1.676,445,2.988,449,2.014,462,3.3,463,3.046,464,3.3,584,2.946,619,2.495,642,3.3,844,1.167,845,1.734,863,3.162,887,3.269,1302,3.368,1323,3.3,1324,4.997,1325,2.653,1417,2.495,1810,3.618,1811,3.454,1812,3.618,1813,2.653,1814,3.3,1815,4.018,1816,5.309,1817,5.309,1818,3.66,1819,2.834,1820,3.618]],["title/interfaces/topic.html",[286,1.105,844,0.736]],["body/interfaces/topic.html",[3,0.152,4,0.152,5,0.152,7,0.394,11,0.017,15,1.022,16,0.489,20,0.176,26,0.011,27,0.014,28,0.011,93,1.028,94,0.736,227,2.863,286,1.82,386,2.374,426,3.167,440,1.741,441,3.741,442,3.741,449,2.269,584,2.785,844,0.977,845,1.843,863,3,887,3.167,1302,3.979,1811,3.376,1818,3.92,1871,4.297,2007,6.064]],["title/interfaces/user.html",[167,0.924,844,0.736]],["body/interfaces/user.html",[3,0.086,4,0.086,5,0.086,7,0.224,11,0.018,15,1.086,16,0.333,20,0.1,26,0.006,27,0.009,28,0.006,82,3.902,93,0.414,94,0.769,96,2.051,106,2.783,167,1.035,175,2.95,243,2.95,255,2.151,256,2.257,300,1.711,310,3.028,386,1.769,400,2.749,425,3.137,440,1.183,449,1.978,584,1.893,844,0.555,845,1.047,850,3.902,853,3.902,854,3.902,855,3.902,863,3.139,866,3.734,871,3.351,887,2.497,906,4.278,964,3.902,985,4.278,986,4.278,987,3.602,989,4.278,1042,3.902,1080,2.184,1190,3.902,1192,3.902,1204,3.902,1302,3.137,1379,4.278,1417,2.95,1438,1.711,1460,3.902,1569,4.278,1637,4.278,1638,4.278,1641,4.278,1642,4.278,1644,4.278,1645,4.278,1646,4.278,1647,4.278,1708,4.278,1811,2.515,1813,3.352,1814,1.992,1818,3.302,1824,1.839,1873,2.441,2008,4.782,2009,4.782,2010,4.782,2011,4.782,2012,4.782,2013,4.782,2014,4.782,2015,2.441,2016,2.441,2017,2.441]],["title/miscellaneous/variables.html",[1942,2.2,2018,3.898]],["body/miscellaneous/variables.html",[7,0.51,11,0.018,15,1.083,26,0.005,27,0.008,28,0.005,75,2.411,82,1.691,93,0.745,94,0.642,96,0.889,100,1.142,106,1.207,165,1.877,167,1.256,175,1.279,227,1.511,228,1.453,243,1.279,247,2.073,255,1.759,256,1.847,259,3.338,282,1.601,284,1.143,286,1.788,290,3.417,300,2.373,302,1.561,308,3.313,310,2.863,314,1.964,346,1.975,398,1.511,400,3.098,403,1.855,407,1.855,411,1.855,421,1.855,422,1.855,425,1.36,426,1.672,441,1.975,442,1.975,444,3.083,445,1.207,446,1.36,447,1.561,449,2.253,462,1.691,463,2.411,464,1.691,474,2.073,475,2.073,476,2.073,477,2.073,478,2.073,479,2.073,587,1.855,619,1.975,642,1.691,649,2.612,659,1.855,693,2.073,813,2.411,829,2.864,848,1.855,850,1.691,853,1.691,854,1.691,855,1.691,863,2.803,871,1.453,875,1.279,877,3.333,887,2.483,906,1.855,916,2.244,917,2.073,918,2.073,919,2.073,920,2.073,921,2.073,922,2.073,923,2.073,924,2.073,925,2.073,926,2.073,927,2.073,928,2.073,929,2.073,930,2.073,931,2.073,932,2.073,933,2.073,934,2.073,935,2.073,936,2.073,937,2.073,938,2.073,964,1.691,985,1.855,986,1.855,987,1.561,989,1.855,1042,1.691,1080,3.499,1090,3.911,1190,1.691,1192,1.691,1204,1.691,1302,2.886,1323,1.691,1324,2.612,1325,2.1,1327,1.855,1331,1.36,1375,2.073,1379,1.855,1417,2.933,1419,2.073,1423,1.561,1426,1.561,1429,1.561,1432,1.561,1435,1.561,1438,2.741,1460,1.691,1569,1.855,1626,2.073,1637,1.855,1638,1.855,1641,1.855,1642,1.855,1644,1.855,1645,1.855,1646,1.855,1647,1.855,1708,1.855,1793,1.855,1802,2.864,1803,2.073,1812,1.855,1813,2.886,1814,2.612,1815,2.566,1816,1.855,1817,1.855,1818,4.016,1819,2.244,1820,1.855,1823,1.691,1824,2.946,1825,1.691,1826,1.691,1827,2.612,1828,1.691,1829,1.691,1830,1.691,1852,1.855,1853,3.201,1854,3.201,1855,2.073,1856,2.073,1857,2.073,1858,2.073,1859,2.073,1860,2.073,1878,2.073,1942,1.691,1944,3.911,2007,2.073,2008,2.073,2009,2.073,2010,2.073,2011,2.073,2012,2.073,2013,2.073,2014,2.073,2015,2.073,2016,2.073,2017,2.073,2018,2.073,2019,3.713,2020,3.713,2021,3.713,2022,2.404,2023,3.713,2024,2.404,2025,2.404,2026,3.713,2027,3.713,2028,3.713,2029,2.404,2030,7.319,2031,7.319,2032,5.102,2033,6.077,2034,5.829,2035,3.713,2036,2.404,2037,2.404,2038,2.404,2039,2.404]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":419,"title":{},"body":{"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1850,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1836,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1847,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1868,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1840,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1867,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1875,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1864,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1870,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1842,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1835,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1863,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1877,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1839,"title":{},"body":{"coverage.html":{}}}],["0/31",{"_index":1844,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1851,"title":{},"body":{"coverage.html":{}}}],["0/48",{"_index":1874,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1846,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1848,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1866,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1845,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1872,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":424,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["1.0.0",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1919,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":1883,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":1890,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":1838,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":2003,"title":{},"body":{"overview.html":{}}}],["11",{"_index":2002,"title":{},"body":{"overview.html":{}}}],["14",{"_index":2006,"title":{},"body":{"overview.html":{}}}],["16.7.1",{"_index":1911,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":2004,"title":{},"body":{"overview.html":{}}}],["17.1.1",{"_index":1887,"title":{},"body":{"dependencies.html":{}}}],["1].topicname",{"_index":1624,"title":{},"body":{"injectables/TopicService.html":{}}}],["2.0.0",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1900,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1837,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":1918,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":978,"title":{},"body":{"injectables/NotificationService.html":{}}}],["4",{"_index":1295,"title":{},"body":{"injectables/SearchService.html":{}}}],["4.0.0",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1885,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1921,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1292,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["5.0.0",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["5.9.26",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":504,"title":{},"body":{"injectables/Email.html":{}}}],["6.4.0",{"_index":1904,"title":{},"body":{"dependencies.html":{}}}],["6.4.10",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["60.0.1",{"_index":1915,"title":{},"body":{"dependencies.html":{}}}],["67472347632732h",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["7",{"_index":2005,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["7.3.2",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["7569a1b48022",{"_index":763,"title":{},"body":{"modules/ImagesModule.html":{}}}],["8.2.0",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1916,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"interfaces/Payload.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["abdelmaboud",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{}}}],["abohadima",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/TopicService.html":{}}}],["accesstoken",{"_index":578,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["account",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["acknowledgment",{"_index":758,"title":{},"body":{"modules/ImagesModule.html":{}}}],["activateaccount",{"_index":1641,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["activity",{"_index":1042,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":869,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/TopicController.html":{}}}],["addcollaborators",{"_index":474,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":1520,"title":{},"body":{"controllers/TopicController.html":{}}}],["addfields",{"_index":1307,"title":{},"body":{"injectables/SearchService.html":{}}}],["addimagetotopic",{"_index":1455,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(@body('topics",{"_index":1529,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(topics",{"_index":1466,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic",{"_index":1456,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic(pinid",{"_index":1470,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintotopic",{"_index":1552,"title":{},"body":{"injectables/TopicService.html":{}}}],["addpintotopic(topicname",{"_index":1560,"title":{},"body":{"injectables/TopicService.html":{}}}],["address",{"_index":524,"title":{},"body":{"injectables/Email.html":{}}}],["addtolimitedarray",{"_index":849,"title":{},"body":{"injectables/NotificationService.html":{}}}],["addtolimitedarray(notificationarray",{"_index":862,"title":{},"body":{"injectables/NotificationService.html":{}}}],["addtorecentsearch",{"_index":1248,"title":{},"body":{"injectables/SearchService.html":{}}}],["addtorecentsearch(userid",{"_index":1253,"title":{},"body":{"injectables/SearchService.html":{}}}],["admin",{"_index":915,"title":{},"body":{"injectables/NotificationService.html":{},"dependencies.html":{}}}],["aggregate",{"_index":1306,"title":{},"body":{"injectables/SearchService.html":{}}}],["aleardy",{"_index":1753,"title":{},"body":{"controllers/UserController.html":{}}}],["already",{"_index":1614,"title":{},"body":{"injectables/TopicService.html":{}}}],["amazing",{"_index":1983,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1956,"title":{},"body":{"index.html":{}}}],["aouth",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["aouth/google?token",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibadrequestresponse",{"_index":688,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes",{"_index":687,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes('multipart/form",{"_index":695,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apicreatedresponse",{"_index":686,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiproperty",{"_index":558,"title":{},"body":{"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{}}}],["apiproperty()@expose",{"_index":552,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["apiproperty({type",{"_index":565,"title":{},"body":{"classes/FileResponseVm.html":{}}}],["app",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/NotificationService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":1443,"title":{},"body":{"modules/SharedModule.html":{}}}],["app_interceptor",{"_index":1444,"title":{},"body":{"modules/SharedModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1954,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":634,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arr",{"_index":430,"title":{},"body":{"injectables/ChatService.html":{}}}],["arr.push(user",{"_index":435,"title":{},"body":{"injectables/ChatService.html":{}}}],["array",{"_index":863,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["array(mongoose.types.objectid",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(object",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(string",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraymessage",{"_index":1031,"title":{},"body":{"injectables/NotificationService.html":{}}}],["array}array",{"_index":942,"title":{},"body":{"injectables/NotificationService.html":{}}}],["array}messages",{"_index":957,"title":{},"body":{"injectables/NotificationService.html":{}}}],["async",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["attachment",{"_index":746,"title":{},"body":{"controllers/ImagesController.html":{}}}],["auth",{"_index":507,"title":{},"body":{"injectables/Email.html":{}}}],["auth.controller",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":78,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/TopicService.html":{},"index.html":{}}}],["authorization",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["authproviderx509certurl",{"_index":932,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authuri",{"_index":928,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["aya",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/TopicService.html":{}}}],["backers",{"_index":1984,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["badrequestexception('can",{"_index":1535,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["badrequestexception})@apicreatedresponse({type",{"_index":667,"title":{},"body":{"controllers/ImagesController.html":{}}}],["bcrypt",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["bio",{"_index":1189,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["birthdate",{"_index":1637,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["birthday",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["board",{"_index":282,"title":{"interfaces/board.html":{}},"body":{"modules/BoardModule.html":{},"classes/CreatePinDto.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["board.controller",{"_index":280,"title":{},"body":{"modules/BoardModule.html":{}}}],["board.dto.ts",{"_index":460,"title":{},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["board.dto.ts:2",{"_index":468,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:3",{"_index":466,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:4",{"_index":471,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:5",{"_index":470,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:6",{"_index":467,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:7",{"_index":465,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:8",{"_index":469,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.service",{"_index":281,"title":{},"body":{"modules/BoardModule.html":{}}}],["board/board.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["boardcontroller",{"_index":279,"title":{},"body":{"modules/BoardModule.html":{},"coverage.html":{}}}],["boardid",{"_index":1080,"title":{},"body":{"controllers/RecommendationController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardmodel",{"_index":1252,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardmodule",{"_index":42,"title":{"modules/BoardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["boards",{"_index":871,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardservice",{"_index":277,"title":{},"body":{"modules/BoardModule.html":{},"coverage.html":{},"overview.html":{}}}],["boardsforyou",{"_index":850,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardsforyou(user",{"_index":870,"title":{},"body":{"injectables/NotificationService.html":{}}}],["boardupdate",{"_index":1642,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["body('description",{"_index":1525,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('forgetpassword",{"_index":1734,"title":{},"body":{"controllers/UserController.html":{}}}],["body('imageheight",{"_index":1523,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imageid",{"_index":1522,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imagewidth",{"_index":1524,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('isseen",{"_index":334,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('message",{"_index":337,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('name",{"_index":338,"title":{},"body":{"controllers/ChatController.html":{},"controllers/TopicController.html":{}}}],["body('newpassword",{"_index":1732,"title":{},"body":{"controllers/UserController.html":{}}}],["body('oldpassword",{"_index":1733,"title":{},"body":{"controllers/UserController.html":{}}}],["body('pinid",{"_index":1517,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('recieverid",{"_index":332,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('senderid",{"_index":331,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('time",{"_index":333,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('topicname",{"_index":1518,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('topics",{"_index":1527,"title":{},"body":{"controllers/TopicController.html":{}}}],["boolean",{"_index":310,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":2000,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1998,"title":{},"body":{"modules.html":{}}}],["bucketname",{"_index":625,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{}}}],["building",{"_index":1950,"title":{},"body":{"index.html":{}}}],["callbackurl",{"_index":591,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":825,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["casesensitive",{"_index":1276,"title":{},"body":{"injectables/SearchService.html":{}}}],["catch",{"_index":632,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(err",{"_index":954,"title":{},"body":{"injectables/NotificationService.html":{}}}],["catch(exception",{"_index":633,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":1310,"title":{},"body":{"injectables/SearchService.html":{}}}],["certain",{"_index":1508,"title":{},"body":{"controllers/TopicController.html":{}}}],["certan",{"_index":1038,"title":{},"body":{"injectables/NotificationService.html":{}}}],["change",{"_index":494,"title":{},"body":{"injectables/Email.html":{}}}],["changed",{"_index":523,"title":{},"body":{"injectables/Email.html":{}}}],["changeemail",{"_index":1748,"title":{},"body":{"controllers/UserController.html":{}}}],["changes",{"_index":885,"title":{},"body":{"injectables/NotificationService.html":{}}}],["chat",{"_index":346,"title":{"interfaces/chat.html":{}},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["chat._id",{"_index":412,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.controller",{"_index":345,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.map(conv",{"_index":431,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.save",{"_index":409,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.service",{"_index":318,"title":{},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["chatcontroller",{"_index":291,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatid",{"_index":411,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["chatmodel",{"_index":358,"title":{},"body":{"injectables/ChatService.html":{}}}],["chatmodule",{"_index":43,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":317,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{}}}],["checkemail",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(@query('email",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(email",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkfailed",{"_index":982,"title":{},"body":{"injectables/NotificationService.html":{}}}],["checkfailed.length",{"_index":984,"title":{},"body":{"injectables/NotificationService.html":{}}}],["checkfollowinguser",{"_index":1650,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowinguser(params",{"_index":1665,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowtopic",{"_index":1457,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["checkfollowtopic(@param",{"_index":1541,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(params",{"_index":1473,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(userid",{"_index":1562,"title":{},"body":{"injectables/TopicService.html":{}}}],["checkimage",{"_index":732,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["checkimage(id",{"_index":777,"title":{},"body":{"injectables/ImagesService.html":{}}}],["checkmongooseid",{"_index":1794,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkmongooseid(ids",{"_index":1797,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkuser",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkuser._id",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["chunksize",{"_index":547,"title":{},"body":{"classes/FileInfoVm.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":437,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{},"overview.html":{}}}],["clearuserid",{"_index":1328,"title":{},"body":{"classes/SharedGateway.html":{}}}],["clearuserid(socket",{"_index":1335,"title":{},"body":{"classes/SharedGateway.html":{}}}],["client",{"_index":941,"title":{},"body":{"injectables/NotificationService.html":{}}}],["clientemail",{"_index":925,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["clientid",{"_index":587,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":589,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientx509certurl",{"_index":934,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["cloud/firestore",{"_index":1884,"title":{},"body":{"dependencies.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_boardmodule",{"_index":273,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardmodule_exports",{"_index":275,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_boardmodule_imports",{"_index":274,"title":{},"body":{"modules/BoardModule.html":{}}}],["cluster_boardmodule_providers",{"_index":276,"title":{},"body":{"modules/BoardModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":340,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":342,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":341,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":343,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_imagesmodule",{"_index":753,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_exports",{"_index":755,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_imagesmodule_imports",{"_index":754,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_imagesmodule_providers",{"_index":756,"title":{},"body":{"modules/ImagesModule.html":{},"overview.html":{}}}],["cluster_pinsmodule",{"_index":1052,"title":{},"body":{"modules/PinsModule.html":{},"overview.html":{}}}],["cluster_pinsmodule_exports",{"_index":1054,"title":{},"body":{"modules/PinsModule.html":{},"overview.html":{}}}],["cluster_pinsmodule_imports",{"_index":1053,"title":{},"body":{"modules/PinsModule.html":{}}}],["cluster_pinsmodule_providers",{"_index":1055,"title":{},"body":{"modules/PinsModule.html":{},"overview.html":{}}}],["cluster_recommendationmodule",{"_index":1182,"title":{},"body":{"modules/RecommendationModule.html":{},"overview.html":{}}}],["cluster_recommendationmodule_exports",{"_index":1184,"title":{},"body":{"modules/RecommendationModule.html":{},"overview.html":{}}}],["cluster_recommendationmodule_imports",{"_index":1183,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["cluster_recommendationmodule_providers",{"_index":1185,"title":{},"body":{"modules/RecommendationModule.html":{},"overview.html":{}}}],["cluster_searchmodule",{"_index":1241,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_imports",{"_index":1242,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":1243,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":1439,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":1440,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_providers",{"_index":1441,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_topicmodule",{"_index":1546,"title":{},"body":{"modules/TopicModule.html":{},"overview.html":{}}}],["cluster_topicmodule_imports",{"_index":1547,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_providers",{"_index":1548,"title":{},"body":{"modules/TopicModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1786,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1788,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1787,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1789,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":646,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["collaboratores",{"_index":461,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["collaboratorid",{"_index":475,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["collaborators",{"_index":1812,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["com",{"_index":818,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["come",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["comment",{"_index":875,"title":{"interfaces/comment.html":{}},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["comment(socket",{"_index":1339,"title":{},"body":{"classes/SharedGateway.html":{}}}],["commenter",{"_index":1823,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["commenterid",{"_index":992,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commenterimageid",{"_index":991,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commenteruser",{"_index":874,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commenteruser.firstname",{"_index":1000,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commenteruser.lastname",{"_index":1001,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commentpin",{"_index":851,"title":{},"body":{"injectables/NotificationService.html":{}}}],["commentpin(owneruser",{"_index":873,"title":{},"body":{"injectables/NotificationService.html":{}}}],["comments",{"_index":1438,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["complete",{"_index":521,"title":{},"body":{"injectables/Email.html":{}}}],["compodoc/compodoc",{"_index":1882,"title":{},"body":{"dependencies.html":{}}}],["config.service",{"_index":766,"title":{},"body":{"modules/ImagesModule.html":{}}}],["config.service.ts",{"_index":605,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"coverage.html":{}}}],["config.service.ts:11",{"_index":608,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["config.service.ts:28",{"_index":609,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["confirm",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["confirm(@request",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(req",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmupdateemail",{"_index":1651,"title":{},"body":{"controllers/UserController.html":{}}}],["confirmupdateemail(req",{"_index":1668,"title":{},"body":{"controllers/UserController.html":{}}}],["connection",{"_index":775,"title":{},"body":{"injectables/ImagesService.html":{}}}],["console",{"_index":1374,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log('deliver",{"_index":1403,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log('message",{"_index":951,"title":{},"body":{"injectables/NotificationService.html":{}}}],["console.log('sending",{"_index":1390,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log('user",{"_index":1380,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log(err",{"_index":955,"title":{},"body":{"injectables/NotificationService.html":{}}}],["console.log(profile",{"_index":596,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["console.log(reciever.socketid",{"_index":1405,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log(response.successcount",{"_index":959,"title":{},"body":{"injectables/NotificationService.html":{}}}],["const",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["constructor(authservice",{"_index":807,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(boardmodel",{"_index":1249,"title":{},"body":{"injectables/SearchService.html":{}}}],["constructor(chatservice",{"_index":1333,"title":{},"body":{"classes/SharedGateway.html":{}}}],["constructor(connection",{"_index":774,"title":{},"body":{"injectables/ImagesService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["constructor(topicmodel",{"_index":1557,"title":{},"body":{"injectables/TopicService.html":{}}}],["constructor(usermodel",{"_index":356,"title":{},"body":{"injectables/ChatService.html":{}}}],["constructor(userservice",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["contenttype",{"_index":548,"title":{},"body":{"classes/FileInfoVm.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["context",{"_index":827,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.getclass().name",{"_index":843,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":836,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["continue",{"_index":1804,"title":{},"body":{"injectables/ValidationService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('search",{"_index":1224,"title":{},"body":{"controllers/SearchController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["conv.usersids.map(user",{"_index":432,"title":{},"body":{"injectables/ChatService.html":{}}}],["convert",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["correct",{"_index":817,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["cors",{"_index":1853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1190,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":1417,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1831,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverimages",{"_index":1324,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["created",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["createdat",{"_index":1813,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createdorjoined",{"_index":2015,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createmulteroptions",{"_index":607,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["createparamdecorator((data",{"_index":2039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpin",{"_index":476,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["createpindto",{"_index":436,"title":{"classes/CreatePinDto.html":{}},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["createtopic",{"_index":1458,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopic(imageid",{"_index":1477,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopics",{"_index":1459,"title":{},"body":{"controllers/TopicController.html":{}}}],["createtopics(topics",{"_index":1480,"title":{},"body":{"controllers/TopicController.html":{}}}],["creator",{"_index":1325,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["creator.id",{"_index":1286,"title":{},"body":{"injectables/SearchService.html":{}}}],["creatorid",{"_index":1817,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["credential",{"_index":937,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":638,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":641,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":640,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["data')@useinterceptors(undefined",{"_index":680,"title":{},"body":{"controllers/ImagesController.html":{}}}],["data.message",{"_index":1412,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.messageid",{"_index":1402,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.pinid",{"_index":1422,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.reacttype",{"_index":1420,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.recieverid",{"_index":1387,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.senderid",{"_index":1384,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.token",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["data.type",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["date",{"_index":400,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":648,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":835,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["date.now().tostring",{"_index":974,"title":{},"body":{"injectables/NotificationService.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decoded",{"_index":1376,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decoded._id",{"_index":1378,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["delete",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["delete('/me/delete",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('/me/follow",{"_index":1536,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["delete('image/:id",{"_index":747,"title":{},"body":{"controllers/ImagesController.html":{}}}],["delete('image/:id')@apibadrequestresponse({type",{"_index":666,"title":{},"body":{"controllers/ImagesController.html":{}}}],["deleted",{"_index":752,"title":{},"body":{"controllers/ImagesController.html":{}}}],["deletefile",{"_index":660,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["deletefile(@param('id",{"_index":748,"title":{},"body":{"controllers/ImagesController.html":{}}}],["deletefile(id",{"_index":665,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["deleteflag",{"_index":1643,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{}}}],["deleteme",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(@request",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["deletion",{"_index":751,"title":{},"body":{"controllers/ImagesController.html":{}}}],["deliver",{"_index":350,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["deliver(socket",{"_index":1342,"title":{},"body":{"classes/SharedGateway.html":{}}}],["deliver(userid",{"_index":363,"title":{},"body":{"injectables/ChatService.html":{}}}],["deliverstatus",{"_index":422,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"index.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["descriptioncheck",{"_index":1606,"title":{},"body":{"injectables/TopicService.html":{}}}],["descriptiondelete",{"_index":988,"title":{},"body":{"injectables/NotificationService.html":{}}}],["descriptionget",{"_index":1631,"title":{},"body":{"injectables/TopicService.html":{}}}],["descriptionsend",{"_index":497,"title":{},"body":{"injectables/Email.html":{},"injectables/NotificationService.html":{}}}],["descriptionsendnotification",{"_index":939,"title":{},"body":{"injectables/NotificationService.html":{}}}],["descriptionsendofflinenotification",{"_index":956,"title":{},"body":{"injectables/NotificationService.html":{}}}],["descriptionthis",{"_index":1045,"title":{},"body":{"injectables/NotificationService.html":{}}}],["destlink",{"_index":1829,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1964,"title":{},"body":{"index.html":{}}}],["disposition",{"_index":745,"title":{},"body":{"controllers/ImagesController.html":{}}}],["document",{"_index":1811,"title":{},"body":{"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["documentation",{"_index":1832,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":575,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["done(null",{"_index":602,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dont",{"_index":1628,"title":{},"body":{"injectables/TopicService.html":{}}}],["dotenv",{"_index":1908,"title":{},"body":{"dependencies.html":{}}}],["downloadfile",{"_index":661,"title":{},"body":{"controllers/ImagesController.html":{}}}],["downloadfile(@param('id",{"_index":741,"title":{},"body":{"controllers/ImagesController.html":{}}}],["downloadfile(id",{"_index":669,"title":{},"body":{"controllers/ImagesController.html":{}}}],["dto/login.dto",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/register.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1721,"title":{},"body":{"controllers/UserController.html":{}}}],["during",{"_index":750,"title":{},"body":{"controllers/ImagesController.html":{}}}],["e2e",{"_index":1974,"title":{},"body":{"index.html":{}}}],["editboarddto",{"_index":458,"title":{"classes/EditBoardDto.html":{}},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["editcollaboratorespermissionsdto",{"_index":472,"title":{"classes/EditCollaboratoresPermissionsDto.html":{}},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["editdescription",{"_index":477,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittitle",{"_index":478,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittopic",{"_index":1553,"title":{},"body":{"injectables/TopicService.html":{}}}],["edittopic(topics",{"_index":1565,"title":{},"body":{"injectables/TopicService.html":{}}}],["efficient",{"_index":1951,"title":{},"body":{"index.html":{}}}],["elasticsearch",{"_index":1910,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":96,"title":{"injectables/Email.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"modules/SharedModule.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["email.service.ts",{"_index":488,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["email.service.ts:18",{"_index":492,"title":{},"body":{"injectables/Email.html":{}}}],["email.service.ts:7",{"_index":490,"title":{},"body":{"injectables/Email.html":{}}}],["emails",{"_index":594,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":597,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emiit",{"_index":1406,"title":{},"body":{"classes/SharedGateway.html":{}}}],["encoding",{"_index":703,"title":{},"body":{"controllers/ImagesController.html":{}}}],["end",{"_index":1807,"title":{},"body":{"injectables/ValidationService.html":{}}}],["enddate",{"_index":462,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":1584,"title":{},"body":{"injectables/TopicService.html":{}}}],["error",{"_index":656,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{}}}],["error('not",{"_index":397,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["error('topic",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["errorresponse",{"_index":645,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["event",{"_index":1404,"title":{},"body":{"classes/SharedGateway.html":{}}}],["example",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/NotificationService.html":{}}}],["exception",{"_index":636,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":1132,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/SharedModule.html":{}}}],["exception.filter.ts",{"_index":630,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":635,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":643,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":653,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":631,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":823,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["exists",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["exp",{"_index":1191,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["expiresin",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Payload.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["expose",{"_index":560,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["express",{"_index":613,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"dependencies.html":{}}}],["extends",{"_index":584,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["extractjwt",{"_index":812,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":815,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["f",{"_index":1312,"title":{},"body":{"injectables/SearchService.html":{}}}],["facebook",{"_index":1644,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":506,"title":{},"body":{"injectables/Email.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["fcm",{"_index":900,"title":{},"body":{"injectables/NotificationService.html":{}}}],["fcmtoken",{"_index":906,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["file.bucketname",{"_index":711,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.chunksize",{"_index":712,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.contenttype",{"_index":717,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.encoding",{"_index":704,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.filename",{"_index":708,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.id",{"_index":707,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.length",{"_index":738,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.md5",{"_index":714,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.metadata",{"_index":710,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.mimetype",{"_index":706,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.originalname",{"_index":702,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.originalname.trim",{"_index":623,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["file.size",{"_index":713,"title":{},"body":{"controllers/ImagesController.html":{}}}],["file.uploaddate",{"_index":716,"title":{},"body":{"controllers/ImagesController.html":{}}}],["fileinfo",{"_index":624,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["fileinfovm",{"_index":543,"title":{"classes/FileInfoVm.html":{}},"body":{"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"coverage.html":{}}}],["filemodel",{"_index":770,"title":{},"body":{"injectables/ImagesService.html":{}}}],["filename",{"_index":549,"title":{},"body":{"classes/FileInfoVm.html":{},"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["filepath",{"_index":724,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filereponse",{"_index":700,"title":{},"body":{"controllers/ImagesController.html":{}}}],["fileresponsevm",{"_index":562,"title":{"classes/FileResponseVm.html":{}},"body":{"classes/FileResponseVm.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["files",{"_index":682,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files.foreach(file",{"_index":699,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filesinterceptor",{"_index":689,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filestream",{"_index":735,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filestream.pipe(res",{"_index":739,"title":{},"body":{"controllers/ImagesController.html":{}}}],["find",{"_index":1285,"title":{},"body":{"injectables/SearchService.html":{}}}],["findbyidandupdate(topicid",{"_index":1630,"title":{},"body":{"injectables/TopicService.html":{}}}],["findbyidandupdate(userid",{"_index":1297,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["findinfo",{"_index":771,"title":{},"body":{"injectables/ImagesService.html":{}}}],["findinfo(id",{"_index":780,"title":{},"body":{"injectables/ImagesService.html":{}}}],["findinfo2",{"_index":772,"title":{},"body":{"injectables/ImagesService.html":{}}}],["findusers",{"_index":351,"title":{},"body":{"injectables/ChatService.html":{}}}],["findusers(userid",{"_index":367,"title":{},"body":{"injectables/ChatService.html":{}}}],["firebase",{"_index":914,"title":{},"body":{"injectables/NotificationService.html":{},"dependencies.html":{}}}],["firebase.credential.cert(params",{"_index":938,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["firebase.initializeapp",{"_index":936,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["firstname",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["firstuserid",{"_index":376,"title":{},"body":{"injectables/ChatService.html":{}}}],["follow",{"_index":527,"title":{},"body":{"injectables/Email.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["followed",{"_index":961,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeduser",{"_index":884,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeduser.fcmtoken",{"_index":979,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeduser.notificationcounter",{"_index":975,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeduser.notifications",{"_index":976,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeduser.offlinenotifications",{"_index":980,"title":{},"body":{"injectables/NotificationService.html":{}}}],["follower",{"_index":969,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followerid",{"_index":963,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followerimageid",{"_index":962,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followers",{"_index":1302,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followeruser",{"_index":882,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeruser.firstname",{"_index":971,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followeruser.lastname",{"_index":972,"title":{},"body":{"injectables/NotificationService.html":{}}}],["following",{"_index":1569,"title":{},"body":{"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics",{"_index":1460,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics(@request",{"_index":1544,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(req",{"_index":1483,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(userid",{"_index":1567,"title":{},"body":{"injectables/TopicService.html":{}}}],["follownotification",{"_index":1645,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followtopic",{"_index":1461,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["followtopic(@param",{"_index":1532,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(params",{"_index":1486,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(userid",{"_index":1570,"title":{},"body":{"injectables/TopicService.html":{}}}],["followuser",{"_index":852,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["followuser(@param",{"_index":1767,"title":{},"body":{"controllers/UserController.html":{}}}],["followuser(followeduser",{"_index":881,"title":{},"body":{"injectables/NotificationService.html":{}}}],["followuser(params",{"_index":1672,"title":{},"body":{"controllers/UserController.html":{}}}],["forbiddenexception",{"_index":685,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{}}}],["forget",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["forgetpassword",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["forgetpassword(@body",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["found",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["framework",{"_index":1949,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1854,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["functions",{"_index":1943,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":1246,"title":{},"body":{"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["fuzzy(model",{"_index":1255,"title":{},"body":{"injectables/SearchService.html":{}}}],["gender",{"_index":1192,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["generateboardmorelike",{"_index":1064,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generateboardmorelike(req",{"_index":1079,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed",{"_index":1065,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(@request",{"_index":1137,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(req",{"_index":1083,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore",{"_index":1066,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(@request",{"_index":1146,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(req",{"_index":1086,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike",{"_index":1067,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike(req",{"_index":1089,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/:userid/follower",{"_index":1782,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:userid/following",{"_index":1784,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/allpins",{"_index":1225,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/board",{"_index":1235,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/checkemail",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/getchats/:userid",{"_index":327,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/getkeys",{"_index":1239,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/getmessagessent/:recieverids/:senderid",{"_index":319,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/image/:id",{"_index":673,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('/me",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me/boards/view",{"_index":1762,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/boardsforyou",{"_index":1170,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/follow",{"_index":1540,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/follower",{"_index":1779,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/following",{"_index":1543,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/home",{"_index":1141,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsforyou",{"_index":1177,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsrecentactivity",{"_index":1180,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/popularpins",{"_index":1173,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/follow",{"_index":1161,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/topics/:topicname",{"_index":1164,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/trending",{"_index":1167,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/boards/:boardid",{"_index":1157,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/pins/:pinid",{"_index":1149,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/sections/:boardid/:sectionid",{"_index":1159,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/mypins",{"_index":1230,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/people",{"_index":1232,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/recentsearch",{"_index":1237,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/topic",{"_index":1505,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid",{"_index":1509,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid/pins",{"_index":1513,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/user/:id",{"_index":1683,"title":{},"body":{"controllers/UserController.html":{}}}],["get('download/:id",{"_index":740,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('download/:id')@apibadrequestresponse({type",{"_index":670,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('google",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('imageinfo",{"_index":719,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('imageinfo')@apibadrequestresponse({type",{"_index":676,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('notifications/me",{"_index":1726,"title":{},"body":{"controllers/UserController.html":{}}}],["get('users/me",{"_index":1724,"title":{},"body":{"controllers/UserController.html":{}}}],["getallpins",{"_index":1197,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getallpins(name",{"_index":1257,"title":{},"body":{"injectables/SearchService.html":{}}}],["getallpins(req",{"_index":1203,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardmore",{"_index":1068,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardmore(req",{"_index":1093,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboards",{"_index":1198,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getboards(name",{"_index":1259,"title":{},"body":{"injectables/SearchService.html":{}}}],["getboards(req",{"_index":1207,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardsforyou",{"_index":1069,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(@request",{"_index":1171,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(req",{"_index":1097,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getchats",{"_index":293,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getchats(@param('userid",{"_index":328,"title":{},"body":{"controllers/ChatController.html":{}}}],["getchats(userid",{"_index":297,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getfile",{"_index":662,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getfile(id",{"_index":672,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getfileinfo",{"_index":663,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getfileinfo(@request",{"_index":720,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getfileinfo(req",{"_index":675,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getfollowers",{"_index":1652,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowers(req",{"_index":1674,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings",{"_index":1653,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings(req",{"_index":1677,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowrecommendation",{"_index":1070,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(@request",{"_index":1162,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(req",{"_index":1100,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethomefeed",{"_index":1071,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethomefeed(req",{"_index":1103,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getkeys",{"_index":1199,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getkeys(name",{"_index":1261,"title":{},"body":{"injectables/SearchService.html":{}}}],["getkeys(req",{"_index":1210,"title":{},"body":{"controllers/SearchController.html":{}}}],["getmessage",{"_index":352,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessage(userids",{"_index":370,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessagessent",{"_index":294,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getmessagessent(firstuserid",{"_index":373,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessagessent(recieverids",{"_index":301,"title":{},"body":{"controllers/ChatController.html":{}}}],["getmypins",{"_index":1200,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getmypins(name",{"_index":1263,"title":{},"body":{"injectables/SearchService.html":{}}}],["getmypins(req",{"_index":1213,"title":{},"body":{"controllers/SearchController.html":{}}}],["getnotifications",{"_index":1654,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(@request",{"_index":1727,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(req",{"_index":1679,"title":{},"body":{"controllers/UserController.html":{}}}],["getpeople",{"_index":1201,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getpeople(name",{"_index":1265,"title":{},"body":{"injectables/SearchService.html":{}}}],["getpeople(req",{"_index":1216,"title":{},"body":{"controllers/SearchController.html":{}}}],["getpinmore",{"_index":1072,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinmore(req",{"_index":1106,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou",{"_index":1073,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(@request",{"_index":1178,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(req",{"_index":1109,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsofatopic",{"_index":1462,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsofatopic(req",{"_index":1489,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsoftopic",{"_index":1554,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsoftopic(topicid",{"_index":1572,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsrecentactivity",{"_index":1074,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsrecentactivity(req",{"_index":1113,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins",{"_index":1075,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(@request",{"_index":1174,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(req",{"_index":1116,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getrecentsearch",{"_index":1202,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getrecentsearch(req",{"_index":1219,"title":{},"body":{"controllers/SearchController.html":{}}}],["getrecentsearch(userid",{"_index":1267,"title":{},"body":{"injectables/SearchService.html":{}}}],["getsectionmore",{"_index":1076,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getsectionmore(req",{"_index":1119,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getting",{"_index":1945,"title":{"index.html":{}},"body":{}}],["gettopic",{"_index":1463,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(@request",{"_index":1510,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(req",{"_index":1493,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopicbyid",{"_index":1555,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicbyid(topicid",{"_index":1574,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicrecommendation",{"_index":1077,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopicrecommendation(req",{"_index":1122,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopics",{"_index":1464,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["gettopics(@request",{"_index":1506,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(req",{"_index":1496,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(userid",{"_index":1576,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettrendingrecommendation",{"_index":1078,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(@request",{"_index":1168,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(req",{"_index":1125,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getuser",{"_index":1655,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param",{"_index":1729,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(params",{"_index":1682,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers",{"_index":1656,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers(req",{"_index":1685,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings",{"_index":1657,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings(req",{"_index":1688,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate",{"_index":1658,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(@request",{"_index":1763,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(req",{"_index":1691,"title":{},"body":{"controllers/UserController.html":{}}}],["good",{"_index":1010,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["goodideareacts",{"_index":1429,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["google",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"interfaces/UpdateSettingsDto.html":{},"dependencies.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["googleapis",{"_index":1914,"title":{},"body":{"dependencies.html":{}}}],["googleauth",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleimage",{"_index":964,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["googlelogin",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":210,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["gridfs",{"_index":615,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"dependencies.html":{}}}],["gridfsbucketreadstream",{"_index":788,"title":{},"body":{"injectables/ImagesService.html":{}}}],["gridfsmulterconfigservice",{"_index":603,"title":{"injectables/GridFsMulterConfigService.html":{}},"body":{"injectables/GridFsMulterConfigService.html":{},"modules/ImagesModule.html":{},"coverage.html":{},"overview.html":{}}}],["gridfsstorage",{"_index":606,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["grow",{"_index":1980,"title":{},"body":{"index.html":{}}}],["haha",{"_index":1015,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["hahareacts",{"_index":1432,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":839,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["handler",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["hapi/joi",{"_index":1886,"title":{},"body":{"dependencies.html":{}}}],["happy",{"_index":535,"title":{},"body":{"injectables/Email.html":{}}}],["heavily",{"_index":1955,"title":{},"body":{"index.html":{}}}],["hello",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["hem",{"_index":960,"title":{},"body":{"injectables/NotificationService.html":{}}}],["here",{"_index":1988,"title":{},"body":{"index.html":{}}}],["hi",{"_index":519,"title":{},"body":{"injectables/Email.html":{}}}],["history",{"_index":989,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["home",{"_index":1139,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["homefeed",{"_index":2008,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":501,"title":{},"body":{"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":639,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":518,"title":{},"body":{"injectables/Email.html":{}}}],["http",{"_index":1446,"title":{},"body":{"modules/SharedModule.html":{}}}],["httpexception",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpexception('not",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception('there",{"_index":1607,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexception('this",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception('topic",{"_index":1610,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexceptionfilter",{"_index":628,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/RecommendationController.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["https://medium.com/@khoa.phan.9xset/nestjs",{"_index":760,"title":{},"body":{"modules/ImagesModule.html":{}}}],["https://nestjs.com",{"_index":1994,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":1615,"title":{},"body":{"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.expectation_failed",{"_index":744,"title":{},"body":{"controllers/ImagesController.html":{}}}],["httpstatus.forbidden",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":644,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.unauthorized",{"_index":1609,"title":{},"body":{"injectables/TopicService.html":{}}}],["iat",{"_index":1050,"title":{},"body":{"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["id",{"_index":398,"title":{},"body":{"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":1011,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["identifier",{"_index":1833,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":322,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/ValidationService.html":{}}}],["ids.length",{"_index":405,"title":{},"body":{"injectables/ChatService.html":{}}}],["ifrest",{"_index":1736,"title":{},"body":{"controllers/UserController.html":{}}}],["im",{"_index":795,"title":{},"body":{"injectables/ImagesService.html":{}}}],["image",{"_index":880,"title":{},"body":{"injectables/NotificationService.html":{}}}],["imageheight",{"_index":441,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid",{"_index":426,"title":{},"body":{"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid').lean",{"_index":1282,"title":{},"body":{"injectables/SearchService.html":{}}}],["imagelink",{"_index":993,"title":{},"body":{"injectables/NotificationService.html":{}}}],["images",{"_index":626,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"injectables/NotificationService.html":{},"controllers/TopicController.html":{}}}],["images.controller",{"_index":764,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":691,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/images.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["images/images.service",{"_index":1502,"title":{},"body":{"controllers/TopicController.html":{}}}],["imagescontroller",{"_index":658,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":44,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["imagesservice",{"_index":690,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"coverage.html":{},"overview.html":{}}}],["imagewidth",{"_index":442,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":617,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["increase",{"_index":970,"title":{},"body":{"injectables/NotificationService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"miscellaneous/functions.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"overview.html":{}}}],["injectconnection",{"_index":786,"title":{},"body":{"injectables/ImagesService.html":{}}}],["injectmodel",{"_index":387,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["injectmodel('board",{"_index":1272,"title":{},"body":{"injectables/SearchService.html":{}}}],["injectmodel('chat",{"_index":393,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('message",{"_index":394,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('pin",{"_index":1273,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["injectmodel('topic",{"_index":1583,"title":{},"body":{"injectables/TopicService.html":{}}}],["injectmodel('user",{"_index":392,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["input",{"_index":1309,"title":{},"body":{"injectables/SearchService.html":{}}}],["inspired",{"_index":759,"title":{},"body":{"modules/ImagesModule.html":{},"injectables/NotificationService.html":{},"index.html":{}}}],["installation",{"_index":1961,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1963,"title":{},"body":{"index.html":{}}}],["instersted",{"_index":1040,"title":{},"body":{"injectables/NotificationService.html":{}}}],["intercept",{"_index":821,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":822,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":844,"title":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["interfaces",{"_index":845,"title":{},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"overview.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["internal",{"_index":654,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["invitation",{"_index":1646,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["isdelivered",{"_index":365,"title":{},"body":{"injectables/ChatService.html":{}}}],["isfollow",{"_index":1587,"title":{},"body":{"injectables/TopicService.html":{}}}],["isfound",{"_index":794,"title":{},"body":{"injectables/ImagesService.html":{}}}],["isgoogle",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["isjoined",{"_index":1814,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["issearch",{"_index":1110,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["isseen",{"_index":309,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["join",{"_index":1986,"title":{},"body":{"index.html":{}}}],["joiners",{"_index":1820,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["jpg",{"_index":726,"title":{},"body":{"controllers/ImagesController.html":{}}}],["jsonwebtoken",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":813,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":1377,"title":{},"body":{"classes/SharedGateway.html":{}}}],["jwtfromrequest",{"_index":814,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":211,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1991,"title":{},"body":{"index.html":{}}}],["keysboard",{"_index":1317,"title":{},"body":{"injectables/SearchService.html":{}}}],["keysboard.length",{"_index":1319,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspeople",{"_index":1320,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin",{"_index":1305,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin.length",{"_index":1314,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin.map(pin",{"_index":1315,"title":{},"body":{"injectables/SearchService.html":{}}}],["last",{"_index":1026,"title":{},"body":{"injectables/NotificationService.html":{}}}],["lastmessage",{"_index":407,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["lastmessage.date",{"_index":429,"title":{},"body":{"injectables/ChatService.html":{}}}],["lastname",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lasttopics",{"_index":2009,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lean",{"_index":1288,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["leave",{"_index":534,"title":{},"body":{"injectables/Email.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":550,"title":{},"body":{"classes/FileInfoVm.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{}}}],["license",{"_index":1997,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1978,"title":{},"body":{"index.html":{}}}],["likecomment",{"_index":1329,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likecomment(socket",{"_index":1345,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply",{"_index":1330,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply(socket",{"_index":1348,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likers",{"_index":1827,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["likes",{"_index":1824,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":864,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["limit(5",{"_index":1313,"title":{},"body":{"injectables/SearchService.html":{}}}],["limitoffset",{"_index":1795,"title":{},"body":{"injectables/ValidationService.html":{}}}],["limitoffset(limit",{"_index":1799,"title":{},"body":{"injectables/ValidationService.html":{}}}],["limitoffsetresult",{"_index":1278,"title":{},"body":{"injectables/SearchService.html":{}}}],["limitoffsetresult.length",{"_index":1280,"title":{},"body":{"injectables/SearchService.html":{}}}],["link",{"_index":443,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/Email.html":{}}}],["literal",{"_index":866,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{}}}],["location",{"_index":1638,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":829,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.log",{"_index":841,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logging.interceptor",{"_index":1447,"title":{},"body":{"modules/SharedModule.html":{}}}],["logginginterceptor",{"_index":819,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["login",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":117,"title":{"interfaces/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":1659,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(@request",{"_index":1777,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(req",{"_index":1694,"title":{},"body":{"controllers/UserController.html":{}}}],["love",{"_index":1008,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["lovereacts",{"_index":1426,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["mailoptions",{"_index":513,"title":{},"body":{"injectables/Email.html":{}}}],["make",{"_index":525,"title":{},"body":{"injectables/Email.html":{},"injectables/TopicService.html":{}}}],["massage",{"_index":902,"title":{},"body":{"injectables/NotificationService.html":{}}}],["massages",{"_index":908,"title":{},"body":{"injectables/NotificationService.html":{}}}],["match",{"_index":1300,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["md5",{"_index":551,"title":{},"body":{"classes/FileInfoVm.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["me(@request",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["me(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["mess",{"_index":399,"title":{},"body":{"injectables/ChatService.html":{}}}],["mess.date",{"_index":413,"title":{},"body":{"injectables/ChatService.html":{}}}],["message",{"_index":314,"title":{"interfaces/message.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/FileResponseVm.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/NotificationService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["message(socket",{"_index":1351,"title":{},"body":{"classes/SharedGateway.html":{}}}],["message._id",{"_index":415,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.reason",{"_index":540,"title":{},"body":{"injectables/Email.html":{}}}],["message.save",{"_index":414,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.tokens",{"_index":981,"title":{},"body":{"injectables/NotificationService.html":{}}}],["message.userid",{"_index":539,"title":{},"body":{"injectables/Email.html":{}}}],["message.username",{"_index":538,"title":{},"body":{"injectables/Email.html":{}}}],["messageid",{"_index":364,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["messagemodel",{"_index":359,"title":{},"body":{"injectables/ChatService.html":{}}}],["messages",{"_index":324,"title":{},"body":{"controllers/ChatController.html":{},"injectables/NotificationService.html":{}}}],["messages.length",{"_index":958,"title":{},"body":{"injectables/NotificationService.html":{}}}],["messagetext",{"_index":1411,"title":{},"body":{"classes/SharedGateway.html":{}}}],["messaging",{"_index":944,"title":{},"body":{"injectables/NotificationService.html":{}}}],["metadata",{"_index":709,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["method",{"_index":651,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["mimetype",{"_index":705,"title":{},"body":{"controllers/ImagesController.html":{}}}],["miscellaneous",{"_index":1942,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1977,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1967,"title":{},"body":{"index.html":{}}}],["model",{"_index":357,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["models/board.schema",{"_index":283,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["models/chat.schema",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{}}}],["models/file",{"_index":545,"title":{},"body":{"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["models/pin.schema",{"_index":285,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/topic.schema",{"_index":287,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/user.schema",{"_index":288,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1889,"title":{},"body":{"dependencies.html":{}}}],["mongo",{"_index":787,"title":{},"body":{"injectables/ImagesService.html":{},"dependencies.html":{}}}],["mongodb",{"_index":789,"title":{},"body":{"injectables/ImagesService.html":{}}}],["mongogridfs",{"_index":785,"title":{},"body":{"injectables/ImagesService.html":{}}}],["mongogridfs(this.connection.db",{"_index":791,"title":{},"body":{"injectables/ImagesService.html":{}}}],["mongoosastic",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":386,"title":{},"body":{"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"dependencies.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["mongoose.schema",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.types.objectid",{"_index":1818,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["mongoose.types.objectid(pinid",{"_index":1594,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoose.types.objectid(userid",{"_index":1633,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoosemodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":289,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.connection_string",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1815,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"index.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["morgan",{"_index":1925,"title":{},"body":{"dependencies.html":{}}}],["multer",{"_index":614,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"modules/ImagesModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":765,"title":{},"body":{"modules/ImagesModule.html":{}}}],["multermodule.registerasync",{"_index":767,"title":{},"body":{"modules/ImagesModule.html":{}}}],["multermoduleoptions",{"_index":610,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["multeroptionsfactory",{"_index":611,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["myśliwiec",{"_index":1992,"title":{},"body":{"index.html":{}}}],["n",{"_index":924,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["nada",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/NotificationService.html":{}}}],["name",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":599,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":598,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["need",{"_index":526,"title":{},"body":{"injectables/Email.html":{}}}],["needed",{"_index":903,"title":{},"body":{"injectables/NotificationService.html":{}}}],["nest",{"_index":1957,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1996,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":830,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":1888,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1445,"title":{},"body":{"modules/SharedModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":612,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":559,"title":{},"body":{"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1371,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["new",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newemail",{"_index":1051,"title":{},"body":{"interfaces/Payload.html":{}}}],["newpassword",{"_index":1700,"title":{},"body":{"controllers/UserController.html":{}}}],["newuser",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":824,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":1948,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":496,"title":{},"body":{"injectables/Email.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":500,"title":{},"body":{"injectables/Email.html":{}}}],["none",{"_index":730,"title":{},"body":{"controllers/ImagesController.html":{}}}],["notacceptableexception",{"_index":1129,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/UserController.html":{}}}],["notacceptableexception('cant",{"_index":1765,"title":{},"body":{"controllers/UserController.html":{}}}],["notacceptableexception('view",{"_index":1761,"title":{},"body":{"controllers/UserController.html":{}}}],["note",{"_index":444,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["notfoundexception('no",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('there",{"_index":326,"title":{},"body":{"controllers/ChatController.html":{}}}],["notification",{"_index":904,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notification.service",{"_index":1450,"title":{},"body":{"modules/SharedModule.html":{}}}],["notificationarray",{"_index":868,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationarray.length",{"_index":1046,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationarray.push(pusheddata",{"_index":1048,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationarray.splice(0",{"_index":1047,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationcounter",{"_index":987,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationdata",{"_index":990,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notificationofpinsactivity",{"_index":2010,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notifications",{"_index":986,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationservice",{"_index":847,"title":{"injectables/NotificationService.html":{}},"body":{"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["notsendtokens",{"_index":943,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notsendtokens.push(tokens[id",{"_index":950,"title":{},"body":{"injectables/NotificationService.html":{}}}],["now",{"_index":834,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":842,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1962,"title":{},"body":{"index.html":{}}}],["null",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["num",{"_index":1809,"title":{},"body":{"injectables/ValidationService.html":{}}}],["number",{"_index":449,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/FileInfoVm.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["oauth20",{"_index":583,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":1802,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectid.isvalid(id",{"_index":1805,"title":{},"body":{"injectables/ValidationService.html":{}}}],["observable",{"_index":828,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["occurred",{"_index":742,"title":{},"body":{"controllers/ImagesController.html":{}}}],["offlinenotifications",{"_index":985,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["offset",{"_index":1094,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["oldpassword",{"_index":1701,"title":{},"body":{"controllers/UserController.html":{}}}],["one",{"_index":940,"title":{},"body":{"injectables/NotificationService.html":{}}}],["open",{"_index":1979,"title":{},"body":{"index.html":{}}}],["optional",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["originalname",{"_index":701,"title":{},"body":{"controllers/ImagesController.html":{}}}],["out",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["overview",{"_index":2001,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":495,"title":{},"body":{"injectables/Email.html":{},"injectables/NotificationService.html":{}}}],["owneruser",{"_index":879,"title":{},"body":{"injectables/NotificationService.html":{}}}],["owneruser.fcmtoken",{"_index":1005,"title":{},"body":{"injectables/NotificationService.html":{}}}],["owneruser.notificationcounter",{"_index":1002,"title":{},"body":{"injectables/NotificationService.html":{}}}],["owneruser.notifications",{"_index":1004,"title":{},"body":{"injectables/NotificationService.html":{}}}],["owneruser.offlinenotifications",{"_index":1006,"title":{},"body":{"injectables/NotificationService.html":{}}}],["owneruser.save",{"_index":1003,"title":{},"body":{"injectables/NotificationService.html":{}}}],["package",{"_index":1881,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":541,"title":{},"body":{"injectables/Email.html":{}}}],["param",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["param('boardid",{"_index":1152,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('id",{"_index":722,"title":{},"body":{"controllers/ImagesController.html":{}}}],["param('pinid",{"_index":1147,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('recieverids",{"_index":320,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('sectionid",{"_index":1155,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('senderid",{"_index":321,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('topicid",{"_index":1511,"title":{},"body":{"controllers/TopicController.html":{}}}],["param('topicname",{"_index":1165,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["parameters",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["params",{"_index":916,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["params.fcmtoken",{"_index":1775,"title":{},"body":{"controllers/UserController.html":{}}}],["params.topicid",{"_index":1534,"title":{},"body":{"controllers/TopicController.html":{}}}],["params.userid",{"_index":1769,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":509,"title":{},"body":{"injectables/Email.html":{}}}],["passport",{"_index":582,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":580,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":585,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"interfaces/LoginDto.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":649,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["path.resolve(filepath",{"_index":728,"title":{},"body":{"controllers/ImagesController.html":{}}}],["payload",{"_index":140,"title":{"interfaces/Payload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["permissions.dto.ts",{"_index":473,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["permissions.dto.ts:2",{"_index":481,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:3",{"_index":486,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:4",{"_index":482,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:5",{"_index":480,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:6",{"_index":484,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:7",{"_index":485,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:8",{"_index":483,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["personalization",{"_index":463,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["phantom",{"_index":514,"title":{},"body":{"injectables/Email.html":{},"injectables/NotificationService.html":{}}}],["photos",{"_index":595,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":601,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":600,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pin",{"_index":284,"title":{"interfaces/pin.html":{}},"body":{"modules/BoardModule.html":{},"injectables/Email.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["pin.counts.goodideareacts",{"_index":1431,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.goodideareacts.valueof",{"_index":1430,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts",{"_index":1434,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts.valueof",{"_index":1433,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts",{"_index":1428,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts.valueof",{"_index":1427,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts",{"_index":1437,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts.valueof",{"_index":1436,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts",{"_index":1425,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts.valueof",{"_index":1424,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.dto.ts",{"_index":439,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["pin.dto.ts:10",{"_index":457,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:2",{"_index":451,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:3",{"_index":452,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:4",{"_index":450,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:5",{"_index":454,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:6",{"_index":456,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:7",{"_index":448,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:8",{"_index":455,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:9",{"_index":453,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.save().catch(err",{"_index":1597,"title":{},"body":{"injectables/TopicService.html":{}}}],["pin.title",{"_index":1316,"title":{},"body":{"injectables/SearchService.html":{}}}],["pin.topic",{"_index":1596,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinid",{"_index":877,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinmodel",{"_index":1250,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["pinname",{"_index":876,"title":{},"body":{"injectables/NotificationService.html":{}}}],["pins",{"_index":887,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pins.controller",{"_index":1059,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins.length",{"_index":1515,"title":{},"body":{"controllers/TopicController.html":{}}}],["pins.push(pin",{"_index":1605,"title":{},"body":{"injectables/TopicService.html":{}}}],["pins.service",{"_index":1060,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins/pins.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["pinscontroller",{"_index":1058,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{}}}],["pinsforyou",{"_index":853,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsforyou(user",{"_index":886,"title":{},"body":{"injectables/NotificationService.html":{}}}],["pinsids",{"_index":1603,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinsinspired",{"_index":854,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsinspired(user",{"_index":889,"title":{},"body":{"injectables/NotificationService.html":{}}}],["pinslength",{"_index":1626,"title":{},"body":{"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinsmodule",{"_index":45,"title":{"modules/PinsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["pinsnotification",{"_index":1647,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsservice",{"_index":1056,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{},"overview.html":{}}}],["pipe",{"_index":840,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["please",{"_index":517,"title":{},"body":{"injectables/Email.html":{},"index.html":{}}}],["popular",{"_index":1033,"title":{},"body":{"injectables/NotificationService.html":{}}}],["popularpins",{"_index":855,"title":{},"body":{"injectables/NotificationService.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["popularpins(user",{"_index":891,"title":{},"body":{"injectables/NotificationService.html":{}}}],["port",{"_index":503,"title":{},"body":{"injectables/Email.html":{}}}],["post",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{}}}],["post('/createtopic",{"_index":1521,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/createtopics",{"_index":1481,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/forget",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/me/uploadimage",{"_index":694,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/me/uploadimage')@apiconsumes('multipart/form",{"_index":679,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/seendeliver",{"_index":330,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sentmessage",{"_index":336,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sign_up",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/sign_up/confirm",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/topic/addpin",{"_index":1516,"title":{},"body":{"controllers/TopicController.html":{}}}],["prefix",{"_index":1195,"title":{},"body":{"controllers/SearchController.html":{}}}],["private",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["privatekey",{"_index":922,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["privatekeyid",{"_index":920,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["process.env.base_url}/api/google/redirect",{"_index":592,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.connection_string",{"_index":620,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["process.env.front_base_url",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["process.env.google_client_id",{"_index":588,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":590,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.secret_key",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{}}}],["production",{"_index":1969,"title":{},"body":{"index.html":{}}}],["profile",{"_index":574,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["profileimage",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["profileurl",{"_index":1819,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1947,"title":{},"body":{"index.html":{}}}],["project",{"_index":1301,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{},"index.html":{}}}],["projectid",{"_index":918,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":579,"title":{},"body":{"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/TopicService.html":{}}}],["promise((resolve",{"_index":621,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["properties",{"_index":440,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GridFsMulterConfigService.html":{},"injectables/ImagesService.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["provide",{"_index":1452,"title":{},"body":{"modules/SharedModule.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["pull",{"_index":1290,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["push",{"_index":1298,"title":{},"body":{"injectables/SearchService.html":{}}}],["pusheddata",{"_index":865,"title":{},"body":{"injectables/NotificationService.html":{}}}],["put",{"_index":1130,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/edit",{"_index":1467,"title":{},"body":{"controllers/TopicController.html":{}}}],["put('/home/me",{"_index":1136,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/log",{"_index":1776,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/:fcmtoken",{"_index":1772,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/boards/view",{"_index":1755,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/confirm",{"_index":1744,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/follow",{"_index":1531,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/me/reset",{"_index":1731,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/update",{"_index":1738,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/more/boards/:boardid",{"_index":1151,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/pins/:pinid",{"_index":1145,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/sections/:boardid/:sectionid",{"_index":1154,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["query",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('issearch",{"_index":1175,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["query('limit",{"_index":1142,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('name",{"_index":1226,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('offset",{"_index":1143,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('recentsearch",{"_index":1227,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('topic",{"_index":723,"title":{},"body":{"controllers/ImagesController.html":{}}}],["query('type",{"_index":1745,"title":{},"body":{"controllers/UserController.html":{}}}],["query('viewstate",{"_index":1756,"title":{},"body":{"controllers/UserController.html":{}}}],["react",{"_index":895,"title":{},"body":{"injectables/NotificationService.html":{}}}],["reactpin",{"_index":856,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["reactpin(owneruser",{"_index":893,"title":{},"body":{"injectables/NotificationService.html":{}}}],["reactpin(socket",{"_index":1354,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reacts",{"_index":1830,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reacttype",{"_index":1419,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["reactuser",{"_index":894,"title":{},"body":{"injectables/NotificationService.html":{}}}],["reactuser.firstname",{"_index":1023,"title":{},"body":{"injectables/NotificationService.html":{}}}],["reactuser.lastname",{"_index":1024,"title":{},"body":{"injectables/NotificationService.html":{}}}],["read",{"_index":1987,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["readstream",{"_index":773,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readstream(id",{"_index":783,"title":{},"body":{"injectables/ImagesService.html":{}}}],["really",{"_index":531,"title":{},"body":{"injectables/Email.html":{}}}],["recent",{"_index":1041,"title":{},"body":{"injectables/NotificationService.html":{}}}],["recentsearch",{"_index":1204,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["recievedmessages",{"_index":2011,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["reciever",{"_index":1388,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.firstname",{"_index":1397,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.lastname",{"_index":1398,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.profileimage",{"_index":1393,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recieverid",{"_index":307,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["recieverids",{"_index":305,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["recieverids.concat(senderid",{"_index":401,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverids.split",{"_index":323,"title":{},"body":{"controllers/ChatController.html":{}}}],["recieverids[0",{"_index":396,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverimage",{"_index":1392,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recievername",{"_index":1396,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recommendation.controller",{"_index":1187,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["recommendation.service",{"_index":1134,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{}}}],["recommendation/recommendation.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["recommendationcontroller",{"_index":1062,"title":{"controllers/RecommendationController.html":{}},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{}}}],["recommendationmodule",{"_index":46,"title":{"modules/RecommendationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"modules.html":{},"overview.html":{}}}],["recommendationservice",{"_index":1133,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{},"overview.html":{}}}],["recommendedusers",{"_index":2007,"title":{},"body":{"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":573,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["regex",{"_index":1311,"title":{},"body":{"injectables/SearchService.html":{}}}],["regexmatch",{"_index":1308,"title":{},"body":{"injectables/SearchService.html":{}}}],["registerdto",{"_index":125,"title":{"interfaces/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["reject",{"_index":622,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["rejectunauthorized",{"_index":512,"title":{},"body":{"injectables/Email.html":{}}}],["repins",{"_index":2016,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["replier",{"_index":1826,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["replies",{"_index":1825,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply",{"_index":1331,"title":{"interfaces/reply.html":{}},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply(socket",{"_index":1357,"title":{},"body":{"classes/SharedGateway.html":{}}}],["report",{"_index":536,"title":{},"body":{"injectables/Email.html":{}}}],["reported",{"_index":537,"title":{},"body":{"injectables/Email.html":{}}}],["repository",{"_index":1960,"title":{},"body":{"index.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.header('authorization",{"_index":1750,"title":{},"body":{"controllers/UserController.html":{}}}],["req.method",{"_index":837,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.settimeout(0",{"_index":698,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{}}}],["req.url",{"_index":838,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.user",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["req.user._id",{"_index":1138,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["req.user.email",{"_index":1746,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.firstname",{"_index":1751,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.newemail",{"_index":1747,"title":{},"body":{"controllers/UserController.html":{}}}],["reqired",{"_index":1735,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["request.method",{"_index":652,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":650,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('cors",{"_index":2036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('fs",{"_index":2037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":1375,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["require('mongoose').types.objectid",{"_index":1803,"title":{},"body":{"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["require('morgan",{"_index":2038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('path",{"_index":693,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"injectables/SearchService.html":{}}}],["res.header('content",{"_index":737,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.redirect",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.sendfile(resolvedpath",{"_index":729,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.success",{"_index":949,"title":{},"body":{"injectables/NotificationService.html":{}}}],["reset",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetemail",{"_index":1752,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword",{"_index":1660,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword(req",{"_index":1699,"title":{},"body":{"controllers/UserController.html":{}}}],["resolve(fileinfo",{"_index":627,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["resolvedpath",{"_index":727,"title":{},"body":{"controllers/ImagesController.html":{}}}],["response",{"_index":563,"title":{},"body":{"classes/FileResponseVm.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"coverage.html":{}}}],["response.failurecount",{"_index":947,"title":{},"body":{"injectables/NotificationService.html":{}}}],["response.push(filereponse",{"_index":718,"title":{},"body":{"controllers/ImagesController.html":{}}}],["response.responses.foreach((res",{"_index":948,"title":{},"body":{"injectables/NotificationService.html":{}}}],["response.status(status).json(errorresponse",{"_index":657,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["result.chunksize",{"_index":802,"title":{},"body":{"injectables/ImagesService.html":{}}}],["result.contenttype",{"_index":804,"title":{},"body":{"injectables/ImagesService.html":{}}}],["result.filename",{"_index":800,"title":{},"body":{"injectables/ImagesService.html":{}}}],["result.length",{"_index":801,"title":{},"body":{"injectables/ImagesService.html":{}}}],["result.md5",{"_index":803,"title":{},"body":{"injectables/ImagesService.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":743,"title":{},"body":{"controllers/ImagesController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GridFsMulterConfigService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["rimraf",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1965,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":831,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":833,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sad",{"_index":533,"title":{},"body":{"injectables/Email.html":{}}}],["savedpins",{"_index":2012,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["savepin",{"_index":479,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["savers",{"_index":1828,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["saves",{"_index":2017,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":1952,"title":{},"body":{"index.html":{}}}],["schema",{"_index":290,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":593,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["search",{"_index":1196,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["search(model",{"_index":1275,"title":{},"body":{"injectables/SearchService.html":{}}}],["search.controller",{"_index":1245,"title":{},"body":{"modules/SearchModule.html":{}}}],["search.service",{"_index":1223,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{}}}],["search/search.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["searchcontroller",{"_index":1193,"title":{"controllers/SearchController.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"coverage.html":{}}}],["searcher",{"_index":1274,"title":{},"body":{"injectables/SearchService.html":{}}}],["searcher.search(name",{"_index":1277,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchmodule",{"_index":47,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["searchservice",{"_index":1222,"title":{"injectables/SearchService.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"coverage.html":{},"overview.html":{}}}],["seconduserid",{"_index":374,"title":{},"body":{"injectables/ChatService.html":{}}}],["secretorkey",{"_index":816,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":445,"title":{"interfaces/section.html":{}},"body":{"classes/CreatePinDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sectionid",{"_index":1090,"title":{},"body":{"controllers/RecommendationController.html":{},"miscellaneous/variables.html":{}}}],["sectionname",{"_index":1816,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sections",{"_index":1323,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":505,"title":{},"body":{"injectables/Email.html":{}}}],["seen",{"_index":353,"title":{},"body":{"injectables/ChatService.html":{}}}],["seen(userid",{"_index":377,"title":{},"body":{"injectables/ChatService.html":{}}}],["seendeliver",{"_index":295,"title":{},"body":{"controllers/ChatController.html":{}}}],["seendeliver(senderid",{"_index":306,"title":{},"body":{"controllers/ChatController.html":{}}}],["seenmessage",{"_index":354,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["seenmessage(senderid",{"_index":379,"title":{},"body":{"injectables/ChatService.html":{}}}],["seenmessage(socket",{"_index":1360,"title":{},"body":{"classes/SharedGateway.html":{}}}],["seenstatus",{"_index":421,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":493,"title":{},"body":{"injectables/Email.html":{},"injectables/NotificationService.html":{},"modules/SharedModule.html":{}}}],["sendemail",{"_index":489,"title":{},"body":{"injectables/Email.html":{}}}],["sendemail(email",{"_index":491,"title":{},"body":{"injectables/Email.html":{}}}],["sender",{"_index":1385,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.firstname",{"_index":1400,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.lastname",{"_index":1401,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.profileimage",{"_index":1395,"title":{},"body":{"classes/SharedGateway.html":{}}}],["senderid",{"_index":302,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["senderimage",{"_index":1394,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendername",{"_index":1399,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendmessage",{"_index":355,"title":{},"body":{"injectables/ChatService.html":{}}}],["sendmessage(senderid",{"_index":381,"title":{},"body":{"injectables/ChatService.html":{}}}],["sendmulticast(message",{"_index":945,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification",{"_index":857,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendnotification(tokens",{"_index":897,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendofflinenotification",{"_index":858,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sendofflinenotification(messages",{"_index":905,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sent",{"_index":952,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sentmessage",{"_index":296,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["sentmessage(senderid",{"_index":313,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["sentmessages",{"_index":2013,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":655,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["set",{"_index":406,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/UserController.html":{}}}],["setfcmtoken",{"_index":1661,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(@param",{"_index":1773,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(params",{"_index":1704,"title":{},"body":{"controllers/UserController.html":{}}}],["settings",{"_index":1718,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto",{"_index":1722,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto.ts",{"_index":1640,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["setuserid",{"_index":1332,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setuserid(socket",{"_index":1363,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setviewstate",{"_index":1662,"title":{},"body":{"controllers/UserController.html":{}}}],["setviewstate(req",{"_index":1707,"title":{},"body":{"controllers/UserController.html":{}}}],["shared.gateway",{"_index":1449,"title":{},"body":{"modules/SharedModule.html":{}}}],["shared/http",{"_index":1131,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["shared/notification.service",{"_index":1061,"title":{},"body":{"modules/PinsModule.html":{},"modules/RecommendationModule.html":{}}}],["shared/send",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["shared/shared.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["shared/validation.service",{"_index":390,"title":{},"body":{"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["sharedgateway",{"_index":1326,"title":{"classes/SharedGateway.html":{}},"body":{"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["sharedmodule",{"_index":48,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["side",{"_index":1953,"title":{},"body":{"index.html":{}}}],["sign",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{}}}],["sign(payload",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign_up",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(@body",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(userdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["signpayload",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["signpayload(payload",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["size",{"_index":404,"title":{},"body":{"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["smtp.gmail.com",{"_index":502,"title":{},"body":{"injectables/Email.html":{}}}],["socket",{"_index":1336,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.emit('sendcomment",{"_index":1383,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.emit('sendpinreact",{"_index":1418,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.emit('sendreply",{"_index":1415,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.id",{"_index":1381,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.io",{"_index":1372,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["socket.to(reciever.socketid).emit('istyping",{"_index":1391,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.to(reciever.socketid).emit('sendmessage",{"_index":1414,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.to(reciever.socketid).emit('setdelivered",{"_index":1407,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.to(reciever.socketid).emit('setseen",{"_index":1409,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socketid",{"_index":1379,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["someone",{"_index":1007,"title":{},"body":{"injectables/NotificationService.html":{}}}],["sort",{"_index":423,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{}}}],["sorttype",{"_index":2014,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"index.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["specificelements",{"_index":1800,"title":{},"body":{"injectables/ValidationService.html":{}}}],["specificelements.length",{"_index":1808,"title":{},"body":{"injectables/ValidationService.html":{}}}],["sponsors",{"_index":1981,"title":{},"body":{"index.html":{}}}],["src/.../board.schema.ts",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chat.schema.ts",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../images.controller.ts",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1944,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message.schema.ts",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification.service.ts",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pin.schema.ts",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shared.gateway.ts",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../topic.schema.ts",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation.service.ts",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:7",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:110",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:123",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:51",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:85",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:91",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":846,"title":{},"body":{"interfaces/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":1188,"title":{},"body":{"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":569,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:17",{"_index":577,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":571,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":806,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:24",{"_index":811,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":808,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/board/board.controller.ts",{"_index":1841,"title":{},"body":{"coverage.html":{}}}],["src/board/board.module.ts",{"_index":278,"title":{},"body":{"modules/BoardModule.html":{}}}],["src/board/board.service.ts",{"_index":1843,"title":{},"body":{"coverage.html":{}}}],["src/board/dto/edit",{"_index":459,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts",{"_index":292,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:21",{"_index":304,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:31",{"_index":299,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:39",{"_index":312,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:52",{"_index":316,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.module.ts",{"_index":344,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service",{"_index":1373,"title":{},"body":{"classes/SharedGateway.html":{},"modules/SharedModule.html":{}}}],["src/chat/chat.service.ts",{"_index":349,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:10",{"_index":361,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:101",{"_index":378,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:113",{"_index":380,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:142",{"_index":368,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:150",{"_index":375,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:168",{"_index":384,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:18",{"_index":383,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:44",{"_index":371,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:58",{"_index":369,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:82",{"_index":366,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/images/file",{"_index":544,"title":{},"body":{"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"coverage.html":{}}}],["src/images/images.controller.ts",{"_index":659,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/images/images.controller.ts:100",{"_index":671,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:117",{"_index":668,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:33",{"_index":681,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:58",{"_index":677,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:64",{"_index":674,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.module.ts",{"_index":757,"title":{},"body":{"modules/ImagesModule.html":{}}}],["src/images/images.service.ts",{"_index":769,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{}}}],["src/images/images.service.ts:10",{"_index":776,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:19",{"_index":784,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:22",{"_index":778,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:36",{"_index":782,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:43",{"_index":781,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:57",{"_index":779,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/multer",{"_index":604,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1852,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/models/board.schema.ts",{"_index":1855,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/chat.schema",{"_index":1451,"title":{},"body":{"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/chat.schema.ts",{"_index":1856,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/message.schema",{"_index":348,"title":{},"body":{"modules/ChatModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/message.schema.ts",{"_index":1857,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/pin.schema.ts",{"_index":1858,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/topic.schema.ts",{"_index":1859,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.schema",{"_index":1792,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user.schema.ts",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pins/dto/create",{"_index":438,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["src/pins/pins.controller.ts",{"_index":1861,"title":{},"body":{"coverage.html":{}}}],["src/pins/pins.module.ts",{"_index":1057,"title":{},"body":{"modules/PinsModule.html":{}}}],["src/pins/pins.service.ts",{"_index":1862,"title":{},"body":{"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts",{"_index":1063,"title":{},"body":{"controllers/RecommendationController.html":{},"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts:103",{"_index":1092,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:124",{"_index":1096,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:143",{"_index":1121,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:164",{"_index":1102,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:178",{"_index":1124,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:196",{"_index":1127,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:210",{"_index":1099,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:222",{"_index":1118,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:234",{"_index":1112,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:246",{"_index":1115,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:26",{"_index":1085,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:38",{"_index":1105,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:57",{"_index":1088,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:69",{"_index":1108,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:88",{"_index":1082,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.module.ts",{"_index":1186,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["src/recommendation/recommendation.service.ts",{"_index":1865,"title":{},"body":{"coverage.html":{}}}],["src/search/search.controller.ts",{"_index":1194,"title":{},"body":{"controllers/SearchController.html":{},"coverage.html":{}}}],["src/search/search.controller.ts:16",{"_index":1206,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:33",{"_index":1215,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:51",{"_index":1218,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:68",{"_index":1209,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:85",{"_index":1221,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:96",{"_index":1212,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.module.ts",{"_index":1244,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/search/search.service.ts",{"_index":1247,"title":{},"body":{"injectables/SearchService.html":{},"coverage.html":{}}}],["src/search/search.service.ts:10",{"_index":1251,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:106",{"_index":1268,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:113",{"_index":1260,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:17",{"_index":1256,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:30",{"_index":1258,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:34",{"_index":1264,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:42",{"_index":1254,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:54",{"_index":1266,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:78",{"_index":1262,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/shared/http",{"_index":629,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts",{"_index":820,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts:13",{"_index":826,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/notification.service.ts",{"_index":848,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/notification.service.ts:151",{"_index":911,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:22",{"_index":861,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:228",{"_index":878,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:314",{"_index":896,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:33",{"_index":898,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:404",{"_index":913,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:442",{"_index":872,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:500",{"_index":892,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:561",{"_index":888,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:61",{"_index":907,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:616",{"_index":890,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:671",{"_index":867,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/notification.service.ts:79",{"_index":883,"title":{},"body":{"injectables/NotificationService.html":{}}}],["src/shared/send",{"_index":487,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["src/shared/shared.gateway.ts",{"_index":1327,"title":{},"body":{"classes/SharedGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/shared.gateway.ts:118",{"_index":1359,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:12",{"_index":1334,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:123",{"_index":1356,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:162",{"_index":1347,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:187",{"_index":1350,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:19",{"_index":1365,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:218",{"_index":1338,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:31",{"_index":1341,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:35",{"_index":1368,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:52",{"_index":1344,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:73",{"_index":1362,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:92",{"_index":1353,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.module.ts",{"_index":1442,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/shared/validation.service.ts",{"_index":1793,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validation.service.ts:10",{"_index":1798,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:17",{"_index":1801,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:7",{"_index":1796,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/topic/topic.controller.ts",{"_index":1454,"title":{},"body":{"controllers/TopicController.html":{},"coverage.html":{}}}],["src/topic/topic.controller.ts:100",{"_index":1468,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:108",{"_index":1488,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:115",{"_index":1501,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:122",{"_index":1476,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:132",{"_index":1485,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:25",{"_index":1498,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:34",{"_index":1495,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:43",{"_index":1492,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:62",{"_index":1472,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:72",{"_index":1479,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:91",{"_index":1482,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.module.ts",{"_index":1549,"title":{},"body":{"modules/TopicModule.html":{}}}],["src/topic/topic.service.ts",{"_index":1551,"title":{},"body":{"injectables/TopicService.html":{},"coverage.html":{}}}],["src/topic/topic.service.ts:110",{"_index":1573,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:135",{"_index":1563,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:157",{"_index":1571,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:16",{"_index":1558,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:208",{"_index":1581,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:25",{"_index":1579,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:250",{"_index":1568,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:31",{"_index":1566,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:42",{"_index":1564,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:61",{"_index":1575,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:70",{"_index":1577,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:90",{"_index":1561,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/types/board.ts",{"_index":1810,"title":{},"body":{"interfaces/board.html":{},"coverage.html":{},"interfaces/section.html":{}}}],["src/types/chat.ts",{"_index":1821,"title":{},"body":{"interfaces/chat.html":{},"coverage.html":{}}}],["src/types/message",{"_index":391,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/types/message.ts",{"_index":1869,"title":{},"body":{"coverage.html":{},"interfaces/message.html":{}}}],["src/types/payload.ts",{"_index":1049,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/types/pin.ts",{"_index":1822,"title":{},"body":{"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{}}}],["src/types/topic.ts",{"_index":1871,"title":{},"body":{"coverage.html":{},"interfaces/topic.html":{}}}],["src/types/user.ts",{"_index":1873,"title":{},"body":{"coverage.html":{},"interfaces/user.html":{}}}],["src/user/dto/update",{"_index":1635,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1649,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:142",{"_index":1710,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:155",{"_index":1693,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:166",{"_index":1673,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:173",{"_index":1712,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:180",{"_index":1706,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:189",{"_index":1696,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:195",{"_index":1667,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:207",{"_index":1676,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:217",{"_index":1678,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:227",{"_index":1687,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:238",{"_index":1690,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":1698,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":1681,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":1684,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":1703,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":1716,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:80",{"_index":1719,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:95",{"_index":1671,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"modules/TopicModule.html":{}}}],["src/user/user.module.ts",{"_index":1790,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1876,"title":{},"body":{"coverage.html":{}}}],["src/utilities/user.decorator.ts",{"_index":1878,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":1806,"title":{},"body":{"injectables/ValidationService.html":{},"index.html":{}}}],["start:dev",{"_index":1968,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1970,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":464,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1946,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1959,"title":{},"body":{"index.html":{}}}],["state",{"_index":1766,"title":{},"body":{"controllers/UserController.html":{}}}],["statements",{"_index":1834,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":725,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["static/default.jpg",{"_index":731,"title":{},"body":{"controllers/ImagesController.html":{}}}],["status",{"_index":642,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":1989,"title":{},"body":{"index.html":{}}}],["storage",{"_index":616,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"dependencies.html":{}}}],["strategies/google.strategy",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":581,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["string(arraymessage.title",{"_index":1029,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(commenteruser._id",{"_index":997,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(commenteruser.google",{"_index":995,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(commenteruser.googleimage",{"_index":996,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(commenteruser.profileimage",{"_index":994,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(followeruser._id",{"_index":968,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(followeruser.google",{"_index":966,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(followeruser.googleimage",{"_index":967,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(followeruser.profileimage",{"_index":965,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(last.title",{"_index":1028,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(process.env.email",{"_index":508,"title":{},"body":{"injectables/Email.html":{}}}],["string(process.env.email_password",{"_index":510,"title":{},"body":{"injectables/Email.html":{}}}],["string(process.env.firebase_creadential_auth_provider_x509_cert_url",{"_index":933,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_auth_uri",{"_index":929,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_client_email",{"_index":927,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_client_id",{"_index":926,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_client_x509_cert_url",{"_index":935,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_private_key.replace(/\\\\n/g",{"_index":923,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_private_key_id",{"_index":921,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_project_id",{"_index":919,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_token_uri",{"_index":931,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_type",{"_index":917,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.front_base_url",{"_index":998,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(reactuser._id",{"_index":1022,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(reactuser.google",{"_index":1020,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(reactuser.googleimage",{"_index":1021,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(reactuser.profileimage",{"_index":1019,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(user",{"_index":433,"title":{},"body":{"injectables/ChatService.html":{}}}],["string(user.fcmtoken",{"_index":1043,"title":{},"body":{"injectables/NotificationService.html":{}}}],["string(userid",{"_index":434,"title":{},"body":{"injectables/ChatService.html":{}}}],["subject",{"_index":515,"title":{},"body":{"injectables/Email.html":{}}}],["subscribemessage",{"_index":1369,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('clearuserid",{"_index":1337,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('comment",{"_index":1340,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('delivered",{"_index":1343,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likecomment",{"_index":1346,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likereply",{"_index":1349,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('message",{"_index":1352,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reactpin",{"_index":1355,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reply",{"_index":1358,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('seen",{"_index":1361,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('setuserid",{"_index":1364,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('typing",{"_index":1367,"title":{},"body":{"classes/SharedGateway.html":{}}}],["success",{"_index":1759,"title":{},"body":{"controllers/UserController.html":{}}}],["successfully",{"_index":953,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/TopicController.html":{}}}],["such",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":586,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":1982,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":528,"title":{},"body":{"injectables/Email.html":{}}}],["svg",{"_index":1999,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1880,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1879,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":832,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["test",{"_index":1973,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1976,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1975,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1972,"title":{},"body":{"index.html":{}}}],["text",{"_index":382,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/SearchService.html":{}}}],["thanks",{"_index":1013,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{},"index.html":{}}}],["thanksreacts",{"_index":1435,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["then(response",{"_index":946,"title":{},"body":{"injectables/NotificationService.html":{}}}],["think",{"_index":1039,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.addtolimitedarray",{"_index":977,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.googlelogin(req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(payload",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(userdto",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.boardmodel",{"_index":1318,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.boardmodel.aggregate",{"_index":1322,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.chatmodel",{"_index":408,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.find",{"_index":428,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findone",{"_index":418,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findoneandupdate",{"_index":402,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatservice.deliver(recieverid",{"_index":1408,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.getchats(userid",{"_index":329,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.getmessage(ids",{"_index":325,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.seen(recieverid",{"_index":1410,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.seenmessage(senderid",{"_index":335,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.sendmessage",{"_index":1413,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.sendmessage(senderid",{"_index":339,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.checkfollowtopic(userid",{"_index":1613,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.email.sendemail",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.filemodel",{"_index":790,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.filemodel.delete(id",{"_index":805,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.filemodel.find",{"_index":797,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.filemodel.findbyid(id",{"_index":799,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.filemodel.findbyid(id).catch(err",{"_index":796,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.filemodel.readfilestream(id",{"_index":792,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.fuzzy",{"_index":1303,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.fuzzy(pin",{"_index":1283,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.gettopicbyid(topicid",{"_index":1601,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.gridfsstorage",{"_index":618,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{}}}],["this.imagesservice.checkimage(id",{"_index":733,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.deletefile(id",{"_index":749,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.findinfo(id",{"_index":734,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.findinfo2",{"_index":721,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.readstream(id",{"_index":736,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.messagemodel",{"_index":410,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.find",{"_index":420,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.pinmodel",{"_index":1284,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.find",{"_index":1281,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.findbyid(data.pinid",{"_index":1416,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.pinmodel.findbyid(id",{"_index":1595,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.recommendationservice.boardmorelike(userid",{"_index":1153,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.boardsforyou(userid",{"_index":1172,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.followallrecommendation",{"_index":1163,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getboardmorelike",{"_index":1158,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.gethomefeed",{"_index":1144,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getpinmorelike",{"_index":1150,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getsectionmorelike",{"_index":1160,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.homefeed(userid",{"_index":1140,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinmorelike(userid",{"_index":1148,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsforyou(userid",{"_index":1179,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsinspired(userid",{"_index":1181,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.popularpins(userid",{"_index":1176,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.sectionmorelike",{"_index":1156,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.topicrecommendation",{"_index":1166,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.trendingrecommendation",{"_index":1169,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.searchservice.addtorecentsearch(userid",{"_index":1228,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getallpins(name",{"_index":1229,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getboards(name",{"_index":1236,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getkeys(name",{"_index":1240,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getmypins(name",{"_index":1231,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getpeople(name",{"_index":1234,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getrecentsearch(userid",{"_index":1238,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.sendnotification",{"_index":983,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.sendnotification([user.fcmtoken",{"_index":1037,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.topicmodel",{"_index":1629,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.aggregate",{"_index":1632,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.find",{"_index":1585,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.findbyid(topicid",{"_index":1616,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicservice.addpintotopic(topicname",{"_index":1519,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.checkfollowtopic(req.user._id",{"_index":1542,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.createtopic",{"_index":1526,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.edittopic(topics",{"_index":1530,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followingtopics(req.user._id",{"_index":1545,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followtopic(req.user._id",{"_index":1533,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.getpinsoftopic",{"_index":1514,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopicbyid(topicid",{"_index":1512,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopics(userid",{"_index":1507,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.topicsseeds(topics",{"_index":1528,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.unfollowtopic(req.user._id",{"_index":1538,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.usermodel",{"_index":1296,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.usermodel.aggregate",{"_index":1299,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.findbyid(recieverid",{"_index":1389,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(senderid",{"_index":1386,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1321,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":1289,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.syncindexes",{"_index":1304,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.userservice.checkcreatedata(userdto",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkfollowuser(user",{"_index":1778,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat",{"_index":1749,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat(body.email",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(email",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(user.email",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.checkupdatedata(updatedata",{"_index":1739,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(req.user",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(req.user._id",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findbylogin(userdto",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.followuser(req.user._id",{"_index":1768,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(payload._id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(req.user._id",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(userid",{"_index":1608,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.userservice.getuserme(params.id",{"_index":1730,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserme(req.user._id",{"_index":1725,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusernotifications(req.user._id",{"_index":1728,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getviewstate(req.user._id",{"_index":1764,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.resetpassword",{"_index":1737,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setemail(req.user._id",{"_index":1754,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setviewstate(req.user._id",{"_index":1758,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.unfollowuser(req.user._id",{"_index":1771,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatedatainuser(req.user._id",{"_index":1742,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatefcmtocken",{"_index":1774,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatesettings(req.user._id",{"_index":1743,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserinfo(req.user._id",{"_index":1740,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(params.userid",{"_index":1783,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(req.user._id",{"_index":1780,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(params.userid",{"_index":1785,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(req.user._id",{"_index":1781,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validationservice.checkmongooseid([id",{"_index":793,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.validationservice.checkmongooseid([pinid",{"_index":1593,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([senderid",{"_index":395,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.checkmongooseid([topicid",{"_index":1600,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([userid",{"_index":427,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid(userids",{"_index":416,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.limitoffset",{"_index":1279,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["throw",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["time",{"_index":308,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/NotificationService.html":{},"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":647,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":446,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["tls",{"_index":511,"title":{},"body":{"injectables/Email.html":{}}}],["token",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/NotificationService.html":{},"classes/SharedGateway.html":{},"controllers/UserController.html":{}}}],["tokens",{"_index":899,"title":{},"body":{"injectables/NotificationService.html":{}}}],["tokenuri",{"_index":930,"title":{},"body":{"injectables/NotificationService.html":{},"miscellaneous/variables.html":{}}}],["topic",{"_index":286,"title":{"interfaces/topic.html":{}},"body":{"modules/BoardModule.html":{},"classes/EditBoardDto.html":{},"controllers/ImagesController.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["topic._id",{"_index":1589,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.controller",{"_index":1550,"title":{},"body":{"modules/TopicModule.html":{}}}],["topic.description",{"_index":1591,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers",{"_index":1611,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.includes(userid",{"_index":1588,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.length",{"_index":1612,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.push(userid",{"_index":1617,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.imageid",{"_index":1592,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.name",{"_index":1590,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins",{"_index":1604,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins.length",{"_index":1602,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.save",{"_index":1618,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.service",{"_index":1504,"title":{},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{}}}],["topic/:topicid",{"_index":1475,"title":{},"body":{"controllers/TopicController.html":{}}}],["topic/topic.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["topic[0].pins.push(pinid",{"_index":1598,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic[0].save().catch(err",{"_index":1599,"title":{},"body":{"injectables/TopicService.html":{}}}],["topiccontroller",{"_index":1453,"title":{"controllers/TopicController.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"coverage.html":{}}}],["topicid",{"_index":1490,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topicmodel",{"_index":1559,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicmodule",{"_index":49,"title":{"modules/TopicModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["topicname",{"_index":447,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["topics",{"_index":1469,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topics.map(topic",{"_index":1586,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicservice",{"_index":1503,"title":{"injectables/TopicService.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"coverage.html":{},"overview.html":{}}}],["topicsseeds",{"_index":1556,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicsseeds(topics",{"_index":1578,"title":{},"body":{"injectables/TopicService.html":{}}}],["touch",{"_index":1990,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":561,"title":{},"body":{"classes/FileInfoVm.html":{},"dependencies.html":{}}}],["transporter",{"_index":499,"title":{},"body":{"injectables/Email.html":{}}}],["transporter.sendmail(mailoptions",{"_index":542,"title":{},"body":{"injectables/Email.html":{}}}],["true",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1995,"title":{},"body":{"index.html":{}}}],["type",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"classes/FileInfoVm.html":{},"classes/FileResponseVm.html":{},"injectables/GoogleStrategy.html":{},"injectables/GridFsMulterConfigService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"injectables/NotificationService.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["type(socket",{"_index":1366,"title":{},"body":{"classes/SharedGateway.html":{}}}],["types",{"_index":1269,"title":{},"body":{"injectables/SearchService.html":{}}}],["types.objectid(userid",{"_index":1287,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/board",{"_index":1270,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/chat",{"_index":389,"title":{},"body":{"injectables/ChatService.html":{}}}],["types/fuzzy",{"_index":1899,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1901,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["types/payload",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["types/pin",{"_index":1271,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["types/topic",{"_index":1582,"title":{},"body":{"injectables/TopicService.html":{}}}],["types/user",{"_index":388,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/ValidationService.html":{}}}],["typescript",{"_index":1958,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":385,"title":{},"body":{"injectables/ChatService.html":{}}}],["undefined",{"_index":798,"title":{},"body":{"injectables/ImagesService.html":{},"injectables/ValidationService.html":{}}}],["unfollow",{"_index":1539,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic",{"_index":1465,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic(@param",{"_index":1537,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(params",{"_index":1499,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(userid",{"_index":1580,"title":{},"body":{"injectables/TopicService.html":{}}}],["unfollowuser",{"_index":859,"title":{},"body":{"injectables/NotificationService.html":{},"controllers/UserController.html":{}}}],["unfollowuser(@param",{"_index":1770,"title":{},"body":{"controllers/UserController.html":{}}}],["unfollowuser(followeduser",{"_index":910,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unfollowuser(params",{"_index":1711,"title":{},"body":{"controllers/UserController.html":{}}}],["unit",{"_index":1971,"title":{},"body":{"index.html":{}}}],["unreact",{"_index":1025,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unreactpin",{"_index":860,"title":{},"body":{"injectables/NotificationService.html":{}}}],["unreactpin(owneruser",{"_index":912,"title":{},"body":{"injectables/NotificationService.html":{}}}],["up",{"_index":522,"title":{},"body":{"injectables/Email.html":{}}}],["update",{"_index":1670,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":1760,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata",{"_index":1714,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata.notificationcounter",{"_index":1741,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedto",{"_index":1634,"title":{"interfaces/UpdateDto.html":{}},"body":{"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatesettingsdto",{"_index":1639,"title":{"interfaces/UpdateSettingsDto.html":{}},"body":{"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updateuser",{"_index":1663,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(req",{"_index":1713,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings",{"_index":1664,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings(req",{"_index":1717,"title":{},"body":{"controllers/UserController.html":{}}}],["upload",{"_index":664,"title":{},"body":{"controllers/ImagesController.html":{}}}],["upload(@uploadedfiles",{"_index":697,"title":{},"body":{"controllers/ImagesController.html":{}}}],["upload(files",{"_index":678,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploaddate",{"_index":715,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadedfiles",{"_index":684,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploading",{"_index":761,"title":{},"body":{"modules/ImagesModule.html":{}}}],["url",{"_index":619,"title":{},"body":{"injectables/GridFsMulterConfigService.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":768,"title":{},"body":{"modules/ImagesModule.html":{},"modules/SharedModule.html":{}}}],["usefilters",{"_index":1128,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":1135,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('google",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('jwt",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@delete('/me/delete",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@delete('/me/follow",{"_index":1500,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/follower",{"_index":1686,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/following",{"_index":1689,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/allpins",{"_index":1205,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/board",{"_index":1208,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getchats/:userid",{"_index":298,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/getkeys",{"_index":1211,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getmessagessent/:recieverids/:senderid",{"_index":303,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/me",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@get('/me/boards/view",{"_index":1692,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/boardsforyou",{"_index":1098,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/follow",{"_index":1474,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/follower",{"_index":1675,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/following",{"_index":1484,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/home",{"_index":1104,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsforyou",{"_index":1111,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsrecentactivity",{"_index":1114,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/popularpins",{"_index":1117,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/follow",{"_index":1101,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/topics/:topicname",{"_index":1123,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/trending",{"_index":1126,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/boards/:boardid",{"_index":1095,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/pins/:pinid",{"_index":1107,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/sections/:boardid/:sectionid",{"_index":1120,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/mypins",{"_index":1214,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/people",{"_index":1217,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/recentsearch",{"_index":1220,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/topic",{"_index":1497,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid",{"_index":1494,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid/pins",{"_index":1491,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('notifications/me",{"_index":1680,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('users/me",{"_index":1697,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('/createtopic",{"_index":1478,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@post('/seendeliver",{"_index":311,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sentmessage",{"_index":315,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sign_up/confirm",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@post('/topic/addpin",{"_index":1471,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@put('/home/me",{"_index":1084,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/log",{"_index":1695,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/:fcmtoken",{"_index":1705,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/boards/view",{"_index":1709,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/confirm",{"_index":1669,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/follow",{"_index":1487,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/reset",{"_index":1702,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/update",{"_index":1715,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/more/boards/:boardid",{"_index":1081,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/pins/:pinid",{"_index":1087,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/sections/:boardid/:sectionid",{"_index":1091,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useinterceptors",{"_index":683,"title":{},"body":{"controllers/ImagesController.html":{}}}],["useinterceptors(filesinterceptor('file",{"_index":696,"title":{},"body":{"controllers/ImagesController.html":{}}}],["user",{"_index":167,"title":{"interfaces/user.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/NotificationService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1791,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1723,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":1636,"title":{},"body":{"interfaces/UpdateDto.html":{},"coverage.html":{}}}],["user.email",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.fcmtoken",{"_index":1035,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.firstname",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.followingtopics",{"_index":1619,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.followingtopics.push(topicid",{"_index":1620,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lastname",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.lasttopics",{"_index":1621,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.length",{"_index":1622,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.push",{"_index":1625,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.slice(1",{"_index":1627,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics[user.lasttopics.length",{"_index":1623,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.notificationcounter",{"_index":1034,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.notifications",{"_index":1030,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.notifications.pop",{"_index":1027,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.notifications.pop(message",{"_index":1044,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.password",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user.picture",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.profileimage",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["user.recentsearch",{"_index":1293,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.length",{"_index":1291,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.slice(0",{"_index":1294,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.save",{"_index":1032,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["user.save().catch(err",{"_index":1036,"title":{},"body":{"injectables/NotificationService.html":{}}}],["user.service",{"_index":1720,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.socketid",{"_index":1382,"title":{},"body":{"classes/SharedGateway.html":{}}}],["user/:userid",{"_index":1666,"title":{},"body":{"controllers/UserController.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{}}}],["user/user.service",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["usercontroller",{"_index":1648,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.email",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.firstname",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":300,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/NotificationService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/chat.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["userids",{"_index":372,"title":{},"body":{"injectables/ChatService.html":{}}}],["userids.concat(senderid",{"_index":417,"title":{},"body":{"injectables/ChatService.html":{}}}],["userimage",{"_index":1421,"title":{},"body":{"classes/SharedGateway.html":{}}}],["userimageid",{"_index":1018,"title":{},"body":{"injectables/NotificationService.html":{}}}],["usermodel",{"_index":362,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":425,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1233,"title":{},"body":{"controllers/SearchController.html":{}}}],["userservice",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersids",{"_index":403,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":762,"title":{},"body":{"modules/ImagesModule.html":{}}}],["validate",{"_index":570,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(accesstoken",{"_index":572,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":809,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.service",{"_index":1448,"title":{},"body":{"modules/SharedModule.html":{}}}],["validationservice",{"_index":360,"title":{"injectables/ValidationService.html":{}},"body":{"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["value",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":498,"title":{},"body":{"injectables/Email.html":{},"controllers/ImagesController.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["variable",{"_index":1849,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2018,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifiedcallback",{"_index":810,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifycallback",{"_index":576,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["very",{"_index":532,"title":{},"body":{"injectables/Email.html":{}}}],["view",{"_index":1757,"title":{},"body":{"controllers/UserController.html":{}}}],["viewstate",{"_index":1708,"title":{},"body":{"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["vm..model",{"_index":692,"title":{},"body":{"controllers/ImagesController.html":{}}}],["vm..model.ts",{"_index":564,"title":{},"body":{"classes/FileResponseVm.html":{},"coverage.html":{}}}],["vm..model.ts:5",{"_index":567,"title":{},"body":{"classes/FileResponseVm.html":{}}}],["vm..model.ts:8",{"_index":566,"title":{},"body":{"classes/FileResponseVm.html":{}}}],["vm.model",{"_index":568,"title":{},"body":{"classes/FileResponseVm.html":{}}}],["vm.model.ts",{"_index":546,"title":{},"body":{"classes/FileInfoVm.html":{},"coverage.html":{}}}],["vm.model.ts:11",{"_index":553,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["vm.model.ts:15",{"_index":555,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["vm.model.ts:19",{"_index":557,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["vm.model.ts:23",{"_index":554,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["vm.model.ts:7",{"_index":556,"title":{},"body":{"classes/FileInfoVm.html":{}}}],["void",{"_index":637,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["wanted",{"_index":901,"title":{},"body":{"injectables/NotificationService.html":{}}}],["watch",{"_index":1966,"title":{},"body":{"index.html":{}}}],["website",{"_index":1993,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1370,"title":{},"body":{"classes/SharedGateway.html":{}}}],["went",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["wented",{"_index":909,"title":{},"body":{"injectables/NotificationService.html":{}}}],["world",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["worry",{"_index":529,"title":{},"body":{"injectables/Email.html":{}}}],["wow",{"_index":1017,"title":{},"body":{"injectables/NotificationService.html":{},"classes/SharedGateway.html":{}}}],["wowreacts",{"_index":1423,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["x1f44b",{"_index":516,"title":{},"body":{"injectables/Email.html":{}}}],["x1f44d",{"_index":1012,"title":{},"body":{"injectables/NotificationService.html":{}}}],["x1f496",{"_index":1009,"title":{},"body":{"injectables/NotificationService.html":{}}}],["x1f4dd",{"_index":999,"title":{},"body":{"injectables/NotificationService.html":{}}}],["x1f604",{"_index":1016,"title":{},"body":{"injectables/NotificationService.html":{}}}],["x1f60a",{"_index":520,"title":{},"body":{"injectables/Email.html":{}}}],["x1f614",{"_index":530,"title":{},"body":{"injectables/Email.html":{}}}],["x1f62e",{"_index":973,"title":{},"body":{"injectables/NotificationService.html":{}}}],["x1f646",{"_index":1014,"title":{},"body":{"injectables/NotificationService.html":{}}}],["you'd",{"_index":1985,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nPinsModule\n\nPinsModule\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BoardModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            PinsModule\n                        \n                        \n                            RecommendationModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PinsModule } from './pins/pins.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { SharedModule } from './shared/shared.module';\nimport { BoardModule } from './board/board.module';\nimport { ImagesModule } from './images/images.module';\nimport { TopicModule } from './topic/topic.module';\nimport { UserModule } from './user/user.module';\nimport { SearchModule } from './search/search.module';\nimport { ChatModule } from './chat/chat.module';\nimport { RecommendationModule } from './recommendation/recommendation.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.CONNECTION_STRING),\n    PinsModule,\n    BoardModule,\n    ImagesModule,\n    TopicModule,\n    SharedModule,\n    AuthModule,\n    UserModule,\n    SearchModule,\n    ChatModule,\n    RecommendationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**\n * @module App\n */\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkEmail\n                            \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                deleteMe\n                            \n                            \n                                    Async\n                                forgetPassword\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                sign_up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/checkEmail')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sign_up/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/delete')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            forgetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forgetPassword(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forget-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userDTO: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign_up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign_up(userDTO: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign_up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Post,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Req,\n  NotFoundException,\n  Res,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { AuthService } from './auth.service';\nimport { Email } from '../shared/send-email.service';\n@Controller()\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private email: Email,\n  ) {}\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req) {}\n\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthRedirect(@Req() req, @Res() res) {\n    const data = await this.authService.googleLogin(req);\n    if (data) {\n      res.redirect(\n        process.env.Front_BASE_URL +\n          '/aouth/google?token=' +\n          data.token +\n          '&type=' +\n          data.type,\n      );\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @Post('/login')\n  async login(@Body() userDTO: LoginDto) {\n    const user = await this.userService.findByLogin(userDTO);\n    if (!user) throw new Error('topic not found');\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Post('/sign_up')\n  async sign_up(@Body() userDTO: RegisterDto) {\n    const user = await this.userService.checkCreateData(userDTO);\n    const token = await this.authService.signPayload(userDTO);\n    await this.email.sendEmail(\n      userDTO.email,\n      token,\n      'confirm',\n      userDTO.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sign_up/confirm')\n  async confirm(@Request() req) {\n    const user = await this.userService.createUser(req.user);\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Get('/checkEmail')\n  async checkEmail(@Query('email') email: string) {\n    const user = await this.userService.checkMAilExistAndFormat(email);\n    if (user)\n      throw new HttpException('this user is exists', HttpStatus.FORBIDDEN);\n  }\n  @Post('/forget-password')\n  async forgetPassword(@Body() body) {\n    const user = await this.userService.checkMAilExistAndFormat(body.email);\n    if (!user)\n      throw new HttpException('not user by this email', HttpStatus.FORBIDDEN);\n    const payload: Payload = {\n      _id: user._id,\n      email: user.email,\n    };\n    const token = await this.authService.signPayload(payload);\n    await this.email.sendEmail(\n      user.email,\n      token,\n      'forget Password',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/delete')\n  async deleteMe(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    await this.userService.deleteUser(req.user._id);\n    await this.email.sendEmail(\n      user.email,\n      null,\n      'Delete account',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    user.password = null;\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { UserModule } from 'src/user/user.module';\n@Module({\n  imports: [SharedModule, UserModule],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, GoogleStrategy],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                    Async\n                                signPayload\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signPayload(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject went to convert to token\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        token which created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n                    validateUser : check if this object which come from token is user or not .\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject which come from token .\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        user object\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { sign } from 'jsonwebtoken';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\n/**\n * @module Authorization\n */\n@Injectable()\nexport class AuthService {\n  constructor(private userService: UserService) { }\n  /**\n   * @author Nada Abdelmaboud \n   * @description google aouth handler\n   * @param {Object}\n   */\n  async googleLogin(req) {\n    if (!req.user) {\n      throw new NotFoundException('no such user on google');\n    }\n    let user = req.user;\n    let type;\n    let checkUser = await this.userService.checkMAilExistAndFormat(user.email);\n    let payload;\n    if (!checkUser) {\n      type = 'sign';\n      let newUser = await this.userService.createUser({\n        email: user.email,\n        birthday: null,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        password: '',\n        isGoogle: true,\n        profileImage: user.picture,\n      });\n      if (!newUser) {\n        throw new BadRequestException();\n      }\n      payload = {\n        _id: newUser._id,\n      };\n    } else {\n      type = 'login';\n      payload = {\n        _id: checkUser._id,\n      };\n    }\n    return {\n      token:\n        'Bearer ' +\n        sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' }),\n      type: type,\n    };\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description sign payload function : create token\n   * @param payload - object went to convert to token\n   * @returns token which created\n   */\n  async signPayload(payload) {\n    return (\n      'Bearer ' +\n      sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' })\n    );\n  }\n\n  /**\n   * validateUser : check if this object which come from token is user or not .\n   * @param payload - object which come from token .\n   * @returns user object\n   */\n  async validateUser(payload: Payload) {\n    const user = await this.userService.getUserById(payload._id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardModule.html":{"url":"modules/BoardModule.html","title":"module - BoardModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_imports\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nBoardModule\n\nBoardModule\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BoardController } from './board.controller';\nimport { BoardService } from './board.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [BoardController],\n  providers: [BoardService],\n  exports: [BoardService],\n})\nexport class BoardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessagesSent\n                            \n                            \n                                    Async\n                                seenDeliver\n                            \n                            \n                                    Async\n                                sentMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getChats/:userId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessagesSent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesSent(recieverIds: string, senderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getMessagesSent/:recieverIds/:senderId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recieverIds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenDeliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenDeliver(senderId: string, recieverId: string, time: string, isSeen: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/seenDeliver')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSeen\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sentMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sentMessage(senderId: string, recieverId: [string], message: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sentMessage')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                            [string]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Get,\n  Request,\n  NotFoundException,\n  UseGuards,\n  Query,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ChatService } from './chat.service';\n\n@Controller()\nexport class ChatController {\n  constructor(private ChatService: ChatService) { }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getMessagesSent/:recieverIds/:senderId')\n  async getMessagesSent(\n    @Param('recieverIds') recieverIds: string,\n    @Param('senderId') senderId: string) {\n    let ids = recieverIds.split(',');\n    let messages = await this.ChatService.getMessage(ids, senderId);\n    if (messages) return messages;\n    throw new NotFoundException('there is no messages');\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getChats/:userId')\n  async getChats(@Param('userId') userId,\n  ) {\n    let messages = await this.ChatService.getChats(userId);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/seenDeliver')\n  async seenDeliver(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: string,\n    @Body('time') time: string,\n    @Body('isSeen') isSeen: boolean,\n  ) {\n    let messages = await this.ChatService.seenMessage(senderId, recieverId, time, isSeen);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sentMessage')\n  async sentMessage(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: [string],\n    @Body('message') message: string,\n    @Body('name') name: string\n  ) {\n    let messages = await this.ChatService.sendMessage(senderId, recieverId, message);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatController } from './chat.controller';\nimport { ChatService } from './chat.service';\nimport { User } from '../models/user.schema';\nimport { Chat } from '../models/chat.schema';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { Message } from 'src/models/message.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Chat', schema: Chat },\n      { name: 'Message', schema: Message },\n\n    ]),\n  ],\n  controllers: [ChatController],\n  providers: [ChatService],\n  exports: [ChatService],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessage\n                            \n                            \n                                    Async\n                                getMessagesSent\n                            \n                            \n                                    Async\n                                seen\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                    Async\n                                sentMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, chatModel: Model, messageModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(userId: String, messageId: string, isDelivered: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isDelivered\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessage(userIds: String[], senderId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessagesSent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesSent(firstUserId: string, secondUserId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    firstUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    secondUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seen(userId: String, messageId: string, isSeen: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSeen\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(senderId: String, recieverId: String, time: string, isSeen: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSeen\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(senderId: String, recieverIds: String[], text: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    text\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sentMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sentMessage(senderId, recieverId, message)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport * as mongoose from 'mongoose';\nimport { user } from '../types/user';\nimport { chat } from '../types/chat';\nimport { ValidationService } from '../shared/validation.service';\nimport { message } from 'src/types/message';\n@Injectable()\nexport class ChatService {\n  constructor(\n    @InjectModel('User') private readonly userModel: Model,\n    @InjectModel('Chat') private readonly chatModel: Model,\n    @InjectModel('Message') private readonly messageModel: Model,\n\n    private ValidationService: ValidationService,\n  ) {}\n  async sendMessage(senderId: String, recieverIds: String[], text: String) {\n    if (!this.ValidationService.checkMongooseID([senderId, recieverIds[0]]))\n      throw new Error('not mongoose id');\n    let mess = { userId: senderId, message: text, date: new Date() };\n    let ids = recieverIds.concat(senderId);\n    let chat = await this.chatModel.findOneAndUpdate(\n      { usersIds: { $all: ids, $size: ids.length } },\n      { $set: { lastMessage: mess } },\n    );\n    if (!chat) {\n      chat = new this.chatModel({\n        usersIds: ids,\n        lastMessage: mess,\n        date: new Date(),\n      });\n      await chat.save();\n    }\n    let message = new this.messageModel({\n      chatId: chat._id,\n      senderId: senderId,\n      message: text,\n      date: mess.date,\n    });\n    await message.save();\n    return message._id;\n  }\n  async getMessage(userIds: String[], senderId: String) {\n    if (!this.ValidationService.checkMongooseID(userIds))\n      throw new Error('not mongoose id');\n    let ids = userIds.concat(senderId);\n    let chat = await this.chatModel.findOne({ usersIds: { $all: ids } }, '_id');\n\n    if (!chat) return 0;\n    return await this.messageModel.find(\n      { chatId: chat._id },\n      'message date seenStatus deliverStatus senderId',\n      { sort: { date: -1 } },\n    );\n  }\n  //id userName imageId\n  async getChats(userId: String) {\n    if (!this.ValidationService.checkMongooseID([userId]))\n      throw new Error('not mongoose id');\n    let chat = await this.chatModel.find(\n      { usersIds: userId },\n      'usersIds lastMessage',\n      { sort: { 'lastMessage.date': -1 } },\n    );\n    let arr = [];\n    let result = [];\n    chat.map(conv => {\n      conv.usersIds.map(user => {\n        if (String(user) != String(userId)) arr.push(user);\n      });\n    });\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePinDto.html":{"url":"classes/CreatePinDto.html","title":"class - CreatePinDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePinDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pins/dto/create-pin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                board\n                            \n                            \n                                    Readonly\n                                imageHeight\n                            \n                            \n                                    Readonly\n                                imageId\n                            \n                            \n                                    Readonly\n                                imageWidth\n                            \n                            \n                                    Readonly\n                                link\n                            \n                            \n                                    Readonly\n                                note\n                            \n                            \n                                    Readonly\n                                section\n                            \n                            \n                                    Readonly\n                                title\n                            \n                            \n                                    Readonly\n                                topicName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            board\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            link\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topicName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePinDto {\n  readonly imageId: String;\n  readonly imageWidth: Number;\n  readonly imageHeight: Number;\n  readonly note: String;\n  readonly title: String;\n  readonly board: String;\n  readonly section: String;\n  readonly link: String;\n  readonly topicName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditBoardDto.html":{"url":"classes/EditBoardDto.html","title":"class - EditBoardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditBoardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-board.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                collaboratores\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                endDate\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                startDate\n                            \n                            \n                                    Readonly\n                                topic\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratores\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            endDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditBoardDto {\n  readonly name: string;\n  readonly description: string;\n  readonly topic: string;\n  readonly startDate: string;\n  readonly endDate: string;\n  readonly collaboratores: string;\n  readonly personalization: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditCollaboratoresPermissionsDto.html":{"url":"classes/EditCollaboratoresPermissionsDto.html","title":"class - EditCollaboratoresPermissionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditCollaboratoresPermissionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-collaboratores-permissions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                addCollaborators\n                            \n                            \n                                    Readonly\n                                collaboratorId\n                            \n                            \n                                    Readonly\n                                createPin\n                            \n                            \n                                    Readonly\n                                editDescription\n                            \n                            \n                                    Readonly\n                                editTitle\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                savePin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            addCollaborators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createPin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editDescription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            savePin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditCollaboratoresPermissionsDto {\n  readonly collaboratorId: string;\n  readonly savePin: Boolean;\n  readonly createPin: Boolean;\n  readonly addCollaborators: Boolean;\n  readonly editTitle: Boolean;\n  readonly personalization: Boolean;\n  readonly editDescription: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Email.html":{"url":"injectables/Email.html","title":"injectable - Email","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/send-email.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/send-email.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(email, message, type, userName)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/send-email.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail should send to \n\n\n                                    \n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nmessage which should send  \n\n\n                                    \n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nwhy send this email confirm ,change email ,.... \n\n\n                                    \n                                \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe name of email owner \n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\n/**\n * @module Email\n */\n@Injectable()\nexport class Email {\n  constructor() { }\n\n  /**\n    * @author Aya Abohadima\n    * @descriptionsend email to user email\n    * @param {String} email - email should send to \n    * @param {String} message - message which should send  \n    * @param {String} type - why send this email confirm ,change email ,.... \n    * @param {String} userName  - the name of email owner \n    */\n  async sendEmail(email, message, type, userName) {\n    var transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: String(process.env.EMAIL),\n        pass: String(process.env.EMAIL_PASSWORD),\n      },\n      tls: {\n        rejectUnauthorized: false,\n      },\n    });\n    var mailOptions;\n    if (type === 'confirm') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Please confirm your email',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   you should confirm your email to complete sign up   Confirm',\n      };\n    } else if (type === 'change email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'You changed your email address on Phantom',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   The email address on your Phantom account was just changed. Did you make this change? if you need it change follow this like   sure change email',\n      };\n    } else if (type === 'set email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; You reset your email address on Phantom',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;  you reset this email to be your new email  please follow this link to confirm that sure email',\n      };\n    } else if (type === 'forget Password') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Please reset your password ',\n        html:\n          '   Hi,' +\n          userName +\n          ', &#x1F60A;   please, do not worry at all    follow this link to reset your password    Reset Password',\n      };\n    } else if (type === 'Delete account') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F614; Sure delete account ',\n        html:\n          '  Hi,' +\n          userName +\n          '   Really, We are very sad because you will leave us  We have been very happy with you  follow this link  and return to us    phantom',\n      };\n    } else if (type === 'report') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Pin Is Reported',\n        html:\n          ' ' +\n          message.userName +\n          ' (userId: ' +\n          message.userId +\n          ' ) has reported a pin for ' +\n          message.reason +\n          '   Pin Page\",\n      };\n    } else {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Phantom has a message for you',\n        text: message,\n      };\n    }\n    transporter.sendMail(mailOptions);\n    return 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileInfoVm.html":{"url":"classes/FileInfoVm.html","title":"class - FileInfoVm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileInfoVm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/file-models/file-info-vm.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                chunkSize\n                            \n                            \n                                contentType\n                            \n                            \n                                filename\n                            \n                            \n                                length\n                            \n                            \n                                md5\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chunkSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-info-vm.model.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            contentType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-info-vm.model.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filename\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-info-vm.model.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            length\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-info-vm.model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            md5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Expose()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-info-vm.model.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Expose } from 'class-transformer';\n\nexport class FileInfoVm {\n  @ApiProperty()\n  @Expose()\n  length: number;\n\n  @ApiProperty()\n  @Expose()\n  chunkSize: number;\n\n  @ApiProperty()\n  @Expose()\n  filename: string;\n\n  @ApiProperty()\n  @Expose()\n  md5: string;\n\n  @ApiProperty()\n  @Expose()\n  contentType: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileResponseVm.html":{"url":"classes/FileResponseVm.html","title":"class - FileResponseVm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileResponseVm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/file-models/file-response-vm..model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                file\n                            \n                            \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FileInfoVm\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: FileInfoVm})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-response-vm..model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/images/file-models/file-response-vm..model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { FileInfoVm } from './file-info-vm.model';\n\nexport class FileResponseVm {\n  @ApiProperty() message: string;\n\n  @ApiProperty({ type: FileInfoVm })\n  file: FileInfoVm;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/google.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\n\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n      callbackURL: `${process.env.BASE_URL}/api/google/redirect`,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { name, emails, photos } = profile;\n    console.log(profile);\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n\n      accessToken,\n    };\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GridFsMulterConfigService.html":{"url":"injectables/GridFsMulterConfigService.html","title":"injectable - GridFsMulterConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GridFsMulterConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/multer-config.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gridFsStorage\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/images/multer-config.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMulterOptions\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/images/multer-config.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     MulterModuleOptions\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridFsStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GridFsStorage\n\n                        \n                    \n                        \n                            \n                                    Defined in src/images/multer-config.service.ts:11\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        export {};\nimport { Injectable } from '@nestjs/common';\nimport {\n  MulterModuleOptions,\n  MulterOptionsFactory,\n} from '@nestjs/platform-express';\nimport * as GridFsStorage from 'multer-gridfs-storage';\n\n@Injectable()\nexport class GridFsMulterConfigService implements MulterOptionsFactory {\n  gridFsStorage: GridFsStorage;\n  constructor() {\n    this.gridFsStorage = new GridFsStorage({\n      url: process.env.CONNECTION_STRING,\n      file: (req, file) => {\n        return new Promise((resolve, reject) => {\n          const filename = file.originalname.trim();\n          const fileInfo = {\n            filename: filename,\n            bucketName: 'images',\n          };\n          resolve(fileInfo);\n        });\n      },\n    });\n  }\n\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      storage: this.gridFsStorage,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/http-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus\n      ? exception.getStatus()\n      : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message:\n        status !== HttpStatus.INTERNAL_SERVER_ERROR\n          ? exception.message || null\n          : 'Internal server error',\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                downloadFile\n                            \n                            \n                                    Async\n                                getFile\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('image/:id')@ApiBadRequestResponse({type: BadRequestException})@ApiCreatedResponse({type: FileResponseVm})\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            downloadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadFile(id: string, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('download/:id')@ApiBadRequestResponse({type: BadRequestException})\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFile(id: string, res, topic: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/image/:id')\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topic\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFileInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileInfo(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('imageInfo')@ApiBadRequestResponse({type: BadRequestException})\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \nupload(files, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/me/uploadImage')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Post,\n  Get,\n  Param,\n  Res,\n  Controller,\n  UseInterceptors,\n  Request,\n  UseGuards,\n  UploadedFiles,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  BadRequestException,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiConsumes,\n  ApiBadRequestResponse,\n} from '@nestjs/swagger';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { ImagesService } from './images.service';\nimport { FileResponseVm } from './file-models/file-response-vm..model';\nconst path = require('path');\n@Controller()\nexport class ImagesController {\n  constructor(private ImagesService: ImagesService) {}\n  @Post('/me/uploadImage')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(FilesInterceptor('file'))\n  upload(@UploadedFiles() files, @Request() req) {\n    req.setTimeout(0);\n    const response = [];\n    files.forEach(file => {\n      const fileReponse = {\n        originalname: file.originalname,\n        encoding: file.encoding,\n        mimetype: file.mimetype,\n        id: file.id,\n        filename: file.filename,\n        metadata: file.metadata,\n        bucketName: file.bucketName,\n        chunkSize: file.chunkSize,\n        size: file.size,\n        md5: file.md5,\n        uploadDate: file.uploadDate,\n        contentType: file.contentType,\n      };\n      response.push(fileReponse);\n    });\n    return response;\n  }\n\n  @Get('imageInfo')\n  @ApiBadRequestResponse({ type: BadRequestException })\n  async getFileInfo(@Request() req) {\n    const file = await this.ImagesService.findInfo2();\n    return file;\n  }\n\n  @Get('/image/:id')\n  async getFile(\n    @Param('id') id: string,\n    @Res() res,\n    @Query('topic') topic: string,\n  ) {\n    if (topic && topic != '') {\n      var filePath = './static/' + topic + '.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return res.sendFile(resolvedPath);\n    }\n    if (!id || id == ' ' || id == '' || id == 'none') {\n      var filePath = './static/default.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return res.sendFile(resolvedPath);\n    }\n    const checkImage = await this.ImagesService.checkImage(id);\n    if (!checkImage) {\n      var filePath = './static/default.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return res.sendFile(resolvedPath);\n    }\n    const file = await this.ImagesService.findInfo(id);\n    const fileStream = await this.ImagesService.readStream(id);\n    if (!fileStream) {\n      var filePath = './static/default.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return res.sendFile(resolvedPath);\n    }\n    res.header('Content-Length', file.length);\n    res.header('Content-Type', file.contentType);\n\n    fileStream.pipe(res);\n  }\n\n  @Get('download/:id')\n  @ApiBadRequestResponse({ type: BadRequestException })\n  async downloadFile(@Param('id') id: string, @Res() res) {\n    const file = await this.ImagesService.findInfo(id);\n    const fileStream = await this.ImagesService.readStream(id);\n    if (!fileStream) {\n      throw new HttpException(\n        'An error occurred while retrieving file',\n        HttpStatus.EXPECTATION_FAILED,\n      );\n    }\n    res.header('Content-Type', file.contentType);\n    res.header('Content-Disposition', 'attachment; filename=' + file.filename);\n    return fileStream.pipe(res);\n  }\n\n  @Delete('image/:id')\n  @ApiBadRequestResponse({ type: BadRequestException })\n  @ApiCreatedResponse({ type: FileResponseVm })\n  async deleteFile(@Param('id') id: string): Promise {\n    const file = await this.ImagesService.findInfo(id);\n    const fileStream = await this.ImagesService.deleteFile(id);\n    if (!fileStream) {\n      throw new HttpException(\n        'An error occurred during file deletion',\n        HttpStatus.EXPECTATION_FAILED,\n      );\n    }\n    return {\n      message: 'File has been deleted',\n      file: file,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_imports\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\n\n\nGridFsMulterConfigService\n\nGridFsMulterConfigService\n\nImagesModule -->\n\nGridFsMulterConfigService->ImagesModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/images/images.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GridFsMulterConfigService\n                        \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*Acknowledgment\nthis module is inspired by  https://medium.com/@khoa.phan.9xset/nestjs-file-uploading-using-multer-gridfs-7569a1b48022\n*/\nimport { Module } from '@nestjs/common';\nimport { ImagesController } from './images.controller';\nimport { ImagesService } from './images.service';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { GridFsMulterConfigService } from './multer-config.service';\nimport { SharedModule } from '../shared/shared.module';\n@Module({\n  imports: [\n    SharedModule,\n    MulterModule.registerAsync({\n      useClass: GridFsMulterConfigService,\n    }),\n  ],\n  controllers: [ImagesController],\n  providers: [ImagesService, GridFsMulterConfigService],\n  exports: [ImagesService],\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                fileModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkImage\n                            \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                findInfo\n                            \n                            \n                                    Async\n                                findInfo2\n                            \n                            \n                                    Async\n                                readStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/images/images.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                    Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkImage(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findInfo(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findInfo2\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findInfo2()\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            readStream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    readStream(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            fileModel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MongoGridFS\n\n                        \n                    \n                        \n                            \n                                    Defined in src/images/images.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/mongoose';\nimport { Connection } from 'mongoose';\nimport { MongoGridFS } from 'mongo-gridfs';\nimport { GridFSBucketReadStream } from 'mongodb';\nimport { ValidationService } from '../shared/validation.service';\n\n@Injectable()\nexport class ImagesService {\n  private fileModel: MongoGridFS;\n\n  constructor(\n    @InjectConnection() private readonly connection: Connection,\n    private ValidationService: ValidationService,\n  ) {\n    this.fileModel = new MongoGridFS(this.connection.db, 'images');\n  }\n\n  async readStream(id: string): Promise {\n    return await this.fileModel.readFileStream(id);\n  }\n  async checkImage(id: string): Promise {\n    if ((await this.ValidationService.checkMongooseID([id])) == 0) {\n      return false;\n    }\n    let isFound = true;\n    let im = await this.fileModel.findById(id).catch(err => {\n      isFound = false;\n    });\n    if (isFound) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  async findInfo2() {\n    const result = await this.fileModel.find({});\n    if (!result || result == undefined) {\n      return;\n    }\n    return result;\n  }\n  async findInfo(id: string) {\n    const result = await this.fileModel.findById(id);\n    if (!result || result == undefined) {\n      return;\n    }\n    return {\n      filename: result.filename,\n      length: result.length,\n      chunkSize: result.chunkSize,\n      md5: result.md5,\n      contentType: result.contentType,\n    };\n  }\n\n  async deleteFile(id: string): Promise {\n    return await this.fileModel.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, done: VerifiedCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the object created from token\n\n                                    \n                                \n                                \n                                    done\n                                    \n                                            VerifiedCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        return token object \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, VerifiedCallback } from 'passport-jwt';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n  constructor(private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET_KEY,\n    });\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description validate function to check correct object com from token\n   * @param payload the object created from token\n   * @param done \n   * return token object \n   */\n  async validate(payload: any, done: VerifiedCallback) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/logging.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const now = Date.now();\n    const req = context.switchToHttp().getRequest();\n\n    const method = req.method;\n    const url = req.url;\n\n    return next\n      .handle()\n      .pipe(\n        tap(() =>\n          Logger.log(\n            `${method} ${url} ${Date.now() - now}ms`,\n            context.getClass().name,\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginDto.html":{"url":"interfaces/LoginDto.html","title":"interface - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/notification.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addTolimitedArray\n                            \n                            \n                                    Async\n                                boardsForYou\n                            \n                            \n                                    Async\n                                commentPin\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                pinsForYou\n                            \n                            \n                                    Async\n                                pinsInspired\n                            \n                            \n                                    Async\n                                popularPins\n                            \n                            \n                                    Async\n                                reactPin\n                            \n                            \n                                    Async\n                                sendNotification\n                            \n                            \n                                    Async\n                                sendOfflineNotification\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                unreactPin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/notification.service.ts:22\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addTolimitedArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addTolimitedArray(notificationArray: Array, limit: number, pushedData: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:671\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    notificationArray\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -array of data\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe limit should be\n\n\n                                    \n                                \n                                \n                                    pushedData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data should add to array\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        after delete \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            boardsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    boardsForYou(user, boards, images)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:442\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boards\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            commentPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    commentPin(ownerUser, commenterUser, comment, pinName, pinId, imageId)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ownerUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    commenterUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    comment\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ncomment \n\n\n                                    \n                                \n                                \n                                    pinName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntitle of pin  \n\n\n                                    \n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of this pin\n\n\n                                    \n                                \n                                \n                                    imageId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of pin image\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1 \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(followedUser, followerUser)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    followedUser\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUser\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -new changes of user \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            pinsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pinsForYou(user, pins, images)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:561\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pins\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            pinsInspired\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pinsInspired(user, pins, images)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:616\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pins\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            popularPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    popularPins(user, pins, images)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:500\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pins\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reactPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reactPin(ownerUser, reactUser, pinName, pinId, react, imageId)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:314\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ownerUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reactUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    pinName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntitle of pin  \n\n\n                                    \n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of this pin\n\n\n                                    \n                                \n                                \n                                    react\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntype of react\n\n\n                                    \n                                \n                                \n                                    imageId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of pin image\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1 \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNotification(tokens, message)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    tokens\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \narray of fcm tokens wanted to send this massage to\n\n\n                                    \n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nmessage needed  to send\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        array of not send notification\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendOfflineNotification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendOfflineNotification(messages, fcmToken)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    messages\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \narray of massages wented to send\n\n\n                                    \n                                \n                                \n                                    fcmToken\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nfcm token needed to send to\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(followedUser, followerUser)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    followedUser\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followerUser\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -new changes of user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unreactPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unreactPin(ownerUser, reactUser, pinName, pinId, react, imageId)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/notification.service.ts:404\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ownerUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    reactUser\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    pinName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntitle of pin  \n\n\n                                    \n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of this pin\n\n\n                                    \n                                \n                                \n                                    react\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntype of react\n\n\n                                    \n                                \n                                \n                                    imageId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe id of pin image\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1 \n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as firebase from 'firebase-admin';\nconst params = {\n  type: String(process.env.FIREBASE_CREADENTIAL_TYPE),\n  projectId: String(process.env.FIREBASE_CREADENTIAL_PROJECT_ID),\n  privateKeyId: String(process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY_ID),\n  privateKey: String(process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY.replace(/\\\\n/g, '\\n')),\n  clientEmail: String(process.env.FIREBASE_CREADENTIAL_CLIENT_ID),\n  clientId: String(process.env.FIREBASE_CREADENTIAL_CLIENT_EMAIL),\n  authUri: String(process.env.FIREBASE_CREADENTIAL_AUTH_URI),\n  tokenUri: String(process.env.FIREBASE_CREADENTIAL_TOKEN_URI),\n  authProviderX509CertUrl: String(process.env.FIREBASE_CREADENTIAL_AUTH_PROVIDER_X509_CERT_URL),\n  clientX509CertUrl: String(process.env.FIREBASE_CREADENTIAL_CLIENT_X509_CERT_URL)\n};\nlet app = firebase.initializeApp({\n  credential: firebase.credential.cert(params),\n});\n/**\n * @module Notification\n */\n@Injectable()\nexport class NotificationService {\n\n  constructor() { }\n\n  /**\n    * @author Aya Abohadima \n    * @descriptionsendNotification : send one notification to client \n    * @param {Array} tokens  - array of fcm tokens wanted to send this massage to\n    * @param {Object} message - message needed  to send\n    * @returns {Array}array of not send notification\n    */\n  async sendNotification(tokens, message) {\n    const notSendTokens = [];\n    app\n      .messaging()\n      .sendMulticast(message)\n      .then(response => {\n        if (response.failureCount > 0) {\n          response.responses.forEach((res, id) => {\n            if (!res.success) {\n              notSendTokens.push(tokens[id]);\n            }\n          });\n        } else {\n          console.log('Message has been sent successfully');\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    return notSendTokens;\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @descriptionsendOfflineNotification :send array of massages & notification\n    * @param {Array}messages - array of massages wented to send\n    * @param {String} fcmToken - fcm token needed to send to\n    */\n  async sendOfflineNotification(messages, fcmToken) {\n    if (!messages || messages.length == 0) return;\n    for (let i = 0; i  {\n        console.log(response.successCount + ' messages were sent successfully');\n      });\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @descriptionsend notification to user when some one follow hem\n    * @param {Object of User type} followedUser - user who is followed\n    * @param {Object of User type} followerUser -user who follow\n    * @returns {Object} -new changes of user \n    */\n  async followUser(followedUser, followerUser) {\n    let message: {\n      data: {\n        followerImageId: string;\n        followerId: string;\n        title: string;\n        google: string;\n        googleImage: string;\n        body: string;\n        time: string;\n      };\n      tokens?: [string];\n    } = {\n      data: {\n        followerImageId: String(followerUser.profileImage),\n        google: String(followerUser.google),\n        googleImage: String(followerUser.googleImage),\n        followerId: String(followerUser._id),\n        title: 'your follower increase ',\n        body:\n          followerUser.firstName +\n          ' ' +\n          followerUser.lastName +\n          ' has followed You &#x1F62E;',\n        time: Date.now().toString(),\n      },\n    };\n    followedUser.notificationCounter = followedUser.notificationCounter\n      ? followedUser.notificationCounter + 1\n      : 1;\n    if (!followedUser.notifications) followedUser.notifications = [];\n    followedUser.notifications = await this.addTolimitedArray(\n      followedUser.notifications,\n      30,\n      message,\n    );\n    if (!followedUser.fcmToken || followedUser.fcmToken == ' ') {\n      if (!followedUser.offlineNotifications)\n        followedUser.offlineNotifications = [];\n      followedUser.offlineNotifications = await this.addTolimitedArray(\n        followedUser.offlineNotifications,\n        30,\n        message,\n      );\n    } else {\n      message.tokens = [followedUser.fcmToken];\n      let checkFailed = await this.sendNotification(\n        [followedUser.fcmToken],\n        message,\n      );\n      if (checkFailed.length > 0) {\n        message.tokens = null;\n        followedUser.offlineNotifications = await this.addTolimitedArray(\n          followedUser.offlineNotifications,\n          30,\n          message,\n        );\n      }\n    }\n    return {\n      offlineNotifications: followedUser.offlineNotifications,\n      notifications: followedUser.notifications,\n      notificationCounter: followedUser.notificationCounter,\n    };\n  }\n  /**\n    * @author Aya Abohadima \n    * @descriptiondelete follow message from notification history \n    * @param {Object of User type} followedUser - user who is followed\n    * @param {Object of User type} followerUser -user who follow\n    * @returns {Object} -new changes of user\n    */\n  async unfollowUser(followedUser, followerUser) {\n    let message: {\n      data: {\n        followerImageId: string;\n        followerId: string;\n        google: string;\n        googleImage: string;\n        title: string;\n        body: string;\n        time?: string;\n      };\n      tokens?: [string];\n    } = {\n      data: {\n        followerImageId: String(followerUser.profileImage),\n        google: String(followerUser.google),\n        googleImage: String(followerUser.googleImage),\n        followerId: String(followerUser._id),\n        title: 'your follower increase ',\n        body:\n          followerUser.firstName +\n          ' ' +\n          followerUser.lastName +\n          ' has followed You &#x1F62E;',\n        time: null,\n      },\n    };\n    let notificationData = followedUser.offlineNotifications;\n    if (!followedUser.offlineNotifications)\n      followedUser.offlineNotifications = [];\n\n    for (let i = 0; i \n    * @descriptionsend notification when some one comment in user pin\n    * @param {Object of user type} ownerUser - user who has pin \n    * @param  {Object of user type} commenterUser - user who comment in pin\n    * @param {String} comment - comment \n    * @param {String} pinName - title of pin  \n    * @param {String} pinId - the id of this pin\n    * @param {String} imageId - the id of pin image\n    * @returns {Number} 1 \n    */\n  async commentPin(ownerUser, commenterUser, comment, pinName, pinId, imageId) {\n    let message: {\n      data: {\n        time: string;\n        commenterImageId: string;\n        commenterId: string;\n        google: string;\n        googleImage: string;\n        imageLink: string;\n        pinId: string;\n        title: string;\n        body: string;\n      };\n      tokens?: [string];\n    } = {\n      data: {\n        time: Date.now().toString(),\n        commenterImageId: String(commenterUser.profileImage),\n        google: String(commenterUser.google),\n        googleImage: String(commenterUser.googleImage),\n        commenterId: String(commenterUser._id),\n        imageLink: String(process.env.FRONT_BASE_URL) + '/image/' + imageId,\n        pinId: pinId,\n        title: '&#x1F4DD; Comment on your pin',\n        body:\n          commenterUser.firstName +\n          ' ' +\n          commenterUser.lastName +\n          ' has comment on your pin' +\n          '\"' +\n          pinName +\n          '\"' +\n          'say that' +\n          comment,\n      },\n    };\n    ownerUser.notificationCounter = ownerUser.notificationCounter\n      ? ownerUser.notificationCounter + 1\n      : 1;\n    await ownerUser.save();\n    if (!ownerUser.notifications) ownerUser.notifications = [];\n    ownerUser.notifications = await this.addTolimitedArray(\n      ownerUser.notifications,\n      30,\n      message,\n    );\n\n    if (!ownerUser.fcmToken || ownerUser.fcmToken == ' ') {\n      if (!ownerUser.offlineNotifications) ownerUser.offlineNotifications = [];\n      ownerUser.offlineNotifications = await this.addTolimitedArray(\n        ownerUser.offlineNotifications,\n        30,\n        message,\n      );\n      await ownerUser.save();\n    } else {\n      message.tokens = [ownerUser.fcmToken];\n      let checkFailed = await this.sendNotification(\n        [ownerUser.fcmToken],\n        message,\n      );\n      if (checkFailed.length > 0) {\n        message.tokens = null;\n        ownerUser.offlineNotifications = await this.addTolimitedArray(\n          ownerUser.offlineNotifications,\n          30,\n          message,\n        );\n      }\n      await ownerUser.save();\n    }\n    await ownerUser.save();\n    return 1;\n  }\n\n  /**\n     * @author Aya Abohadima \n     * @description notification to pin owner when someone react to pin\n     * @param {Object of user type} ownerUser - user who has pin \n     * @param  {Object of user type} reactUser - user who react in pin\n     * @param {String} react - type of react\n     * @param {String} pinName - title of pin  \n     * @param {String} pinId - the id of this pin\n     * @param {String} imageId - the id of pin image\n     * @returns {Number} 1 \n     */\n  async reactPin(ownerUser, reactUser, pinName, pinId, react, imageId) {\n    if (react == 'Love') react = '&#x1F496;';\n    else if (react == 'Good idea') react = '&#x1F44D;';\n    else if (react == 'Thanks') react = '&#x1F646;‍♀️';\n    else if (react == 'Haha') react = '&#x1F604;';\n    else if (react == 'Wow') react = '&#x1F62E;';\n\n    let message: {\n      data: {\n        time: string;\n        userImageId: string;\n        userId: string;\n        google: string;\n        googleImage: string;\n        imageLink: string;\n        pinId: string;\n        title: string;\n        body: string;\n      };\n      tokens?: [string];\n    } = {\n      data: {\n        time: Date.now().toString(),\n        userImageId: String(reactUser.profileImage),\n        google: String(reactUser.google),\n        googleImage: String(reactUser.googleImage),\n        userId: String(reactUser._id),\n        imageLink: String(process.env.FRONT_BASE_URL) + '/image/' + imageId,\n        pinId: pinId,\n        title: react + ' React on your pin',\n        body:\n          reactUser.firstName +\n          ' ' +\n          reactUser.lastName +\n          ' has react on your pin' +\n          '\"' +\n          pinName +\n          '\"',\n      },\n    };\n    ownerUser.notificationCounter = ownerUser.notificationCounter\n      ? ownerUser.notificationCounter + 1\n      : 1;\n    await ownerUser.save();\n    if (!ownerUser.notifications) ownerUser.notifications = [];\n    ownerUser.notifications = await this.addTolimitedArray(\n      ownerUser.notifications,\n      30,\n      message,\n    );\n\n    if (!ownerUser.fcmToken || ownerUser.fcmToken == ' ') {\n      if (!ownerUser.offlineNotifications) ownerUser.offlineNotifications = [];\n      ownerUser.offlineNotifications = await this.addTolimitedArray(\n        ownerUser.offlineNotifications,\n        30,\n        message,\n      );\n      await ownerUser.save();\n    } else {\n      message.tokens = [ownerUser.fcmToken];\n      let checkFailed = await this.sendNotification(\n        [ownerUser.fcmToken],\n        message,\n      );\n      if (checkFailed.length > 0) {\n        message.tokens = null;\n        ownerUser.offlineNotifications = await this.addTolimitedArray(\n          ownerUser.offlineNotifications,\n          30,\n          message,\n        );\n      }\n      await ownerUser.save();\n    }\n    await ownerUser.save();\n    return 1;\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @description delete react from user history when unreact\n     * @param {Object of user type} ownerUser - user who has pin \n     * @param  {Object of user type} reactUser - user who unreact in pin\n     * @param {String} react - type of react\n     * @param {String} pinName - title of pin  \n     * @param {String} pinId - the id of this pin\n     * @param {String} imageId - the id of pin image\n     * @returns {Number} 1 \n     */\n  async unreactPin(ownerUser, reactUser, pinName, pinId, react, imageId) {\n    if (react == 'Love') react = '&#x1F496;';\n    else if (react == 'Good idea') react = '&#x1F44D;';\n    else if (react == 'Thanks') react = '&#x1F646;‍♀️';\n    else if (react == 'Haha') react = '&#x1F604;';\n    else if (react == 'Wow') react = '&#x1F62E;';\n\n    let notificationData = ownerUser.offlineNotifications;\n    if (!ownerUser.offlineNotifications) ownerUser.offlineNotifications = [];\n\n    for (let i = 0; i  0) {\n        let last = user.notifications.pop();\n        if (String(last.title) != String(arrayMessage.title)) {\n          user.notifications = await this.addTolimitedArray(\n            user.notifications,\n            30,\n            arrayMessage,\n          );\n        }\n        await user.save();\n        return 0;\n      }\n    }\n    await user.save();\n    return 1;\n  }\n\n  /**\n    * @author Nada AbdElmaboud  \n    * @descriptionsend popular pin notification to user \n    * @param {Object of user type }user - user object \n    * @param {Array} pins \n    * @param {Array} images\n    * @returns {Number} \n    */\n  async popularPins(user, pins, images) {\n    let arrayMessage = {\n      pins: pins,\n      images: images,\n      title: 'Popular Phantom Pins!',\n      time: Date.now(),\n      body: 'check out these popular pins on phantom',\n    };\n    let message;\n    user.notificationCounter = user.notificationCounter\n      ? user.notificationCounter + 1\n      : 1;\n    if (!user.notifications) user.notifications = [];\n    user.notifications = await this.addTolimitedArray(\n      user.notifications,\n      30,\n      arrayMessage,\n    );\n    await user.save();\n    if (!user.fcmToken || user.fcmToken == ' ') {\n      return 0;\n    } else {\n      await user.save().catch(err => {\n        //  console.log(err);\n      });\n      message = {\n        data: {\n          title: 'Popular Phantom Pins!',\n          body: 'check out these popular pins on phantom',\n        },\n        tokens: [user.fcmToken],\n      };\n\n      let checkFailed = await this.sendNotification([user.fcmToken], message);\n\n      if (checkFailed.length > 0) {\n        let last = user.notifications.pop();\n        if (String(last.title) != String(arrayMessage.title)) {\n          user.notifications = await this.addTolimitedArray(\n            user.notifications,\n            30,\n            arrayMessage,\n          );\n        }\n        await user.save().catch(err => {\n          // console.log(err);\n        });\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  /**\n  * @author Nada AbdElmaboud  \n  * @description  send pins for certan user notification to user \n  * @param {Object of user type }user - user object \n  * @param {Array} pins \n  * @param {Array} images\n  * @returns {Number} \n  */\n  async pinsForYou(user, pins, images) {\n    let arrayMessage = {\n      pins: pins,\n      images: images,\n      time: Date.now(),\n      title: 'Pins For You!',\n      body: 'We think that you may get instersted in some of these pins',\n    };\n    let message;\n    user.notificationCounter = user.notificationCounter\n      ? user.notificationCounter + 1\n      : 1;\n    if (!user.notifications) user.notifications = [];\n    user.notifications = await this.addTolimitedArray(\n      user.notifications,\n      30,\n      arrayMessage,\n    );\n    await user.save();\n    if (!user.fcmToken || user.fcmToken == ' ') {\n      return 0;\n    } else {\n      await user.save();\n      message = {\n        data: {\n          title: 'Pins For You!',\n          body: 'We think that you may get instersted in some of these pins',\n        },\n        tokens: [user.fcmToken],\n      };\n      let checkFailed = await this.sendNotification([user.fcmToken], message);\n      if (checkFailed.length > 0) {\n        let last = user.notifications.pop();\n        if (String(last.title) != String(arrayMessage.title)) {\n          user.notifications = await this.addTolimitedArray(\n            user.notifications,\n            30,\n            arrayMessage,\n          );\n        }\n        await user.save();\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  /**\n  * @author Nada AbdElmaboud  \n  * @description send popular inspired notification to user \n  * @param {Object of user type }user - user object \n  * @param {Array} pins \n  * @param {Array} images\n  * @returns {Number} \n  */\n  async pinsInspired(user, pins, images) {\n    let arrayMessage = {\n      pins: pins,\n      images: images,\n      time: Date.now(),\n      title: 'Pins Inspired By Your Recent Activity!',\n      body: 'check out these pins',\n    };\n    let message;\n    user.notificationCounter = user.notificationCounter\n      ? user.notificationCounter + 1\n      : 1;\n    if (!user.notifications) user.notifications = [];\n    user.notifications = await this.addTolimitedArray(\n      user.notifications,\n      30,\n      arrayMessage,\n    );\n    await user.save();\n    if (!user.fcmToken || user.fcmToken == ' ') {\n      return 0;\n    } else {\n      await user.save();\n      message = {\n        data: {\n          title: 'Pins Inspired By Your Recent Activity!',\n          body: 'check out these pins',\n        },\n        tokens: [String(user.fcmToken)],\n      };\n      let checkFailed = await this.sendNotification([user.fcmToken], message);\n      if (checkFailed.length > 0) {\n        let last = user.notifications.pop(message);\n        if (String(last.title) != String(arrayMessage.title)) {\n          user.notifications = await this.addTolimitedArray(\n            user.notifications,\n            30,\n            arrayMessage,\n          );\n        }\n        await user.save();\n        return 0;\n      }\n    }\n    return 1;\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @descriptionthis function add to array but this array has limit\n    * @param {Array} notificationArray -array of data\n    * @param {Number} limit  - the limit should be\n    * @param {Object} pushedData Data should add to array\n    * @returns {Array} after delete \n    */\n  async addTolimitedArray(\n    notificationArray: Array,\n    limit: number,\n    pushedData: {},\n  ) {\n    if (notificationArray.length >= limit) {\n      notificationArray.splice(0, 1);\n    }\n    notificationArray.push(pushedData);\n    return notificationArray;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        expiresIn\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        newEmail\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newEmail\n                                    \n                                \n                                \n                                    \n                                        newEmail:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Payload {\n  _id: string;\n  email?: String;\n  newEmail?: String;\n  firstName?: String;\n  iat?: number;\n  expiresIn?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PinsModule.html":{"url":"modules/PinsModule.html","title":"module - PinsModule","body":"\n                   \n\n\n\n\n    Modules\n    PinsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_imports\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pins/pins.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PinsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PinsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BoardModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PinsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PinsController } from './pins.controller';\nimport { PinsService } from './pins.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Pin } from '../models/pin.schema';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Board } from '../models/board.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { NotificationService } from '../shared/notification.service';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    BoardModule,\n    ImagesModule,\n    MongooseModule.forFeature([\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [PinsController],\n  providers: [PinsService],\n  exports: [PinsService],\n})\nexport class PinsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecommendationController.html":{"url":"controllers/RecommendationController.html","title":"controller - RecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recommendation/recommendation.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBoardMoreLike\n                            \n                            \n                                    Async\n                                generateHomeFeed\n                            \n                            \n                                    Async\n                                generatePinMore\n                            \n                            \n                                    Async\n                                generateSectionMoreLike\n                            \n                            \n                                    Async\n                                getBoardMore\n                            \n                            \n                                    Async\n                                getBoardsForYou\n                            \n                            \n                                    Async\n                                getFollowRecommendation\n                            \n                            \n                                    Async\n                                getHomeFeed\n                            \n                            \n                                    Async\n                                getPinMore\n                            \n                            \n                                    Async\n                                getPinsForYou\n                            \n                            \n                                    Async\n                                getPinsRecentActivity\n                            \n                            \n                                    Async\n                                getPopularPins\n                            \n                            \n                                    Async\n                                getSectionMore\n                            \n                            \n                                    Async\n                                getTopicRecommendation\n                            \n                            \n                                    Async\n                                getTrendingRecommendation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateBoardMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBoardMoreLike(req, boardId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateHomeFeed(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/home/me')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generatePinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePinMore(req, pinId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSectionMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSectionMoreLike(req, boardId: string, sectionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardMore(req, boardId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardsForYou(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boardsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/follow')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHomeFeed(req, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/home')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinMore(req, pinId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsForYou(req, isSearch: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsRecentActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsRecentActivity(req, isSearch: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsRecentActivity')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPopularPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPopularPins(req, isSearch: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/popularPins')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSectionMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionMore(req, boardId: string, sectionId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicRecommendation(req, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/topics/:topicName')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTrendingRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrendingRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/trending')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseFilters,\n  ForbiddenException,\n  NotAcceptableException,\n  Param,\n  Get,\n  NotFoundException,\n  Request,\n  UseGuards,\n  Query,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\nimport { RecommendationService } from './recommendation.service';\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class RecommendationController {\n  constructor(private RecommendationService: RecommendationService) {}\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/home/me')\n  async generateHomeFeed(@Request() req) {\n    req.setTimeout(0);\n    let userId = req.user._id;\n    let home = await this.RecommendationService.homeFeed(userId);\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/home')\n  async getHomeFeed(\n    @Request() req,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    let home = await this.RecommendationService.getHomeFeed(\n      userId,\n      limit,\n      offset,\n    );\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/pins/:pinId')\n  async generatePinMore(@Request() req, @Param('pinId') pinId: string) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinMoreLike(userId, pinId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/pins/:pinId')\n  async getPinMore(\n    @Request() req,\n    @Param('pinId') pinId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getPinMoreLike(\n      pinId,\n      limit,\n      offset,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/boards/:boardId')\n  async generateBoardMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.boardMoreLike(userId, boardId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/sections/:boardId/:sectionId')\n  async generateSectionMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.sectionMoreLike(\n      userId,\n      boardId,\n      sectionId,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/boards/:boardId')\n  async getBoardMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getBoardMoreLike(\n      boardId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/sections/:boardId/:sectionId')\n  async getSectionMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getSectionMoreLike(\n      boardId,\n      sectionId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/follow')\n  async getFollowRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.followAllRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/topics/:topicName')\n  async getTopicRecommendation(\n    @Request() req,\n    @Param('topicName') topicName: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.topicRecommendation(\n      topicName,\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/trending')\n  async getTrendingRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.trendingRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boardsForYou')\n  async getBoardsForYou(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let boards = await this.RecommendationService.boardsForYou(userId);\n    if (boards) {\n      return boards;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/popularPins')\n  async getPopularPins(@Request() req, @Query('isSearch') isSearch: Boolean) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.popularPins(userId, isSearch);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsForYou')\n  async getPinsForYou(@Request() req, @Query('isSearch') isSearch: Boolean) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsForYou(userId, isSearch);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsRecentActivity')\n  async getPinsRecentActivity(\n    @Request() req,\n    @Query('isSearch') isSearch: Boolean,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsInspired(userId, isSearch);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecommendationModule.html":{"url":"modules/RecommendationModule.html","title":"module - RecommendationModule","body":"\n                   \n\n\n\n\n    Modules\n    RecommendationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_imports\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recommendation/recommendation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecommendationController } from './recommendation.controller';\nimport { RecommendationService } from './recommendation.service';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User } from '../models/user.schema';\nimport { BoardModule } from '../board/board.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { NotificationService } from '../shared/notification.service';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [RecommendationController],\n  providers: [RecommendationService],\n  exports: [RecommendationService],\n})\nexport class RecommendationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterDto.html":{"url":"interfaces/RegisterDto.html","title":"interface - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                        birthday\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        isGoogle\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthday\n                                    \n                                \n                                \n                                    \n                                        birthday:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isGoogle\n                                    \n                                \n                                \n                                    \n                                        isGoogle:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterDto {\n  email: string;\n  password: string;\n  birthday: string;\n  firstName: string;\n  lastName: string;\n  country?: string;\n  profileImage?: string;\n  gender?: string;\n  isGoogle?: Boolean;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SearchController.html":{"url":"controllers/SearchController.html","title":"controller - SearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                search\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/allPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(req, recentSearch: Boolean, name: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/board')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(req, name)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getKeys')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/myPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/people')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/recentSearch')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { SearchService } from './search.service';\n@Controller('search')\nexport class SearchController {\n  constructor(private SearchService: SearchService) { }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/allPins')\n  async getAllPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getAllPins(name, limit, offset);\n    if (pins) return pins;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/myPins')\n  async getMyPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getMyPins(name, userId, limit, offset);\n    if (pins)\n      return pins;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/people')\n  async getPeople(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let users = await this.SearchService.getPeople(name, limit, offset);\n    if (users) return users;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/board')\n  async getBoards(\n    @Request() req,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('name') name: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let boards = await this.SearchService.getBoards(name, limit, offset);\n    if (boards) return boards;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/recentSearch')\n  async getRecentSearch(\n    @Request() req,\n  ) {\n    let userId = req.user._id;\n    let recentSearch = await this.SearchService.getRecentSearch(userId);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getKeys')\n  async getKeys(\n    @Request() req,\n    @Query('name') name\n  ) {\n    let recentSearch = await this.SearchService.getKeys(name);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_imports\n\n\n\ncluster_SearchModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SearchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SearchController } from './search.controller';\nimport { SearchService } from './search.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { Board } from '../models/board.schema';\nimport { User } from '../models/user.schema';\nimport { UserModule } from '../user/user.module';\nimport * as search from 'fuzzy-search';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [SearchController],\n  providers: [SearchService],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToRecentSearch\n                            \n                            \n                                    Async\n                                Fuzzy\n                            \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardModel: Model, pinModel: Model, userModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/search/search.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addToRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addToRecentSearch(userId, name)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Fuzzy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Fuzzy(model, params, name, limit: number, offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(name, userId, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { board } from '../types/board';\nimport { user } from '../types/user';\nimport { ValidationService } from '../shared/validation.service';\nimport { pin } from '../types/pin';\nimport * as search from 'fuzzy-search';\n@Injectable()\nexport class SearchService {\n  constructor(\n    @InjectModel('Board') private readonly boardModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n    private ValidationService: ValidationService,\n  ) {}\n  async Fuzzy(model, params, name, limit: number, offset: number) {\n    const searcher = new search(model, params, {\n      caseSensitive: false,\n      sort: true,\n    });\n    let result = searcher.search(name);\n    let limitOffsetResult = this.ValidationService.limitOffset(\n      limit,\n      offset,\n      result,\n    );\n    return { result: limitOffsetResult, length: limitOffsetResult.length };\n  }\n  async getAllPins(name, limit, offset) {\n    let pin = await this.pinModel.find({}, 'title note imageId').lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  async getMyPins(name, userId, limit, offset) {\n    if (!(await this.ValidationService.checkMongooseID([userId])))\n      throw new Error('not mongoose id');\n    let pin = await this.pinModel\n      .find({ 'creator.id': Types.ObjectId(userId) }, 'title note imageId')\n      .lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  async addToRecentSearch(userId, name) {\n    let user = await this.userModel.findByIdAndUpdate(userId, {\n      $pull: { recentSearch: name },\n    });\n    if (user.recentSearch.length >= 5) {\n      user.recentSearch = user.recentSearch.slice(0, 4);\n      await user.save();\n    }\n    return await this.userModel\n      .findByIdAndUpdate(userId, { $push: { recentSearch: name } })\n      .lean();\n  }\n  async getPeople(name, limit, offset) {\n    let user = await this.userModel.aggregate([\n      { $match: {} },\n      {\n        $project: {\n          boards: { $size: '$boards' },\n          followers: { $size: '$followers' },\n          profileImage: 1,\n          userName: 1,\n          lastName: 1,\n          firstName: 1,\n          google: 1,\n          googleImage: 1,\n        },\n      },\n    ]);\n    return await this.Fuzzy(\n      user,\n      ['firstName', 'lastName', 'userName'],\n      name,\n      limit,\n      offset,\n    );\n  }\n  async getKeys(name: string) {\n    await this.userModel.syncIndexes();\n    let keysPin = await this.pinModel\n      .aggregate([\n        {\n          $addFields: {\n            results: { $regexMatch: { input: '$category', regex: /f/ } },\n          },\n        },\n      ])\n      .limit(5);\n    if (keysPin.length > 0)\n      return keysPin.map(pin => {\n        return { name: pin.title };\n      });\n    let keysBoard = await this.boardModel\n      .find(\n        {\n          $text: { $search: name },\n        },\n        { name: 1, _id: 0 },\n      )\n      .limit(5)\n      .lean();\n    if (keysBoard.length > 0) return keysBoard;\n    let KeysPeople = [];\n    return KeysPeople;\n  }\n  async getRecentSearch(userId) {\n    let user = await this.userModel.findById(userId, 'recentSearch');\n    if (!user.recentSearch) {\n      user.recentSearch = [];\n    }\n    return { recentSearch: user.recentSearch };\n  }\n  async getBoards(name, limit, offset) {\n    let board = await this.boardModel.aggregate([\n      { $match: { } },\n      {\n        $project: {\n          pins: 1,\n          sections: { $size: '$sections' },\n          coverImages: 1,\n          topic: 1,\n          description: 1,\n          name: 1,\n          creator: 1,\n        },\n      },\n    ]);\n\n    let res = await this.Fuzzy(\n      board,\n      ['name', 'description', 'topic'],\n      name,\n      limit,\n      offset,\n    );\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharedGateway.html":{"url":"classes/SharedGateway.html","title":"class - SharedGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharedGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/shared.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearUserId\n                            \n                            \n                                    Async\n                                comment\n                            \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                likeComment\n                            \n                            \n                                    Async\n                                likeReply\n                            \n                            \n                                    Async\n                                message\n                            \n                            \n                                    Async\n                                reactPin\n                            \n                            \n                                    Async\n                                reply\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                setUserId\n                            \n                            \n                                    Async\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ChatService: ChatService, pinModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/shared/shared.gateway.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ChatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('clearUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:218\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('comment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('delivered')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeComment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeComment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeReply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeReply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            message\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    message(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reactPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reactPin(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reactPin')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('seen')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('setUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            type\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    type(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { UserService } from '../user/user.service';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { pin } from '../types/pin';\nimport { user } from '../types/user';\nimport { ChatService } from 'src/chat/chat.service';\nimport { time } from 'console';\nconst jwt = require('jsonwebtoken');\n@WebSocketGateway()\nexport class SharedGateway {\n  constructor(\n    private ChatService: ChatService,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n  ) { }\n  @SubscribeMessage('setUserId')\n  async setUserId(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, { socketId: 1 });\n    if (user) {\n      console.log('user', socket.id);\n      user.socketId = socket.id;\n      await user.save();\n    }\n  }\n  @SubscribeMessage('comment')\n  async comment(socket: Socket, data: any) {\n    socket.emit('sendComment', data);\n  }\n  @SubscribeMessage('typing')\n  async type(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    if (sender && reciever) {\n      console.log('sending');\n      socket.to(reciever.socketId).emit('isTyping', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n      });\n    }\n  }\n  @SubscribeMessage('delivered')\n  async deliver(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    console.log('deliver event');\n    if (sender && reciever) {\n      console.log(reciever.socketId, 'to emiit');\n      socket.to(reciever.socketId).emit('setDelivered', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      await this.ChatService.deliver(recieverId, messageId, true);\n    }\n  }\n  @SubscribeMessage('seen')\n  async seenMessage(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    if (sender && reciever) {\n      socket.to(reciever.socketId).emit('setSeen', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      await this.ChatService.seen(recieverId, messageId, true);\n    }\n  }\n  @SubscribeMessage('message')\n  async message(socket: Socket, data: any) {\n    let messageText = data.message;\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = await this.ChatService.sendMessage(\n      senderId,\n      [recieverId],\n      messageText,\n    );\n    if (sender && reciever && messageText) {\n      socket.to(reciever.socketId).emit('sendMessage', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        message: messageText,\n        senderId: data.senderId,\n        date: Date.now(),\n        messageId: messageId,\n      });\n    }\n  }\n\n  @SubscribeMessage('reply')\n  async reply(socket: Socket, data: any) {\n    socket.emit('sendReply', data);\n  }\n\n  @SubscribeMessage('reactPin')\n  async reactPin(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { counts: 1 });\n    socket.emit('sendPinReact', {\n      reactType: data.reactType,\n      userName: user.firstName + ' ' + user.lastName,\n      userImage: user.profileImage,\n      pinId: data.pinId,\n      wowReacts:\n        data.reactType == 'Wow'\n          ? pin.counts.wowReacts.valueOf() + 1\n          : pin.counts.wowReacts,\n      loveReacts:\n        data.reactType == 'Love'\n          ? pin.counts.loveReacts.valueOf() + 1\n          : pin.counts.loveReacts,\n      goodIdeaReacts:\n        data.reactType == 'Good idea'\n          ? pin.counts.goodIdeaReacts.valueOf() + 1\n          : pin.counts.goodIdeaReacts,\n      hahaReacts:\n        data.reactType == 'Haha'\n          ? pin.counts.hahaReacts.valueOf() + 1\n          : pin.counts.hahaReacts,\n      thanksReacts:\n        data.reactType == 'Thanks'\n          ? pin.counts.thanksReacts.valueOf() + 1\n          : pin.counts.thanksReacts,\n    });\n  }\n\n  @SubscribeMessage('likeComment')\n  async likeComment(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { comments: 1 });\n    for (var i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nEmail \n\nEmail \n\n\n\nNotificationService \n\nNotificationService \n\n\n\nValidationService \n\nValidationService \n\n\n\nSharedModule\n\nSharedModule\n\nEmail  -->\n\nSharedModule->Email \n\n\n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\n\n\nChatService\n\nChatService\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { User } from '../models/user.schema';\nimport { HttpExceptionFilter } from './http-exception.filter';\nimport { LoggingInterceptor } from './logging.interceptor';\nimport { ValidationService } from './validation.service';\nimport { SharedGateway } from './shared.gateway';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Email } from './send-email.service';\nimport { NotificationService } from './notification.service';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Message } from 'src/models/message.schema';\nimport { Chat } from 'src/models/chat.schema';\nimport { ChatService } from 'src/chat/chat.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  providers: [\n    SharedGateway,\n    ChatService,\n    ValidationService,\n    Email,\n    NotificationService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n  exports: [NotificationService, ValidationService, Email],\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicController.html":{"url":"controllers/TopicController.html","title":"controller - TopicController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImageToTopic\n                            \n                            \n                                    Async\n                                addPinToAtopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                createTopics\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfAtopic\n                            \n                            \n                                    Async\n                                getTopic\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImageToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImageToTopic(topics: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToAtopic(pinId: string, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/topic/addPin')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId: string, imageHeight: number, imageWidth: number, name: string, description: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/createTopic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopics(topics: Array, images: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createTopics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following-topics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfAtopic(req, topicId: string, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId/pins')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopic(req, topicId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Put,\n  Delete,\n  ForbiddenException,\n  BadRequestException,\n  Param,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ImagesService } from '../images/images.service';\nimport { TopicService } from './topic.service';\n@Controller()\nexport class TopicController {\n  constructor(private TopicService: TopicService) { }\n  //get all the topics\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic')\n  async getTopics(@Request() req) {\n    let userId = req.user._id;\n    let topics = await this.TopicService.getTopics(userId);\n    if (topics) return topics;\n    return new NotFoundException();\n  }\n  //get a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId')\n  async getTopic(@Request() req, @Param('topicId') topicId: string) {\n    let topic = await this.TopicService.getTopicById(topicId);\n    if (topic)\n      return topic;\n    return new NotFoundException();\n  }\n  //get all pins of a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId/pins')\n  async getPinsOfAtopic(\n    @Request() req,\n    @Param('topicId') topicId: string,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    let userId = req.user._id;\n    let pins = await this.TopicService.getPinsOfTopic(\n      topicId,\n      limit,\n      offset,\n      userId,\n    );\n    if (pins && pins.length != 0) return pins;\n    return new NotFoundException();\n  }\n  //add pin to a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/topic/addPin')\n  async addPinToAtopic(\n    @Body('pinId') pinId: string,\n    @Body('topicName') topicName: string,\n  ) {\n    let topics = await this.TopicService.addPinToTopic(topicName, pinId);\n    if (topics) return { message: 'pin has been added successfully!' };\n    return new ForbiddenException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/createTopic')\n  async createTopic(\n    @Body('imageId') imageId: string,\n    @Body('imageHeight') imageHeight: number,\n    @Body('imageWidth') imageWidth: number,\n    @Body('name') name: string,\n    @Body('description') description: string,\n  ) {\n    let topic = await this.TopicService.createTopic(\n      imageId,\n      description,\n      imageWidth,\n      imageHeight,\n      name,\n    );\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @Post('/createTopics')\n  async createTopics(\n    @Body('topics') topics: Array,\n    @Body('topics') images: Array,\n  ) {\n    let topic = await this.TopicService.topicsSeeds(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n  @Put('/edit')\n  async addImageToTopic(@Body('topics') topics: Array) {\n    let topic = await this.TopicService.editTopic(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-topic/:topicId')\n  async followTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.followTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not follow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-topic/:topicId')\n  async unfollowTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.unfollowTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not unfollow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-topic/:topicId')\n  async checkFollowTopic(@Param() params, @Request() req) {\n    if (\n      !(await this.TopicService.checkFollowTopic(req.user._id, params.topicId))\n    )\n      return { follow: 'false' };\n    return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following-topics')\n  async followingTopics(@Request() req) {\n    return await this.TopicService.followingTopics(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicModule.html":{"url":"modules/TopicModule.html","title":"module - TopicModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_imports\n\n\n\ncluster_TopicModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/topic/topic.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TopicService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TopicController } from './topic.controller';\nimport { TopicService } from './topic.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Topic } from '../models/topic.schema';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { User } from '../models/user.schema';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [\n    SharedModule,\n    UserModule,\n    MongooseModule.forFeature([\n      { name: 'Topic', schema: Topic },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [TopicController],\n  providers: [TopicService],\n})\nexport class TopicModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicService.html":{"url":"injectables/TopicService.html","title":"injectable - TopicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TopicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPinToTopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                editTopic\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfTopic\n                            \n                            \n                                    Async\n                                getTopicById\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                topicsSeeds\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicModel: Model, pinModel: Model, userModel: Model, UserService: UserService, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/topic/topic.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToTopic(topicName, pinId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId, description, imageWidth, imageHeight, name)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageWidth\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageHeight\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editTopic(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -following topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfTopic(topicId, limit, offset, userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicById(topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            topicsSeeds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    topicsSeeds(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { topic } from '../types/topic';\nimport { ValidationService } from '../shared/validation.service';\nimport { UserService } from '../user/user.service';\nimport { pin } from '../types/pin';\n\n@Injectable()\nexport class TopicService {\n  constructor(\n    @InjectModel('Topic') private readonly topicModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n\n    private UserService: UserService,\n    private ValidationService: ValidationService,\n  ) { }\n  async topicsSeeds(topics) {\n    for (var i = 0; i  {\n      if (err) throw new Error('topic not found');\n      return topic;\n    });\n    return topic;\n  }\n  async getTopics(userId): Promise {\n    let topics = await this.topicModel.find(\n      {},\n      'name description imageId followers',\n      (err, topic) => {\n        if (err) throw new Error('topic not found');\n        return topic;\n      },\n    );\n    return topics.map(topic => {\n      let isFollow = topic.followers.includes(userId);\n      return {\n        isFollow,\n        _id: topic._id,\n        name: topic.name,\n        description: topic.description,\n        imageId: topic.imageId,\n      };\n    });\n  }\n  async addPinToTopic(topicName, pinId): Promise {\n    if (!this.ValidationService.checkMongooseID([pinId]))\n      throw new Error('not mongoose id');\n    let topic = await this.topicModel.find({ name: topicName }, 'pins');\n    let id = mongoose.Types.ObjectId(pinId);\n    const pin = await this.pinModel.findById(id, 'topic');\n    if (!pin) throw new NotFoundException();\n    pin.topic = topicName;\n    await pin.save().catch(err => {\n      return err;\n    });\n    if (topic && pin) {\n      topic[0].pins.push(pinId);\n      await topic[0].save().catch(err => {\n        return err;\n      });\n      return true;\n    }\n    throw new NotFoundException();\n  }\n  async getPinsOfTopic(topicId, limit, offset, userId): Promise {\n    if (!this.ValidationService.checkMongooseID([topicId]))\n      throw new Error('not mongoose id');\n    const topic = await this.getTopicById(topicId);\n    if (!topic.pins.length) return [];\n    let pinsIds = this.ValidationService.limitOffset(\n      limit,\n      offset,\n      topic.pins,\n    );\n    let pins = [];\n    for (let i = 0; i  {\n        if (pin) pins.push(pin);\n      });\n    }\n    return pins;\n  }\n  /**\n   * @author Aya Abohadima \n   * @descriptioncheck if this user follow this topic \n    * @param {String} userId -user id  \n    * @param {String} topicId - topic id\n    * @returns {Boolean}\n    */\n  async checkFollowTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (!(await this.UserService.getUserById(userId)))\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.getTopicById(topicId);\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers || topic.followers.length == 0) return false;\n    return topic.followers.includes(userId);\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @description make user follow topic\n    * @param {String} userId -user id  \n    * @param {String} topicId - topic id\n    * @returns {Number} 1\n  */\n  async followTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (await this.checkFollowTopic(userId, topicId))\n      throw new HttpException(\n        'you are already follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    const user = await this.UserService.getUserById(userId);\n    if (!user)\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.topicModel.findById(topicId, {\n      pins: 1,\n      followers: 1,\n      name: 1,\n    });\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers) topic.followers = [];\n    topic.followers.push(userId);\n    await topic.save();\n    if (!user.followingTopics) user.followingTopics = [];\n    user.followingTopics.push(topicId);\n    if (!user.lastTopics) user.lastTopics = [];\n    if (user.lastTopics.length > 0) {\n      if (user.lastTopics[user.lastTopics.length - 1].topicName == topic.name) {\n        await user.save();\n        return 1;\n      }\n    }\n    user.lastTopics.push({\n      topicName: topic.name,\n      pinsLength: topic.pins.length,\n    });\n    if (user.lastTopics.length > 5) {\n      user.lastTopics = user.lastTopics.slice(1, 5);\n    }\n    await user.save();\n    return 1;\n  }\n\n  /**\n  * @author Aya Abohadima \n  * @description make user unfollow topic\n  * @param {String} userId -user id  \n  * @param {String} topicId - topic id\n  * @returns {Number} 1\n  */\n  async unfollowTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (!(await this.checkFollowTopic(userId, topicId)))\n      throw new HttpException(\n        'you dont follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    const user = await this.UserService.getUserById(userId);\n    if (!user)\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.getTopicById(topicId);\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers)\n      throw new HttpException(\n        'you dont follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    await this.topicModel\n      .findByIdAndUpdate(topicId, { $pull: { followers: userId } })\n      .lean();\n    if (!user.followingTopics)\n      throw new HttpException(\n        'you dont follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    await this.userModel\n      .findByIdAndUpdate(userId, { $pull: { followingTopics: { topicId } } })\n      .lean();\n    return 1;\n  }\n\n  /**\n   * @author Aya Abohadima \n   * @descriptionget user following topic\n   * @param {String} userId -user id  \n   * @returns {Array} -following topic object\n   */\n  async followingTopics(userId) {\n    return await this.topicModel.aggregate([\n      { $match: { followers: mongoose.Types.ObjectId(userId) } },\n      { $project: { followers: { $size: '$followers' }, imageId: 1, name: 1 } },\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateDto.html":{"url":"interfaces/UpdateDto.html","title":"interface - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                            Optional\n                                        birthDate\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                            Optional\n                                        location\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                                \n                                            Optional\n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateDto {\n  email?: string;\n  password?: string;\n  birthDate?: Date;\n  firstName?: string;\n  lastName?: string;\n  location?: string;\n  userName?: string;\n  country?: string;\n  gender?: string;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n  profileImage?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateSettingsDto.html":{"url":"interfaces/UpdateSettingsDto.html","title":"interface - UpdateSettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateSettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user-settings.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        activateaccount\n                                \n                                \n                                            Optional\n                                        activity\n                                \n                                \n                                            Optional\n                                        boardsForYou\n                                \n                                \n                                            Optional\n                                        boardUpdate\n                                \n                                \n                                            Optional\n                                        deleteflag\n                                \n                                \n                                            Optional\n                                        facebook\n                                \n                                \n                                            Optional\n                                        followNotification\n                                \n                                \n                                            Optional\n                                        google\n                                \n                                \n                                            Optional\n                                        invitation\n                                \n                                \n                                            Optional\n                                        notificationCounter\n                                \n                                \n                                            Optional\n                                        pinsForYou\n                                \n                                \n                                            Optional\n                                        pinsInspired\n                                \n                                \n                                            Optional\n                                        pinsNotification\n                                \n                                \n                                            Optional\n                                        popularPins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteflag\n                                    \n                                \n                                \n                                    \n                                        deleteflag:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateSettingsDto {\n  facebook?: Boolean;\n  activity?: Boolean;\n  invitation?: Boolean;\n  boardUpdate?: Boolean;\n  google?: Boolean;\n  deleteflag?: Boolean;\n  boardsForYou?: Boolean;\n  popularPins?: Boolean;\n  pinsForYou?: Boolean;\n  pinsInspired?: Boolean;\n  activateaccount?: Boolean;\n  followNotification?: Boolean;\n  pinsNotification?: Boolean;\n  notificationCounter?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkfollowingUser\n                            \n                            \n                                    Async\n                                confirmUpdateEmail\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowings\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserFollowers\n                            \n                            \n                                    Async\n                                getUserFollowings\n                            \n                            \n                                    Async\n                                getViewState\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                setFCMToken\n                            \n                            \n                                    Async\n                                setViewState\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkfollowingUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkfollowingUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmUpdateEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUpdateEmail(req, type: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/confirm-update-email')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:166\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowings(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNotifications\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('notifications/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowers(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:227\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowings(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getViewState(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/log-out')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:189\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('users/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(req, newPassword: string, oldPassword: string, forgetPassword: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/reset-password')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oldPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    forgetPassword\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setFCMToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setFCMToken(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setViewState(req, viewState: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    viewState\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(req, updateData: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUserSettings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserSettings(req, updateData: UpdateSettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update-settings')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateSettingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Put,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Param,\n  BadRequestException,\n  NotAcceptableException\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Email } from '../shared/send-email.service';\nimport { UpdateSettingsDto } from './dto/update-user-settings.dto';\nimport { UpdateDto } from './dto/update-user.dto';\n@Controller()\nexport class UserController {\n  constructor(private userService: UserService, private email: Email) { }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('users/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserMe(req.user._id);\n\n    return user;\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('notifications/me')\n  async getNotifications(@Request() req) {\n    const user = await this.userService.getUserNotifications(req.user._id);\n    return user;\n  }\n  @Get('/user/:id')\n  async getUser(@Param() params) {\n    const user = await this.userService.getUserMe(params.id);\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/reset-password')\n  async resetPassword(\n    @Request() req,\n    @Body('newPassword') newPassword: string,\n    @Body('oldPassword') oldPassword: string,\n    @Body('forgetPassword') forgetPassword: Boolean,\n  ) {\n    if (forgetPassword == true) oldPassword = null;\n    else if (!oldPassword)\n      throw new HttpException(\n        'oldPassword is reqired',\n        HttpStatus.FORBIDDEN,\n      );\n    const ifRest = await this.userService.resetPassword(\n      req.user._id,\n      newPassword,\n      oldPassword,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update')\n  async updateUser(\n    @Request() req,\n    @Body() updateData: UpdateDto,\n  ) {\n    await this.userService.checkUpdateData(updateData);\n    await this.userService.updateUserInfo(req.user._id, updateData);\n    const user = await this.userService.getUserById(req.user._id);\n    user.password = null;\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update-settings')\n  async updateUserSettings(\n    @Request() req,\n    @Body() updateData: UpdateSettingsDto,\n  ) {\n    if (updateData.notificationCounter)\n      return await this.userService.updateDataInUser(req.user._id, {\n        notificationCounter: 0,\n      });\n    await this.userService.updateSettings(req.user._id, updateData);\n    const user = await this.userService.getUserById(req.user._id);\n    user.password = null;\n    return user;\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/confirm-update-email')\n  async confirmUpdateEmail(\n    @Request() req,\n    @Query('type') type: string,\n  ) {\n    if (!req.user.email || !req.user.newEmail || !req.user._id)\n      throw new HttpException(\n        'not correct token',\n        HttpStatus.FORBIDDEN,\n      );\n    if (type === 'changeEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.email,\n      );\n      if (!user)\n        throw new HttpException(\n          'no user by this email',\n          HttpStatus.FORBIDDEN,\n        );\n      await this.email.sendEmail(\n        req.user.newEmail,\n        req.header('Authorization'),\n        'set email',\n        req.user.firstName,\n      );\n    } else if (type === 'resetEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.newEmail,\n      );\n      if (user)\n        throw new HttpException(\n          'this email aleardy exists',\n          HttpStatus.FORBIDDEN,\n        );\n      if (!(await this.userService.setEmail(req.user._id, req.user.newEmail)))\n        throw new HttpException(\n          'not user or not email',\n          HttpStatus.BAD_REQUEST,\n        );\n    } else if (!type)\n      throw new HttpException(\n        'type not correct',\n        HttpStatus.FORBIDDEN,\n      );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/boards/view')\n  async setViewState(\n    @Request() req,\n    @Query('viewState') viewState: string,\n  ) {\n    const view = await this.userService.setViewState(req.user._id, viewState);\n    if (view) {\n      return { success: 'view is updated' };\n    } else {\n      throw new NotAcceptableException('view is not updated');\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boards/view')\n  async getViewState(@Request() req) {\n    const view = await this.userService.getViewState(req.user._id);\n    if (view) {\n      return view;\n    } else {\n      throw new NotAcceptableException('cant get view state');\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-user/:userId')\n  async followUser(@Param() params, @Request() req) {\n    if (!(await this.userService.followUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-user/:userId')\n  async unfollowUser(@Param() params, @Request() req) {\n    if (!(await this.userService.unfollowUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/:fcmToken')\n  async setFCMToken(@Param() params, @Request() req) {\n    const user = await this.userService.updateFCMTocken(\n      params.fcmToken,\n      req.user._id,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/log-out')\n  async logOut(@Request() req) {\n    const user = await this.userService.updateFCMTocken(' ', req.user._id);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-user/:userId')\n  async checkfollowingUser(\n    @Param() params,\n    @Request() req,\n  ) {\n    const user = await this.userService.getUserById(req.user._id);\n    if (!(await this.userService.checkFollowUser(user, params.userId)))\n      return { follow: 'false' };\n    else return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follower')\n  async getFollowers(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following')\n  async getFollowings(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/follower')\n  async getUserFollowers(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(params.userId, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/following')\n  async getUserFollowings(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(params.userId, limit, offset);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { UserController } from './user.controller';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Topic } from '../models/topic.schema';\nimport { UserService } from './user.service';\nimport { User } from 'src/models/user.schema';\nimport { Message } from 'src/models/message.schema';\nimport { Chat } from 'src/models/chat.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkMongooseID\n                            \n                            \n                                limitOffset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/validation.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkMongooseID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkMongooseID(ids)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            limitOffset\n                        \n                        \n                    \n                \n            \n            \n                \nlimitOffset(limit: number, offset: number, specificElements: (string | object)[])\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    specificElements\n                                    \n                                            (string | object)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { user } from '../types/user';\nconst ObjectId = require('mongoose').Types.ObjectId;\n@Injectable()\nexport class ValidationService {\n  constructor() {}\n\n  async checkMongooseID(ids) {\n    for (let id of ids) {\n      if (id == undefined) continue;\n      if (!ObjectId.isValid(id)) return 0;\n    }\n    return 1;\n  }\n  limitOffset(\n    limit: number,\n    offset: number,\n    specificElements: (string | object)[],\n  ): any[] {\n    let start = 0;\n    let end = specificElements.length;\n    if (offset)\n      if (offset >= 0 && offset  0 && num \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/board.html":{"url":"interfaces/board.html","title":"interface - board","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  board\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collaborators\n                                \n                                \n                                        counts\n                                \n                                \n                                        coverImages\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        description\n                                \n                                \n                                        endDate\n                                \n                                \n                                        followers\n                                \n                                \n                                        isJoined\n                                \n                                \n                                        more\n                                \n                                \n                                        name\n                                \n                                \n                                        personalization\n                                \n                                \n                                        pins\n                                \n                                \n                                        sections\n                                \n                                \n                                        startDate\n                                \n                                \n                                        status\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collaborators\n                                    \n                                \n                                \n                                    \n                                        collaborators:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                    \n                                \n                                \n                                    \n                                        endDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isJoined\n                                    \n                                \n                                \n                                    \n                                        isJoined:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        personalization\n                                    \n                                \n                                \n                                    \n                                        personalization:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sections\n                                    \n                                \n                                \n                                    \n                                        sections:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                    \n                                \n                                \n                                    \n                                        startDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/chat.html":{"url":"interfaces/chat.html","title":"interface - chat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  chat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/chat.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        lastMessage\n                                \n                                \n                                        name\n                                \n                                \n                                        usersIds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastMessage\n                                    \n                                \n                                \n                                    \n                                        lastMessage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersIds\n                                    \n                                \n                                \n                                    \n                                        usersIds:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface chat extends Document {\n    name: String,\n    usersIds: Array,\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n\n    }\n    date: Date\n\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/comment.html":{"url":"interfaces/comment.html","title":"interface - comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commenter\n                                \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replies\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commenter\n                                    \n                                \n                                \n                                    \n                                        commenter:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replies\n                                    \n                                \n                                \n                                    \n                                        replies:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: mongoose.Types.ObjectId;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            interface\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            interface\n            RegisterDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board.controller.ts\n            \n            controller\n            BoardController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/board/board.service.ts\n            \n            injectable\n            BoardService\n            \n                0 %\n                (0/31)\n            \n        \n        \n            \n                \n                src/board/dto/edit-board.dto.ts\n            \n            class\n            EditBoardDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/dto/edit-collaboratores-permissions.dto.ts\n            \n            class\n            EditCollaboratoresPermissionsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/images/file-models/file-info-vm.model.ts\n            \n            class\n            FileInfoVm\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/images/file-models/file-response-vm..model.ts\n            \n            class\n            FileResponseVm\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/images/multer-config.service.ts\n            \n            injectable\n            GridFsMulterConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            cors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Board\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Chat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Pin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Topic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pins/dto/create-pin.dto.ts\n            \n            class\n            CreatePinDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/pins/pins.controller.ts\n            \n            controller\n            PinsController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/pins/pins.service.ts\n            \n            injectable\n            PinsService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.controller.ts\n            \n            controller\n            RecommendationController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.service.ts\n            \n            injectable\n            RecommendationService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/search/search.service.ts\n            \n            injectable\n            SearchService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/shared/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            variable\n            params\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/send-email.service.ts\n            \n            injectable\n            Email\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            class\n            SharedGateway\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            variable\n            ObjectId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/topic/topic.controller.ts\n            \n            controller\n            TopicController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/topic/topic.service.ts\n            \n            injectable\n            TopicService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            board\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            section\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/chat.ts\n            \n            interface\n            chat\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/message.ts\n            \n            interface\n            message\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/payload.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            pin\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            reply\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/topic.ts\n            \n            interface\n            topic\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/types/user.ts\n            \n            interface\n            user\n            \n                0 %\n                (0/48)\n            \n        \n        \n            \n                \n                src/user/dto/update-user-settings.dto.ts\n            \n            interface\n            UpdateSettingsDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            interface\n            UpdateDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/utilities/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.11\n        \n            @google-cloud/firestore : ^4.2.0\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs-modules/mailer : ^1.5.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/platform-socket.io : ^7.3.2\n        \n            @nestjs/serve-static : ^2.1.3\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjs/websockets : ^7.3.2\n        \n            @types/fuzzy-search : ^2.1.0\n        \n            @types/multer-gridfs-storage : ^4.0.1\n        \n            @types/nodemailer : ^6.4.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            dotenv : ^8.2.0\n        \n            elasticsearch : ^16.7.1\n        \n            firebase-admin : ^9.1.1\n        \n            fuzzy-search : ^3.2.1\n        \n            googleapis : ^60.0.1\n        \n            jsonwebtoken : ^8.5.1\n        \n            method-override : ^3.0.0\n        \n            mongo-gridfs : ^1.1.0\n        \n            mongoosastic : ^4.6.0\n        \n            mongoose : ^5.9.26\n        \n            mongoose-partial-search : ^1.0.5\n        \n            morgan : ^1.10.0\n        \n            multer : ^1.4.2\n        \n            multer-gridfs-storage : ^4.2.0\n        \n            node-fetch : ^2.6.0\n        \n            nodemailer : ^6.4.10\n        \n            partial : 0.0.7\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            search : ^1.0.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/message.html":{"url":"interfaces/message.html","title":"interface - message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/message.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chatId\n                                \n                                \n                                        date\n                                \n                                \n                                        deliverStatus\n                                \n                                \n                                        message\n                                \n                                \n                                        seenStatus\n                                \n                                \n                                        senderId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chatId\n                                    \n                                \n                                \n                                    \n                                        chatId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deliverStatus\n                                    \n                                \n                                \n                                    \n                                        deliverStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seenStatus\n                                    \n                                \n                                \n                                    \n                                        seenStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                    \n                                \n                                \n                                    \n                                        senderId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nexport interface message extends Document {\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array\n    seenStatus: Array\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PinsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecommendationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nEmail \n\nEmail \n\nEmail  -->\n\nSharedModule->Email \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nGridFsMulterConfigService\n\nGridFsMulterConfigService\n\nImagesModule -->\n\nGridFsMulterConfigService->ImagesModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/pin.html":{"url":"interfaces/pin.html","title":"interface - pin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  pin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        board\n                                \n                                \n                                        comments\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        destLink\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        more\n                                \n                                \n                                        note\n                                \n                                \n                                        reacts\n                                \n                                \n                                        savers\n                                \n                                \n                                        section\n                                \n                                \n                                        title\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        board\n                                    \n                                \n                                \n                                    \n                                        board:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destLink\n                                    \n                                \n                                \n                                    \n                                        destLink:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reacts\n                                    \n                                \n                                \n                                    \n                                        reacts:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savers\n                                    \n                                \n                                \n                                    \n                                        savers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: mongoose.Types.ObjectId;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reply.html":{"url":"interfaces/reply.html","title":"interface - reply","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  reply\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replier\n                                \n                                \n                                        reply\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replier\n                                    \n                                \n                                \n                                    \n                                        replier:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reply\n                                    \n                                \n                                \n                                    \n                                        reply:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: mongoose.Types.ObjectId;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/section.html":{"url":"interfaces/section.html","title":"interface - section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coverImages\n                                \n                                \n                                        creatorId\n                                \n                                \n                                        more\n                                \n                                \n                                        pins\n                                \n                                \n                                        sectionName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorId\n                                    \n                                \n                                \n                                    \n                                        creatorId:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionName\n                                    \n                                \n                                \n                                    \n                                        sectionName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/topic.html":{"url":"interfaces/topic.html","title":"interface - topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/topic.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        followers\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        name\n                                \n                                \n                                        pins\n                                \n                                \n                                        recommendedUsers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:         [mongoose.Types.ObjectId]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [mongoose.Types.ObjectId]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recommendedUsers\n                                    \n                                \n                                \n                                    \n                                        recommendedUsers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface topic extends Document {\n  name: String;\n  followers: Array;\n  description: String;\n  pins: [mongoose.Types.ObjectId];\n  imageWidth: Number;\n  imageHeight: Number;\n  recommendedUsers: Array;\n  imageId: mongoose.Types.ObjectId;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/user.html":{"url":"interfaces/user.html","title":"interface - user","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  user\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        about\n                                \n                                \n                                        activateaccount\n                                \n                                \n                                        activity\n                                \n                                \n                                        birthDate\n                                \n                                \n                                        boards\n                                \n                                \n                                        boardsForYou\n                                \n                                \n                                        boardUpdate\n                                \n                                \n                                        confirm\n                                \n                                \n                                        country\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                        facebook\n                                \n                                \n                                        fcmToken\n                                \n                                \n                                        firstName\n                                \n                                \n                                        followers\n                                \n                                \n                                        following\n                                \n                                \n                                        followingTopics\n                                \n                                \n                                        followNotification\n                                \n                                \n                                        gender\n                                \n                                \n                                        google\n                                \n                                \n                                        googleImage\n                                \n                                \n                                        history\n                                \n                                \n                                        homeFeed\n                                \n                                \n                                        invitation\n                                \n                                \n                                        lastName\n                                \n                                \n                                        lastTopics\n                                \n                                \n                                        location\n                                \n                                \n                                        notificationCounter\n                                \n                                \n                                        notificationOfPinsActivity\n                                \n                                \n                                        notifications\n                                \n                                \n                                        offlineNotifications\n                                \n                                \n                                        password\n                                \n                                \n                                        pins\n                                \n                                \n                                        pinsForYou\n                                \n                                \n                                        pinsInspired\n                                \n                                \n                                        pinsNotification\n                                \n                                \n                                        popularPins\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        recentSearch\n                                \n                                \n                                        recievedMessages\n                                \n                                \n                                        savedPins\n                                \n                                \n                                        sentMessages\n                                \n                                \n                                        socketId\n                                \n                                \n                                        sortType\n                                \n                                \n                                        userName\n                                \n                                \n                                        viewState\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        about\n                                    \n                                \n                                \n                                    \n                                        about:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boards\n                                    \n                                \n                                \n                                    \n                                        boards:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirm\n                                    \n                                \n                                \n                                    \n                                        confirm:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fcmToken\n                                    \n                                \n                                \n                                    \n                                        fcmToken:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followingTopics\n                                    \n                                \n                                \n                                    \n                                        followingTopics:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleImage\n                                    \n                                \n                                \n                                    \n                                        googleImage:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        history\n                                    \n                                \n                                \n                                    \n                                        history:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        homeFeed\n                                    \n                                \n                                \n                                    \n                                        homeFeed:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastTopics\n                                    \n                                \n                                \n                                    \n                                        lastTopics:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationOfPinsActivity\n                                    \n                                \n                                \n                                    \n                                        notificationOfPinsActivity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notifications\n                                    \n                                \n                                \n                                    \n                                        notifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offlineNotifications\n                                    \n                                \n                                \n                                    \n                                        offlineNotifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         mongoose.Types.ObjectId | String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId | String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentSearch\n                                    \n                                \n                                \n                                    \n                                        recentSearch:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recievedMessages\n                                    \n                                \n                                \n                                    \n                                        recievedMessages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savedPins\n                                    \n                                \n                                \n                                    \n                                        savedPins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sentMessages\n                                    \n                                \n                                \n                                    \n                                        sentMessages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        socketId\n                                    \n                                \n                                \n                                    \n                                        socketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortType\n                                    \n                                \n                                \n                                    \n                                        sortType:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewState\n                                    \n                                \n                                \n                                    \n                                        viewState:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface user extends Document {\n  firstName: String;\n  lastName: String;\n  userName: String;\n  location: String;\n  email: String;\n  password: String;\n  country: String;\n  boardsForYou: Boolean;\n  popularPins: Boolean;\n  pinsForYou: Boolean;\n  activity: Boolean;\n  invitation: Boolean;\n  boardUpdate: Boolean;\n  activateaccount: Boolean;\n  followNotification: Boolean;\n  pinsNotification: Boolean;\n  pinsInspired: Boolean;\n  birthDate: Date;\n  about: String;\n  facebook: Boolean;\n  google: Boolean;\n  notificationOfPinsActivity: Boolean;\n  gender: String;\n  googleImage: String;\n  sortType: String;\n  socketId: string;\n  notificationCounter: Number;\n  profileImage: mongoose.Types.ObjectId | String;\n  lastTopics: Array;\n  history: Array;\n  pins: Array;\n  savedPins: Array;\n  sentMessages: Array;\n    userId: mongoose.Types.ObjectId;\n  }>;\n  recentSearch: Array;\n  recievedMessages: Array;\n    userId: mongoose.Types.ObjectId;\n  }>;\n  confirm: Boolean;\n  fcmToken: String;\n  homeFeed: Array;\n  followingTopics: Array;\n  notifications: [{}];\n  offlineNotifications: [{}];\n  followers: Array;\n  following: Array;\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId;\n      name: String;\n      createdAt: Date;\n      isJoined: Boolean;\n      createdOrjoined: String;\n    },\n  ];\n  viewState: string;\n  counts: {\n    likes: Number;\n    comments: Number;\n    repins: Number;\n    saves: Number;\n  };\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (src/.../notification.service.ts)\n                        \n                        \n                            Board   (src/.../board.schema.ts)\n                        \n                        \n                            Chat   (src/.../chat.schema.ts)\n                        \n                        \n                            cors   (src/.../main.ts)\n                        \n                        \n                            fs   (src/.../main.ts)\n                        \n                        \n                            jwt   (src/.../shared.gateway.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            Message   (src/.../message.schema.ts)\n                        \n                        \n                            ObjectId   (src/.../validation.service.ts)\n                        \n                        \n                            params   (src/.../notification.service.ts)\n                        \n                        \n                            path   (src/.../images.controller.ts)\n                        \n                        \n                            Pin   (src/.../pin.schema.ts)\n                        \n                        \n                            Schema   (src/.../board.schema.ts)\n                        \n                        \n                            Schema   (src/.../chat.schema.ts)\n                        \n                        \n                            Schema   (src/.../message.schema.ts)\n                        \n                        \n                            Schema   (src/.../pin.schema.ts)\n                        \n                        \n                            Schema   (src/.../topic.schema.ts)\n                        \n                        \n                            Schema   (src/.../user.schema.ts)\n                        \n                        \n                            Topic   (src/.../topic.schema.ts)\n                        \n                        \n                            User   (src/.../user.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/notification.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : firebase.initializeApp({\n  credential: firebase.credential.cert(params),\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            params\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: String(process.env.FIREBASE_CREADENTIAL_TYPE),\n  projectId: String(process.env.FIREBASE_CREADENTIAL_PROJECT_ID),\n  privateKeyId: String(process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY_ID),\n  privateKey: String(process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY.replace(/\\\\n/g, '\\n')),\n  clientEmail: String(process.env.FIREBASE_CREADENTIAL_CLIENT_ID),\n  clientId: String(process.env.FIREBASE_CREADENTIAL_CLIENT_EMAIL),\n  authUri: String(process.env.FIREBASE_CREADENTIAL_AUTH_URI),\n  tokenUri: String(process.env.FIREBASE_CREADENTIAL_TOKEN_URI),\n  authProviderX509CertUrl: String(process.env.FIREBASE_CREADENTIAL_AUTH_PROVIDER_X509_CERT_URL),\n  clientX509CertUrl: String(process.env.FIREBASE_CREADENTIAL_CLIENT_X509_CERT_URL)\n}\n                        \n                    \n\n\n            \n        \n\n    src/models/board.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Board\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  url: String,\n  name: { type: String, index: true },\n  startDate: String,\n  endDate: String,\n  status: String,\n  topic: { type: String, index: true },\n  description: { type: String, index: true },\n  personalization: Boolean,\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  more: Array(Object),\n  coverImages: Array(mongoose.Types.ObjectId),\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    topic: String,\n  }),\n  createdAt: Date,\n  sections: [\n    {\n      sectionId: mongoose.Types.ObjectId,\n      sectionName: String,\n      more: Array(Object),\n      pins: Array({\n        pinId: mongoose.Types.ObjectId,\n        topic: String,\n      }),\n      creatorId: mongoose.Types.ObjectId,\n      coverImages: Array(mongoose.Types.ObjectId),\n    },\n  ],\n  collaborators: [\n    {\n      collaboratorId: mongoose.Types.ObjectId,\n      savePin: Boolean,\n      createPin: Boolean,\n      editTitle: Boolean,\n      editDescription: Boolean,\n      personalization: Boolean,\n      addCollaborators: Boolean,\n    },\n  ],\n  isJoined: Boolean,\n  followers: Array(mongoose.Types.ObjectId),\n  counts: {\n    followers: Number,\n    joiners: Number,\n    pins: Number,\n  },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/chat.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Chat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    name: String,\n    usersIds: Array(String),\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n    },\n    date: Date\n\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cors\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('cors')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('morgan')\n                        \n                    \n\n\n            \n        \n\n    src/shared/shared.gateway.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/models/message.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Message\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array({\n        userId: String,\n        time: Date\n    }),\n    seenStatus: Array({\n        userId: String,\n        time: Date\n    })\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/shared/validation.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ObjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('mongoose').Types.ObjectId\n                        \n                    \n\n\n            \n        \n\n    src/images/images.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('path')\n                        \n                    \n\n\n            \n        \n\n    src/models/pin.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Pin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  imageId: mongoose.Types.ObjectId,\n  imageWidth: Number,\n  imageHeight: Number,\n  url: String,\n  title: { type: String, index: true },\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  savers: Array(mongoose.Types.ObjectId),\n  board: mongoose.Types.ObjectId,\n  section: mongoose.Types.ObjectId,\n  createdAt: Date,\n  topic: String,\n  note: { type: String, index: true },\n  destLink: String,\n  comments: Array({\n    commenter: mongoose.Types.ObjectId,\n    comment: String,\n    date: Date,\n    replies: [\n      {\n        replier: mongoose.Types.ObjectId,\n        reply: String,\n        date: Date,\n        likes: {\n          counts: Number,\n          likers: [mongoose.Types.ObjectId],\n        },\n      },\n    ],\n    likes: {\n      counts: Number,\n      likers: [mongoose.Types.ObjectId],\n    },\n  }),\n  more: Array(Object),\n  counts: {\n    comments: Number,\n    thanksReacts: Number,\n    loveReacts: Number,\n    wowReacts: Number,\n    goodIdeaReacts: Number,\n    hahaReacts: Number,\n  },\n  reacts: [\n    {\n      reactType: String,\n      userId: mongoose.Types.ObjectId,\n    },\n  ],\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/topic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: String,\n  followers: [mongoose.Types.ObjectId],\n  description: String,\n  pins: [mongoose.Types.ObjectId],\n  imageWidth: Number,\n  imageHeight: Number,\n  recommendedUsers: [mongoose.Types.ObjectId],\n  imageId: mongoose.Types.ObjectId,\n})\n                        \n                    \n\n\n            \n        \n\n    src/models/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  recentSearch: Array(String),\n  firstName: { type: String, index: true },\n  lastName: { type: String, index: true },\n  email: String,\n  password: String,\n  country: String,\n  birthDate: Date,\n  followingTopics: Array(mongoose.Types.ObjectId),\n  location: String,\n  activateaccount: Boolean,\n  notificationCounter: Number,\n  activity: Boolean,\n  lastTopics: Array({\n    topicName: String,\n    pinsLength: Number,\n  }),\n  invitation: Boolean,\n  boardUpdate: Boolean,\n  followNotification: Boolean,\n  pinsNotification: Boolean,\n  facebook: Boolean,\n  google: Boolean,\n  notificationOfPinsActivity: Boolean,\n  userName: { type: String, index: true },\n  boardsForYou: Boolean,\n  pinsForYou: Boolean,\n  pinsInspired: Boolean,\n  popularPins: Boolean,\n  about: String,\n  sortType: String,\n  gender: String,\n  socketId: String,\n  homeFeed: Array(Object),\n  history: Array({\n    topic: String,\n    pinId: mongoose.Types.ObjectId,\n  }),\n  googleImage: String,\n  profileImage: mongoose.Types.ObjectId,\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n  }),\n  sentMessages: Array({\n    message: Array({\n      note: String,\n      time: Date,\n    }),\n    userId: mongoose.Types.ObjectId,\n  }),\n  recievedMessages: Array({\n    message: Array({\n      note: String,\n      time: Date,\n    }),\n    userId: mongoose.Types.ObjectId,\n  }),\n  savedPins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n    note: String,\n  }),\n  confirm: Boolean,\n  fcmToken: String,\n  notifications: [{}],\n  offlineNotifications: [{}],\n  followers: Array(mongoose.Types.ObjectId),\n  following: Array(mongoose.Types.ObjectId),\n  viewState: String,\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId,\n      name: String,\n      createdAt: Date,\n      isJoined: Boolean,\n      createdOrjoined: String,\n    },\n  ],\n  counts: {\n    likes: Number,\n    comments: Number,\n    repins: Number,\n    saves: Number,\n  },\n  createdAt: Date,\n})\n                        \n                    \n\n\n            \n        \n\n    src/utilities/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req) => req.user)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
