var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.176,1,2.549]],["body/controllers/AppController.html",[0,2.072,1,4.492,2,1.579,3,0.185,4,0.185,5,0.155,6,4.654,7,0.449,8,1.705,9,6.121,10,2.655,11,0.019,12,1.237,13,5.418,14,1.433,15,0.969,16,0.534,17,0.814,18,4.096,19,4.654,20,0.185,21,0.413,22,2.655,23,2.822,24,1.579,25,5.418,26,0.013,27,0.016,28,0.013]],["title/modules/AppModule.html",[29,0.756,30,2.549]],["body/modules/AppModule.html",[1,4.199,2,1.567,3,0.138,4,0.138,5,0.116,11,0.019,16,0.617,17,0.61,18,4.083,19,3.484,20,0.138,21,0.309,26,0.01,27,0.013,28,0.01,29,1.246,30,5.349,31,1.514,32,1.514,33,1.681,34,1.681,35,1.514,36,2.497,37,1.681,38,3.484,39,3.484,40,3.484,41,4.399,42,3.363,43,4.399,44,3.574,45,3.574,46,4.399,47,4.399,48,2.562,49,4.399,50,3.574,51,2.227,52,1.594,53,1.594,54,4.057,55,2.351,56,4.057,57,2.826,58,1.988,59,1.44,60,4.057,61,1.876,62,2.601,63,2.826,64,4.057,65,3.484,66,4.057,67,4.057,68,4.057,69,4.057]],["title/injectables/AppService.html",[18,2.177,70,0.878]],["body/injectables/AppService.html",[3,0.187,4,0.187,5,0.156,7,0.454,8,1.717,9,6.143,11,0.019,12,1.251,14,1.449,15,0.976,16,0.454,17,0.824,18,3.862,20,0.187,21,0.418,24,1.597,26,0.014,27,0.016,28,0.014,29,1.132,70,1.557,71,2.27,72,4.706,73,4.197,74,5.479,75,4.197,76,5.479,77,5.479]],["title/controllers/AuthController.html",[0,1.176,78,2.549]],["body/controllers/AuthController.html",[0,1.309,2,0.797,3,0.093,4,0.093,5,0.078,7,0.227,8,1.077,10,3.22,11,0.019,12,1.5,14,1.737,15,0.731,16,0.532,17,0.411,20,0.093,21,0.209,24,1.418,26,0.007,27,0.01,28,0.007,78,2.837,79,2.35,80,2.39,81,4.073,82,3.389,83,4.073,84,3.498,85,4.073,86,4.073,87,3.498,88,4.073,89,2.736,90,4.073,91,2.736,92,1.915,93,0.879,94,0.638,95,1.576,96,2.22,97,2.736,98,2.736,99,2.736,100,3.325,101,2.736,102,2.736,103,2.736,104,2.736,105,4.073,106,2.385,107,2.736,108,2.895,109,2.736,110,2.736,111,2.736,112,2.736,113,4.013,114,2.736,115,2.736,116,2.736,117,3.754,118,4.073,119,2.736,120,5.39,121,2.35,122,2.736,123,2.736,124,2.736,125,3.754,126,4.073,127,2.736,128,1.754,129,1.52,130,2.262,131,1.628,132,1.628,133,1.628,134,1.52,135,1.781,136,1.628,137,1.341,138,2.702,139,2.096,140,3.722,141,2.35,142,2.736,143,2.736,144,2.702,145,2.096,146,2.35,147,2.096,148,1.197,149,2.895,150,2.736,151,4.073,152,2.736,153,2.736,154,2.736,155,2.926,156,3.12,157,2.796,158,2.736,159,2.736,160,4.073,161,4.073,162,3.498,163,4.073,164,2.736,165,2.357,166,1.732,167,2.736,168,1.666,169,2.736,170,2.35,171,2.35,172,3.119,173,4.866,174,4.121,175,4.866,176,2.121,177,3.498,178,2.736,179,2.736,180,2.736,181,4.179,182,2.736,183,2.736,184,2.895,185,2.736,186,2.736,187,2.736,188,2.736,189,2.736,190,2.736,191,2.096,192,3.12,193,2.736,194,2.736,195,2.736,196,4.179,197,2.35,198,3.12,199,2.736,200,2.736,201,3.498,202,2.736,203,2.423,204,2.35,205,2.736,206,2.35,207,2.35]],["title/modules/AuthModule.html",[29,0.756,41,2.346]],["body/modules/AuthModule.html",[2,1.728,3,0.161,4,0.161,5,0.135,11,0.019,16,0.6,17,0.71,20,0.161,21,0.36,26,0.012,27,0.015,28,0.012,29,1.34,31,1.764,32,1.764,33,1.957,34,1.957,35,1.764,36,2.686,37,1.957,41,4.867,48,2.668,50,3.722,51,2.457,52,1.857,53,1.857,55,2.594,61,2.185,78,4.515,144,3.97,145,3.619,208,4.058,209,4.725,210,4.058,211,4.582,212,4.582,213,4.725,214,4.725,215,4.725,216,4.725,217,4.058]],["title/injectables/AuthService.html",[70,0.878,144,2.033]],["body/injectables/AuthService.html",[3,0.117,4,0.117,5,0.098,7,0.285,8,1.272,11,0.019,12,1.369,14,1.668,16,0.496,17,0.518,20,0.117,21,0.262,22,1.688,24,1.614,26,0.009,27,0.012,28,0.009,29,0.712,70,1.153,71,1.427,73,2.638,80,2.233,87,2.958,92,1.747,93,0.802,94,0.743,95,1.438,96,1.222,100,1.688,106,1.688,135,1.506,138,3.629,139,2.638,140,4.271,141,2.958,144,2.67,148,1.506,155,1.427,157,2.177,165,2.103,166,1.545,168,1.641,172,3.082,174,4.513,176,1.794,196,2.958,198,2.638,203,2.049,218,2.958,219,4.808,220,4.808,221,5.996,222,3.444,223,3.444,224,4.808,225,3.444,226,4.808,227,3.444,228,2.484,229,3.86,230,4.808,231,4.808,232,4.13,233,4.808,234,3.444,235,4.13,236,5.996,237,3.082,238,4.758,239,2.958,240,3.444,241,2.861,242,3.444,243,3.444,244,2.504,245,3.444,246,3.444,247,2.423,248,4.13,249,3.444,250,3.444,251,4.808,252,3.444,253,4.808,254,3.444,255,2.958,256,1.285,257,1.353,258,2.958,259,2.958,260,1.913,261,3.444,262,3.444,263,3.444,264,4.808,265,4.808,266,3.683,267,4.13,268,4.808,269,2.399,270,2.399,271,2.638,272,2.958,273,3.444]],["title/modules/BoardModule.html",[29,0.756,42,1.794]],["body/modules/BoardModule.html",[2,1.679,3,0.154,4,0.154,5,0.129,11,0.019,16,0.608,17,0.679,20,0.154,21,0.344,26,0.011,27,0.014,28,0.011,29,1.312,31,1.685,32,1.685,33,1.87,34,1.87,35,1.685,36,2.63,37,2.63,42,3.598,48,2.637,51,2.387,52,1.774,53,1.774,55,2.52,58,2.213,59,1.602,61,2.088,93,0.895,168,1.523,274,3.878,275,4.515,276,3.878,277,3.878,278,5.215,279,4.515,280,5.452,281,4.515,282,4.515,283,2.143,284,2.686,285,1.942,286,2.508,287,1.85,288,2.686,289,2.508,290,2.352,291,3.092]],["title/controllers/ChatController.html",[0,1.176,292,2.549]],["body/controllers/ChatController.html",[0,1.634,2,1.088,3,0.127,4,0.127,5,0.107,7,0.309,8,1.344,10,3.042,11,0.019,12,1.417,14,1.641,15,1.149,16,0.479,17,0.561,20,0.127,21,0.285,22,1.83,24,1.809,26,0.009,27,0.013,28,0.009,80,2.338,92,1.809,93,0.917,94,0.64,95,1.489,108,2.221,128,2.394,134,2.074,135,2.714,136,2.221,137,1.83,157,2.439,165,2.714,166,1.994,184,3.692,247,1.633,292,3.541,293,3.207,294,4.367,295,5.781,296,5.781,297,5.781,298,3.207,299,3.734,300,3.734,301,2.223,302,3.734,303,4.472,304,3.734,305,3.734,306,4.367,307,3.734,308,5.343,309,4.753,310,3.734,311,3.734,312,3.734,313,2.317,314,3.734,315,3.734,316,3.011,317,3.207,318,3.734,319,3.734,320,3.734,321,2.86,322,3.734,323,6.292,324,3.734,325,3.734,326,3.734,327,3.734,328,3.734,329,3.734,330,5.084,331,5.084,332,3.734,333,3.734,334,3.734,335,3.734,336,3.207,337,3.734]],["title/modules/ChatModule.html",[29,0.756,43,2.346]],["body/modules/ChatModule.html",[2,1.689,3,0.155,4,0.155,5,0.13,11,0.019,16,0.609,17,0.685,20,0.155,21,0.347,26,0.011,27,0.014,28,0.011,29,1.318,31,1.701,32,1.701,33,1.888,34,1.888,35,1.701,36,2.641,37,2.641,43,4.714,48,2.643,51,2.402,52,1.791,53,1.791,55,2.535,58,2.233,59,1.617,61,2.107,93,0.853,168,1.529,289,2.531,290,2.373,291,2.948,292,4.44,313,2.38,316,3.904,317,3.914,338,3.914,339,4.557,340,3.914,341,3.914,342,4.557,343,4.557,344,3.32,345,4.557,346,2.922,347,4.557,348,3.491]],["title/injectables/ChatService.html",[70,0.878,316,1.906]],["body/injectables/ChatService.html",[3,0.069,4,0.069,5,0.058,7,0.167,8,0.853,11,0.019,12,1.281,14,1.692,15,1.132,16,0.464,17,0.304,20,0.069,21,0.154,23,2.095,24,1.558,26,0.008,27,0.008,28,0.005,59,0.717,70,0.774,71,0.838,80,2.2,92,1.635,93,0.803,94,0.621,95,1.345,148,1.41,149,2.731,157,2.419,165,2.338,166,2.115,168,1.44,172,2.943,228,2.214,229,2.969,241,2.984,247,2.84,260,1.123,294,2.77,298,2.77,301,3.036,303,4.353,306,3.943,308,4.598,309,4.598,313,2.592,316,1.679,321,4.598,323,2.77,344,3.205,349,1.736,350,3.455,351,3.225,352,4.591,353,3.455,354,3.225,355,2.022,356,3.946,357,4.023,358,4.023,359,2.921,360,2.022,361,2.246,362,3.225,363,5.494,364,2.022,365,2.964,366,4.456,367,2.022,368,3.516,369,3.225,370,2.022,371,3.225,372,4.591,373,2.612,374,3.225,375,2.022,376,2.022,377,2.022,378,3.943,379,3.225,380,4.094,381,2.022,382,1.99,383,1.296,384,1.408,385,2.022,386,1.548,387,2.022,388,1.408,389,2.022,390,2.022,391,3.842,392,3.842,393,4.094,394,1.548,395,1.502,396,3.225,397,2.022,398,4.094,399,4.023,400,2.604,401,2.022,402,2.022,403,4.094,404,3.081,405,3.225,406,1.548,407,3.081,408,2.022,409,2.022,410,2.022,411,3.081,412,4.023,413,2.022,414,2.022,415,2.022,416,2.022,417,2.022,418,2.022,419,3.225,420,2.022,421,3.842,422,3.081,423,2.77,424,1.918,425,2.022,426,3.081,427,2.022,428,2.022,429,2.022,430,2.022,431,2.022,432,2.022,433,2.022,434,2.022,435,2.022,436,3.225,437,4.023,438,4.023,439,3.455,440,2.022,441,1.736,442,0.838,443,2.022,444,2.022,445,2.022,446,2.022]],["title/classes/CreatePinDto.html",[21,0.279,447,2.803]],["body/classes/CreatePinDto.html",[3,0.155,4,0.155,5,0.13,7,0.377,11,0.019,12,1.679,15,1.136,20,0.155,21,0.347,23,4.035,26,0.011,27,0.014,28,0.011,94,0.814,283,2.15,447,4.435,448,2.706,449,6.362,450,3.907,451,1.687,452,3.317,453,3.122,454,3.317,455,5.471,456,3.789,457,3.122,458,3.789,459,4.083,460,4.549,461,2.155,462,4.549,463,4.549,464,4.549,465,4.549,466,4.549,467,4.549,468,4.549,469,4.549]],["title/classes/EditBoardDto.html",[21,0.279,470,2.803]],["body/classes/EditBoardDto.html",[3,0.163,4,0.163,5,0.137,7,0.396,11,0.019,12,1.661,15,1.134,20,0.163,21,0.364,23,4.02,26,0.012,27,0.015,28,0.012,93,0.872,94,0.806,228,2.7,287,1.899,442,2.475,448,2.844,451,1.741,470,4.576,471,5.631,472,4.106,473,4.992,474,4.539,475,4.178,476,4.539,477,4.781,478,4.781,479,4.781,480,4.781,481,4.781,482,4.781,483,4.781]],["title/classes/EditCollaboratoresPermissionsDto.html",[21,0.279,484,2.803]],["body/classes/EditCollaboratoresPermissionsDto.html",[3,0.16,4,0.16,5,0.134,7,0.39,11,0.019,12,1.655,15,0.889,20,0.16,21,0.359,23,4.015,26,0.012,27,0.015,28,0.012,94,0.803,442,3.119,448,2.8,451,1.724,471,5.614,473,5.614,475,4.148,484,4.532,485,4.043,486,5.558,487,5.558,488,5.558,489,5.558,490,5.558,491,5.558,492,4.707,493,4.707,494,4.707,495,4.707,496,4.707,497,4.707,498,4.707]],["title/injectables/Email.html",[70,0.878,96,1.299]],["body/injectables/Email.html",[3,0.106,4,0.106,5,0.089,7,0.257,8,1.183,11,0.019,12,1.022,14,0.822,15,0.861,16,0.37,17,0.467,20,0.106,21,0.237,24,1.304,26,0.008,27,0.011,28,0.008,29,0.643,52,2.385,70,1.073,71,1.288,73,2.382,80,1.683,82,4.536,92,0.906,93,0.701,94,0.763,95,0.746,96,2.698,106,2.807,130,2.484,148,2.291,166,0.999,168,1.073,197,2.671,204,4.499,228,1.288,238,2.671,241,1.85,247,2.505,269,2.166,270,2.166,285,1.603,301,1.36,313,2.487,380,2.382,394,4.841,406,2.382,424,1.85,455,4.499,499,4.499,500,2.671,501,4.473,502,3.11,503,4.473,504,4.038,505,3.11,506,6.32,507,4.473,508,3.842,509,3.11,510,2.868,511,3.11,512,3.11,513,2.671,514,3.11,515,3.11,516,3.11,517,3.11,518,2.868,519,2.671,520,3.11,521,3.11,522,3.11,523,3.11,524,3.11,525,6.664,526,7.047,527,6.512,528,5.238,529,5.729,530,6.32,531,6.069,532,5.729,533,3.11,534,3.11,535,4.473,536,5.238,537,2.671,538,3.11,539,3.672,540,5.238,541,3.11,542,3.11,543,3.11,544,4.473,545,3.11,546,3.11,547,3.11,548,3.11,549,4.473,550,3.11,551,3.11,552,3.11,553,3.11,554,3.11]],["title/injectables/GoogleStrategy.html",[70,0.878,211,2.346]],["body/injectables/GoogleStrategy.html",[3,0.159,4,0.159,5,0.133,7,0.385,8,1.553,11,0.019,12,1.341,14,1.23,15,1.07,16,0.533,17,0.699,20,0.159,21,0.355,26,0.012,27,0.015,28,0.012,70,1.409,71,1.928,80,2.068,92,1.356,93,0.786,94,0.515,95,1.116,96,2.084,137,2.28,148,2.815,155,2.433,168,1.409,211,3.766,244,3.059,256,1.737,257,1.829,366,4.091,555,3.996,556,5.529,557,4.653,558,4.653,559,6.437,560,6.972,561,5.529,562,6.761,563,4.653,564,6.437,565,3.996,566,3.996,567,3.564,568,3.996,569,2.035,570,3.996,571,3.996,572,3.996,573,4.653,574,4.653,575,4.653,576,4.653,577,4.653,578,4.653,579,4.653,580,4.653,581,4.653,582,4.653,583,4.653,584,4.653,585,4.653,586,4.653,587,4.653]],["title/classes/HttpExceptionFilter.html",[21,0.279,588,2.346]],["body/classes/HttpExceptionFilter.html",[3,0.164,4,0.164,5,0.137,7,0.398,8,1.586,11,0.019,12,1.098,14,1.272,16,0.398,17,0.723,20,0.164,21,0.366,26,0.012,27,0.015,28,0.012,92,1.401,93,0.644,94,0.533,95,1.154,129,2.671,131,2.861,132,4.07,155,2.917,166,1.545,203,2.861,313,1.795,441,4.13,448,2.861,513,5.613,588,3.844,589,5.151,590,4.13,591,5.151,592,6.535,593,6.842,594,5.997,595,6.842,596,4.809,597,4.809,598,4.809,599,4.809,600,4.809,601,4.13,602,4.809,603,4.809,604,4.189,605,5.997,606,5.997,607,4.809,608,4.809,609,4.809,610,3.349,611,4.809,612,3.683,613,4.809,614,4.809,615,4.809,616,4.13,617,4.809,618,4.809]],["title/controllers/ImagesController.html",[0,1.176,619,2.549]],["body/controllers/ImagesController.html",[0,1.685,2,1.139,3,0.133,4,0.133,5,0.112,7,0.323,8,1.386,10,2.569,11,0.019,12,1.197,14,1.386,15,0.889,16,0.523,17,0.587,20,0.133,21,0.298,22,1.915,24,1.843,26,0.01,27,0.013,28,0.01,80,2.181,92,1.528,93,0.702,94,0.433,95,1.258,100,3.327,113,4.121,128,2.505,129,3.286,130,2.17,131,2.325,132,2.325,133,2.325,134,2.17,135,1.709,155,1.619,156,2.993,157,2.325,203,2.325,237,2.505,247,1.709,365,2.92,510,4.352,601,5.081,610,2.721,619,3.651,620,2.993,621,5.916,622,5.242,623,3.907,624,5.242,625,3.907,626,3.907,627,3.907,628,3.907,629,3.907,630,5.242,631,3.907,632,3.907,633,2.993,634,3.907,635,3.907,636,3.907,637,3.356,638,3.907,639,3.356,640,3.356,641,3.286,642,3.356,643,3.356,644,3.907,645,3.907,646,3.907,647,3.907,648,3.907,649,3.907,650,3.907,651,3.907,652,3.907,653,3.907,654,5.916,655,5.916,656,5.916,657,5.916,658,5.916,659,3.907,660,3.356,661,3.907,662,3.356,663,3.907,664,3.356,665,3.356,666,4.503,667,3.907,668,3.907,669,3.907,670,3.907,671,3.907]],["title/modules/ImagesModule.html",[29,0.756,44,1.906]],["body/modules/ImagesModule.html",[2,1.792,3,0.171,4,0.171,5,0.143,11,0.019,16,0.574,17,0.753,20,0.171,21,0.382,26,0.012,27,0.015,28,0.012,29,1.375,31,1.869,32,1.869,33,2.074,34,2.074,35,1.869,36,2.756,37,2.756,44,3.892,48,2.706,51,2.547,52,1.968,53,1.968,55,2.689,61,2.315,619,4.634,641,4.215,642,4.3,672,4.3,673,5.006,674,4.3,675,4.3,676,5.006,677,5.006]],["title/injectables/ImagesService.html",[70,0.878,641,2.033]],["body/injectables/ImagesService.html",[3,0.138,4,0.138,5,0.115,7,0.335,8,1.418,11,0.019,12,1.464,14,1.418,16,0.444,17,0.608,20,0.138,21,0.308,24,1.563,26,0.01,27,0.013,28,0.01,70,1.287,71,1.675,80,2.248,92,1.563,93,0.805,95,1.287,108,2.405,113,3.736,130,2.246,135,2.346,148,2.632,155,2.84,157,1.589,165,2.346,166,2.06,203,2.405,237,3.438,244,2.106,365,2.655,451,1.563,510,3.438,519,4.607,604,2.592,641,2.979,660,3.473,662,5.169,664,5.505,665,3.473,678,3.097,679,6.019,680,6.019,681,5.364,682,5.364,683,5.364,684,5.364,685,4.043,686,5.364,687,6.67,688,4.043,689,5.364,690,6.41,691,4.108,692,3.473,693,3.736,694,3.473,695,3.097,696,3.473,697,4.043,698,3.473,699,4.043,700,4.043,701,4.043,702,3.473,703,4.043,704,4.043,705,4.043,706,4.043,707,4.043,708,4.043,709,3.473,710,4.043,711,4.043,712,4.043,713,5.364,714,4.043,715,4.043,716,4.043,717,4.043]],["title/injectables/JwtStrategy.html",[70,0.878,212,2.346]],["body/injectables/JwtStrategy.html",[3,0.156,4,0.156,5,0.131,7,0.379,8,1.539,11,0.019,12,1.329,14,1.212,16,0.557,17,0.689,20,0.156,21,0.349,22,2.246,24,1.863,26,0.011,27,0.014,28,0.011,70,1.396,71,1.899,80,2.054,92,1.695,93,0.779,94,0.645,95,1.396,131,2.727,132,2.727,137,2.246,140,3.803,144,3.939,145,3.51,148,2.004,174,4.449,212,3.73,228,2.41,229,3.854,232,4.997,235,3.936,241,2.727,247,2.544,266,3.51,269,3.192,270,3.192,271,3.51,556,5.49,561,5.775,565,3.936,566,3.936,567,3.51,569,2.004,570,3.936,571,3.936,718,3.936,719,4.583,720,4.583,721,5.818,722,6.724,723,4.583,724,4.583,725,2.938,726,4.583,727,4.583,728,4.583,729,3.51,730,4.583]],["title/injectables/LoggingInterceptor.html",[70,0.878,731,2.549]],["body/injectables/LoggingInterceptor.html",[3,0.167,4,0.167,5,0.14,7,0.405,8,1.604,11,0.019,12,1.118,14,1.295,16,0.545,17,0.736,20,0.167,21,0.373,24,1.427,26,0.012,27,0.015,28,0.012,70,1.455,71,2.028,92,1.427,93,0.655,94,0.542,95,1.174,100,2.399,155,2.852,591,4.205,612,4.645,731,4.224,732,4.205,733,6.064,734,6.064,735,6.885,736,6.885,737,6.885,738,4.896,739,4.896,740,6.588,741,3.75,742,6.064,743,4.205,744,6.064,745,4.896,746,4.896,747,5.208,748,4.896,749,4.896,750,3.368,751,4.896,752,4.896,753,4.896,754,4.896,755,4.896,756,4.896]],["title/interfaces/LoginDto.html",[117,2.549,757,0.648]],["body/interfaces/LoginDto.html",[3,0.191,4,0.191,5,0.16,7,0.463,11,0.018,15,1.118,20,0.191,26,0.014,27,0.016,28,0.014,94,0.728,96,2.555,106,3.529,117,4.576,451,1.915,757,0.99,758,1.984,759,4.803]],["title/interfaces/Payload.html",[140,2.177,757,0.648]],["body/interfaces/Payload.html",[3,0.172,4,0.172,5,0.144,7,0.419,11,0.019,15,1.153,20,0.172,26,0.013,27,0.015,28,0.013,94,0.805,95,1.807,96,2.471,140,3.681,172,4.464,256,2.599,267,5.981,451,1.803,461,2.148,757,0.896,758,1.795,760,4.345,761,5.334,762,6.964]],["title/modules/PinsModule.html",[29,0.756,45,1.906]],["body/modules/PinsModule.html",[2,1.62,3,0.146,4,0.146,5,0.122,11,0.019,16,0.615,17,0.642,20,0.146,21,0.325,26,0.011,27,0.014,28,0.011,29,1.278,31,1.594,32,1.594,33,1.769,34,1.769,35,1.594,36,2.561,37,2.561,42,3.411,44,3.625,45,3.889,48,2.598,51,2.303,52,1.678,53,1.678,55,2.431,58,2.093,59,1.515,61,1.975,62,2.737,63,2.974,93,0.876,168,1.483,283,2.087,284,2.54,285,1.891,286,2.371,287,1.801,288,2.54,289,2.371,290,2.224,291,3.028,763,3.667,764,4.27,765,3.667,766,3.667,767,5.69,768,4.27,769,5.309,770,4.27,771,4.27,772,2.737,773,3.667]],["title/controllers/RecommendationController.html",[0,1.176,774,2.549]],["body/controllers/RecommendationController.html",[0,0.999,2,0.563,3,0.066,4,0.066,5,0.055,7,0.16,8,0.822,10,3.231,11,0.019,12,1.505,14,1.743,15,1.073,16,0.37,17,0.29,20,0.066,21,0.147,22,0.947,24,1.921,26,0.005,27,0.008,28,0.005,80,2.393,92,1.921,93,0.882,94,0.635,95,1.581,100,3.535,108,1.149,128,1.239,129,3.284,130,1.073,133,1.149,134,1.073,135,2.914,136,1.149,137,0.947,157,2.591,165,2.883,166,2.118,184,3.922,247,0.845,301,2.942,459,2.867,461,2.264,539,3.79,588,1.239,633,1.48,774,2.166,775,1.659,776,3.902,777,3.11,778,3.11,779,3.902,780,3.902,781,3.11,782,3.11,783,3.902,784,3.902,785,3.11,786,3.902,787,3.11,788,3.902,789,3.902,790,3.11,791,1.932,792,5.104,793,1.932,794,1.932,795,1.932,796,1.932,797,1.932,798,1.932,799,3.672,800,1.932,801,1.932,802,1.932,803,4.92,804,1.932,805,1.932,806,1.932,807,3.701,808,3.701,809,1.932,810,1.932,811,1.932,812,1.932,813,1.932,814,1.932,815,1.932,816,1.932,817,1.932,818,1.932,819,1.932,820,1.932,821,1.932,822,1.932,823,1.932,824,1.932,825,1.932,826,1.932,827,1.932,828,1.932,829,1.932,830,1.932,831,1.932,832,1.932,833,1.932,834,1.932,835,1.932,836,1.932,837,1.932,838,1.932,839,1.932,840,1.932,841,1.932,842,1.659,843,1.48,844,1.932,845,1.659,846,2.718,847,1.659,848,1.932,849,1.932,850,1.932,851,6.203,852,4.402,853,5.238,854,1.932,855,1.932,856,3.115,857,3.115,858,1.932,859,1.932,860,1.932,861,3.11,862,3.122,863,1.932,864,1.932,865,1.932,866,1.932,867,4.473,868,1.932,869,1.932,870,3.11,871,1.932,872,1.932,873,1.932,874,1.932,875,1.932,876,1.932,877,1.932,878,1.932,879,1.932,880,1.932,881,1.932,882,1.932,883,1.932,884,1.932,885,1.932,886,1.932,887,2.502,888,1.932,889,1.932,890,1.932,891,1.932,892,1.932,893,1.932,894,1.932,895,1.932,896,1.932]],["title/modules/RecommendationModule.html",[29,0.756,46,2.346]],["body/modules/RecommendationModule.html",[2,1.65,3,0.15,4,0.15,5,0.125,11,0.019,16,0.617,17,0.66,20,0.15,21,0.335,26,0.011,27,0.014,28,0.011,29,1.295,31,1.64,32,1.64,33,1.82,34,1.82,35,1.64,36,2.596,37,2.596,42,2.153,45,2.288,46,4.682,48,2.618,51,2.346,52,1.727,53,1.727,55,2.476,57,3.06,58,2.153,59,1.559,61,2.032,62,2.816,93,0.886,168,1.503,283,2.115,284,2.614,285,1.917,286,2.44,287,1.826,288,2.614,289,2.44,290,2.288,291,3.061,772,2.816,773,3.773,774,4.364,846,5.195,847,3.773,897,3.773,898,4.393,899,3.773,900,3.773,901,4.393,902,4.393]],["title/interfaces/RegisterDto.html",[125,2.549,757,0.648]],["body/interfaces/RegisterDto.html",[3,0.154,4,0.154,5,0.129,7,0.374,11,0.019,15,1.17,20,0.154,26,0.011,27,0.014,28,0.011,94,0.829,95,1.812,96,2.373,106,3.277,125,4.014,176,3.483,255,5.743,256,2.496,257,2.628,259,5.743,442,2.63,451,1.679,757,0.799,758,1.602,761,5.122,903,3.878,904,5.743,905,4.657,906,5.743,907,4.657]],["title/controllers/SearchController.html",[0,1.176,908,2.549]],["body/controllers/SearchController.html",[0,0.947,2,0.859,3,0.1,4,0.1,5,0.084,7,0.244,8,1.138,10,3.041,11,0.019,12,1.417,14,1.641,15,1.048,16,0.421,17,0.443,20,0.1,21,0.225,22,1.445,24,2.033,26,0.007,27,0.011,28,0.007,80,2.338,92,1.808,93,0.998,94,0.619,95,1.488,100,3.418,129,3.558,133,1.754,134,1.637,135,2.802,136,1.754,137,1.445,157,2.675,166,1.994,184,3.691,301,2.713,442,2.89,461,2.39,807,3.998,808,3.998,852,4.139,856,3.892,857,3.892,862,2.713,887,3.258,908,2.997,909,2.532,910,2.948,911,2.053,912,4.365,913,4.365,914,4.365,915,4.365,916,4.365,917,4.365,918,2.948,919,5.149,920,2.948,921,2.948,922,2.948,923,2.948,924,2.948,925,2.948,926,2.948,927,2.948,928,2.948,929,2.948,930,2.948,931,2.948,932,2.948,933,2.948,934,2.948,935,2.948,936,2.948,937,3.023,938,2.532,939,2.948,940,2.948,941,5.942,942,5.587,943,5.587,944,2.948,945,2.948,946,2.948,947,2.948,948,5.082,949,2.948,950,2.948,951,2.948,952,2.948,953,2.948,954,2.948,955,2.948]],["title/modules/SearchModule.html",[29,0.756,47,2.346]],["body/modules/SearchModule.html",[2,1.674,3,0.153,4,0.153,5,0.128,11,0.019,16,0.622,17,0.675,20,0.153,21,0.342,26,0.011,27,0.014,28,0.011,29,1.309,31,1.676,32,1.676,33,1.86,34,1.86,35,1.676,36,2.623,37,1.86,42,2.201,44,2.339,45,2.339,47,4.655,48,2.633,50,2.339,51,2.379,52,1.765,53,1.765,55,2.511,57,3.127,58,2.201,59,1.593,61,2.076,62,2.879,63,3.127,65,3.857,93,0.847,168,1.519,283,2.137,284,2.671,285,1.937,286,2.494,289,2.494,290,2.339,291,2.928,908,4.41,911,4,937,4.197,938,3.857,956,3.857,957,4.49,958,3.857,959,4.49,960,4.49,961,3.439]],["title/injectables/SearchService.html",[70,0.878,937,2.177]],["body/injectables/SearchService.html",[3,0.063,4,0.063,5,0.053,7,0.154,8,0.796,11,0.019,12,1.332,14,1.747,15,0.982,16,0.467,17,0.279,20,0.063,21,0.141,23,1.978,24,1.746,26,0.016,27,0.007,28,0.005,59,0.658,70,0.722,71,0.769,80,2.25,92,1.699,93,1.004,94,0.421,95,1.399,113,1.292,135,1.316,148,1.316,149,2.599,155,0.769,157,2.622,165,1.316,166,1.22,168,1.524,176,0.966,228,2.539,229,3.134,241,3.357,244,0.966,247,3.011,256,0.693,257,0.729,260,1.031,283,1.621,285,1.469,287,1.107,301,2.369,356,4.277,359,2.821,361,2.645,365,1.989,366,4.173,368,4.589,373,2.275,380,2.908,382,1.068,383,1.19,384,1.292,386,1.421,388,1.292,391,4.321,392,4.321,393,4.321,395,2.022,398,1.421,404,3.346,423,1.594,424,4.005,426,1.421,439,1.594,453,1.475,456,2.599,458,2.599,461,2.122,504,1.791,518,2.434,807,4.043,808,4.062,862,1.91,887,2.434,911,3.93,912,2.585,913,2.585,914,2.585,915,2.585,916,2.585,917,2.585,919,2.645,937,1.791,961,3.678,962,1.594,963,3.01,964,1.856,965,2.908,966,1.856,967,3.01,968,3.01,969,1.856,970,1.856,971,3.472,972,1.856,973,6.355,974,3.01,975,1.856,976,3.01,977,3.01,978,1.856,979,3.01,980,1.856,981,3.01,982,1.856,983,3.01,984,1.856,985,3.01,986,1.856,987,1.856,988,1.856,989,1.421,990,1.856,991,1.421,992,1.856,993,1.856,994,3.797,995,1.856,996,3.01,997,1.594,998,3.01,999,3.797,1000,3.01,1001,3.01,1002,1.856,1003,3.01,1004,1.856,1005,1.856,1006,1.856,1007,1.856,1008,2.585,1009,1.421,1010,3.01,1011,1.856,1012,1.856,1013,1.856,1014,3.01,1015,4.369,1016,1.856,1017,2.305,1018,1.856,1019,1.856,1020,1.856,1021,1.856,1022,3.261,1023,3.261,1024,1.672,1025,1.421,1026,3.01,1027,1.856,1028,1.856,1029,1.856,1030,1.856,1031,1.856,1032,1.594,1033,3.797,1034,3.01,1035,3.043,1036,2.096,1037,1.672,1038,1.856]],["title/classes/SharedGateway.html",[21,0.279,346,2.346]],["body/classes/SharedGateway.html",[3,0.067,4,0.067,5,0.056,7,0.163,8,0.835,10,3.113,11,0.019,12,1.512,14,1.707,16,0.459,20,0.067,21,0.15,23,1.645,24,0.574,26,0.005,27,0.008,28,0.005,59,0.699,80,2.349,92,1.906,93,0.875,94,0.733,95,1.569,148,1.381,149,2.352,155,2.299,156,5.612,157,2.716,162,2.712,166,0.633,168,1.188,174,2.534,176,1.645,177,1.692,198,1.508,256,1.179,257,1.241,258,1.692,266,3.028,285,1.21,301,1.729,303,3.815,308,3.792,313,1.476,316,2.752,346,2.024,350,2.712,353,2.712,356,3.558,361,2.753,363,5.111,372,4.955,373,1.026,378,4.955,382,0.699,383,1.263,384,1.372,388,1.372,400,0.816,424,3.892,448,1.172,451,0.92,504,1.172,510,1.263,616,3.395,725,1.263,747,1.692,799,1.263,965,3.028,989,1.508,991,1.508,1017,1.508,1032,3.395,1039,1.508,1040,3.158,1041,1.754,1042,3.158,1043,3.158,1044,3.158,1045,3.158,1046,3.158,1047,1.754,1048,3.158,1049,1.969,1050,3.158,1051,3.953,1052,1.969,1053,7.47,1054,1.969,1055,1.969,1056,3.158,1057,3.158,1058,1.969,1059,3.158,1060,1.969,1061,3.158,1062,3.158,1063,3.158,1064,1.969,1065,3.158,1066,1.969,1067,1.969,1068,3.158,1069,3.158,1070,1.969,1071,1.969,1072,1.969,1073,1.969,1074,3.158,1075,3.158,1076,1.969,1077,3.158,1078,3.158,1079,1.969,1080,3.158,1081,3.158,1082,1.969,1083,3.158,1084,3.158,1085,1.969,1086,3.158,1087,3.158,1088,1.969,1089,3.158,1090,3.158,1091,1.969,1092,1.969,1093,3.158,1094,1.692,1095,1.692,1096,1.692,1097,1.692,1098,1.969,1099,1.969,1100,1.969,1101,3.953,1102,3.953,1103,3.953,1104,1.508,1105,1.969,1106,1.969,1107,1.969,1108,1.969,1109,1.969,1110,1.969,1111,1.969,1112,5.769,1113,4.523,1114,4.523,1115,4.523,1116,1.969,1117,4.523,1118,4.523,1119,4.523,1120,4.523,1121,4.523,1122,4.523,1123,4.523,1124,4.523,1125,4.523,1126,4.523,1127,4.95,1128,1.969,1129,1.969,1130,1.969,1131,1.969,1132,1.969,1133,1.969,1134,4.523,1135,1.969,1136,1.969,1137,1.969,1138,1.969,1139,1.969,1140,3.158,1141,1.026,1142,1.969,1143,1.692,1144,5.284,1145,1.969,1146,1.969,1147,1.263,1148,1.969,1149,1.969,1150,1.969,1151,1.263,1152,1.969,1153,1.969,1154,1.969,1155,1.263,1156,1.969,1157,1.969,1158,1.969,1159,1.969,1160,1.263,1161,1.969,1162,1.969,1163,1.969,1164,1.263,1165,1.969,1166,1.969,1167,1.969,1168,1.172]],["title/modules/SharedModule.html",[29,0.756,48,1.366]],["body/modules/SharedModule.html",[3,0.131,4,0.131,5,0.11,11,0.019,16,0.618,17,0.58,20,0.131,21,0.294,26,0.01,27,0.013,28,0.01,29,1.215,31,1.44,32,1.44,33,1.598,34,1.598,35,1.44,36,2.435,37,2.435,48,2.776,51,2.153,52,1.516,53,1.516,55,1.687,58,1.891,59,1.369,93,0.905,96,2.596,147,2.955,168,1.41,283,1.984,284,2.295,285,1.799,286,2.143,287,1.713,288,2.295,289,2.143,290,2.009,291,3.128,313,2.194,316,3.523,344,3.062,346,3.332,348,2.955,359,3.81,394,2.955,588,3.332,731,3.62,772,4.689,845,3.313,1096,3.313,1169,3.313,1170,3.313,1171,3.313,1172,3.858,1173,5.198,1174,5.198,1175,3.313,1176,3.858,1177,3.858,1178,3.858,1179,3.858,1180,3.858,1181,3.313,1182,5.198,1183,5.198]],["title/controllers/TopicController.html",[0,1.176,1184,2.549]],["body/controllers/TopicController.html",[0,1.219,2,0.726,3,0.085,4,0.085,5,0.071,7,0.206,8,1.003,10,3.253,11,0.019,12,1.516,14,1.755,15,1.084,16,0.425,17,0.374,20,0.085,21,0.19,22,1.221,24,2.055,26,0.006,27,0.009,28,0.006,80,2.399,92,1.934,93,0.929,94,0.646,95,1.592,100,3.456,108,1.482,128,1.597,129,3.073,130,1.383,133,1.482,134,1.383,135,2.248,136,1.482,137,1.221,157,2.609,165,1.659,166,2.057,184,3.808,228,2.129,237,1.597,247,1.089,260,1.383,285,1.161,287,2.055,301,1.089,313,0.93,336,2.139,373,1.297,395,2.389,452,2.677,453,2.253,454,2.677,459,2.947,461,2.163,518,1.597,539,2.947,633,4.237,641,1.383,799,2.947,807,2.855,808,2.855,843,1.908,852,1.735,856,1.735,857,1.735,862,2.248,971,3.737,1009,1.908,1184,2.643,1185,2.139,1186,3.794,1187,4.597,1188,3.259,1189,3.948,1190,4.597,1191,2.643,1192,3.259,1193,4.597,1194,3.794,1195,3.259,1196,3.259,1197,2.49,1198,3.794,1199,2.49,1200,5.781,1201,2.49,1202,2.49,1203,2.49,1204,2.49,1205,2.139,1206,5.829,1207,2.49,1208,2.139,1209,2.49,1210,2.49,1211,2.49,1212,4.597,1213,3.794,1214,2.49,1215,2.49,1216,2.139,1217,2.49,1218,2.49,1219,2.139,1220,2.49,1221,2.49,1222,5.206,1223,2.49,1224,2.49,1225,2.49,1226,2.49,1227,2.49,1228,2.49,1229,2.49,1230,2.49,1231,2.49,1232,2.139,1233,2.49,1234,2.49,1235,2.735,1236,2.139,1237,2.49,1238,2.49,1239,2.49,1240,4.597,1241,2.49,1242,2.49,1243,3.794,1244,2.49,1245,2.49,1246,2.49,1247,2.49,1248,2.49,1249,2.49,1250,2.49,1251,2.49,1252,2.49,1253,2.49,1254,2.49,1255,2.49,1256,2.49,1257,2.49,1258,2.49,1259,2.49,1260,3.794,1261,2.49,1262,2.49,1263,2.49,1264,2.139,1265,2.49,1266,2.49,1267,4.597,1268,3.259,1269,2.139,1270,2.49,1271,2.49,1272,2.139,1273,2.139,1274,2.49,1275,2.49,1276,2.139,1277,2.49,1278,2.49]],["title/modules/TopicModule.html",[29,0.756,49,2.346]],["body/modules/TopicModule.html",[2,1.668,3,0.152,4,0.152,5,0.128,11,0.019,16,0.619,17,0.671,20,0.152,21,0.34,26,0.011,27,0.014,28,0.011,29,1.305,31,1.667,32,1.667,33,1.85,34,1.85,35,1.667,36,2.616,37,1.85,42,2.188,44,2.326,45,2.326,48,2.629,49,4.734,50,3.669,51,2.371,52,1.755,53,1.755,55,2.502,57,3.11,58,2.188,59,1.585,61,2.065,62,2.863,63,3.11,93,0.845,168,1.515,217,3.835,285,1.932,286,2.48,287,1.84,288,2.657,289,2.48,290,2.326,291,2.92,1184,4.398,1235,4.191,1236,3.835,1279,3.835,1280,4.465,1281,3.835,1282,4.465,1283,4.465]],["title/injectables/TopicService.html",[70,0.878,1235,2.177]],["body/injectables/TopicService.html",[3,0.057,4,0.057,5,0.048,7,0.139,8,0.733,11,0.019,12,1.386,14,1.774,15,1.046,16,0.449,17,0.252,20,0.057,21,0.128,23,1.845,24,1.902,26,0.004,27,0.007,28,0.004,59,0.595,70,0.665,71,0.695,80,2.291,92,1.769,93,0.936,94,0.392,95,1.456,131,0.998,132,2.447,135,1.549,138,2.881,139,1.285,148,1.212,149,2.709,155,2.031,157,2.591,165,2.822,166,2.097,168,1.581,170,3.042,171,2.381,172,1.777,191,1.285,192,3.15,228,2.8,229,3.012,241,3.227,247,2.909,260,0.932,269,2.864,270,2.864,272,1.441,285,1.773,287,2.143,301,2.534,356,3.714,359,2.702,361,2.467,365,2.996,366,4.035,368,3.15,373,2.142,382,1.841,383,1.076,386,1.285,388,1.169,391,3.15,392,3.15,393,3.755,395,1.322,398,3.15,404,1.285,424,3.534,426,2.123,442,1.148,452,2.553,453,2.658,454,2.553,459,2.636,461,2.138,510,1.076,518,1.076,537,2.381,539,2.27,666,4.211,729,3.755,799,2.636,807,2.881,808,2.881,862,2.269,965,2.713,989,1.285,991,1.285,997,1.441,1008,1.441,1009,1.285,1017,2.123,1022,1.441,1023,1.441,1024,2.881,1188,2.381,1189,3.042,1191,1.931,1192,2.381,1195,2.381,1196,2.381,1200,3.532,1208,1.441,1222,5.805,1235,1.649,1272,1.441,1284,1.441,1285,2.772,1286,2.772,1287,2.772,1288,2.772,1289,2.772,1290,1.678,1291,1.678,1292,2.772,1293,2.772,1294,1.678,1295,2.772,1296,1.678,1297,1.678,1298,4.903,1299,2.772,1300,2.772,1301,1.678,1302,1.678,1303,2.772,1304,1.678,1305,2.713,1306,2.772,1307,1.678,1308,2.772,1309,1.678,1310,2.772,1311,1.678,1312,2.772,1313,1.678,1314,2.772,1315,1.678,1316,2.772,1317,1.678,1318,1.678,1319,1.678,1320,1.678,1321,2.772,1322,2.772,1323,1.678,1324,2.772,1325,2.772,1326,2.772,1327,2.772,1328,2.772,1329,1.678,1330,2.772,1331,2.772,1332,1.678,1333,3.542,1334,1.678,1335,1.678,1336,1.678,1337,1.678,1338,1.678,1339,1.678,1340,1.678,1341,1.678,1342,1.678,1343,2.772,1344,2.772,1345,1.678,1346,1.678,1347,1.678,1348,1.678,1349,2.772,1350,2.772,1351,2.772,1352,2.772,1353,3.542,1354,1.678,1355,1.678,1356,1.441,1357,1.678,1358,2.772,1359,1.678,1360,3.542,1361,2.772,1362,1.678,1363,1.678,1364,1.678,1365,1.441,1366,2.381,1367,1.678,1368,1.678,1369,1.678,1370,1.678]],["title/interfaces/UpdateDto.html",[757,0.648,1371,2.549]],["body/interfaces/UpdateDto.html",[3,0.148,4,0.148,5,0.124,7,0.359,11,0.019,15,1.17,20,0.148,26,0.011,27,0.014,28,0.011,94,0.829,95,1.851,96,2.338,106,3.228,176,3.431,256,2.459,257,2.589,400,2.58,451,1.637,504,3.919,757,0.768,758,1.539,761,5.046,904,5.658,905,4.588,906,5.658,907,4.588,1371,3.912,1372,3.323,1373,3.726,1374,5.046,1375,5.046]],["title/interfaces/UpdateSettingsDto.html",[757,0.648,1376,2.549]],["body/interfaces/UpdateSettingsDto.html",[3,0.146,4,0.146,5,0.122,7,0.353,11,0.019,20,0.146,26,0.011,27,0.014,28,0.011,94,0.831,95,1.853,168,1.024,244,3.41,442,3.228,451,1.62,757,0.756,758,1.515,1372,3.271,1376,3.872,1377,3.667,1378,5.015,1379,5.015,1380,5.015,1381,5.015,1382,6.548,1383,5.015,1384,5.015,1385,5.015,1386,4.561,1387,5.015,1388,5.015,1389,5.015,1390,5.015]],["title/controllers/UserController.html",[0,1.176,1391,2.549]],["body/controllers/UserController.html",[0,0.924,2,0.511,3,0.06,4,0.06,5,0.05,7,0.302,8,0.76,10,3.29,11,0.019,12,1.533,14,1.775,15,0.924,16,0.415,17,0.264,20,0.06,21,0.134,22,0.86,24,1.878,26,0.004,27,0.007,28,0.004,53,1.13,80,2.409,84,3.629,92,1.956,93,0.898,94,0.73,95,1.61,96,2.028,100,3.57,106,1.409,108,2.173,121,1.507,129,3.53,130,0.974,131,1.044,132,3.147,133,1.044,134,0.974,136,1.044,137,0.86,138,2.029,146,1.507,147,1.344,149,1.044,155,2.593,157,2.767,165,2.572,166,1.89,168,1.646,174,1.124,181,1.507,184,3.921,191,1.344,192,3.571,201,1.507,203,2.173,206,1.507,207,2.469,237,1.124,247,1.848,260,1.597,373,0.914,406,1.344,442,1.513,461,2.262,518,1.124,539,2.708,709,1.507,729,2.202,807,3.622,808,3.622,842,1.507,843,1.344,852,2.943,856,2.943,857,2.943,862,1.257,971,4.18,1205,1.507,1216,1.507,1219,1.507,1232,1.507,1264,1.507,1268,2.469,1269,1.507,1273,1.507,1276,1.507,1356,1.507,1371,2.943,1376,2.943,1386,1.222,1391,2.002,1392,1.507,1393,3.653,1394,3.653,1395,2.875,1396,3.653,1397,3.653,1398,2.875,1399,2.875,1400,2.875,1401,3.653,1402,3.653,1403,2.875,1404,2.875,1405,3.653,1406,2.875,1407,3.653,1408,2.875,1409,3.653,1410,3.653,1411,1.754,1412,5.009,1413,1.754,1414,1.754,1415,1.754,1416,2.875,1417,1.754,1418,1.754,1419,1.754,1420,1.754,1421,1.754,1422,1.754,1423,1.754,1424,1.754,1425,1.754,1426,1.754,1427,1.754,1428,1.754,1429,2.875,1430,1.754,1431,1.754,1432,2.875,1433,1.754,1434,1.754,1435,1.754,1436,1.754,1437,1.754,1438,1.754,1439,1.754,1440,1.754,1441,1.754,1442,1.754,1443,1.754,1444,1.754,1445,1.754,1446,1.754,1447,1.754,1448,1.754,1449,4.225,1450,5.289,1451,1.754,1452,1.754,1453,1.754,1454,1.754,1455,1.754,1456,1.754,1457,3.236,1458,1.754,1459,1.754,1460,1.754,1461,1.754,1462,1.754,1463,5.521,1464,2.875,1465,1.754,1466,1.754,1467,2.875,1468,1.754,1469,1.507,1470,2.875,1471,1.754,1472,1.754,1473,1.754,1474,3.653,1475,1.754,1476,1.754,1477,1.754,1478,1.754,1479,1.754,1480,1.754,1481,1.754,1482,1.754,1483,1.754,1484,1.754,1485,1.754,1486,1.754,1487,2.875,1488,1.754,1489,1.754,1490,1.754,1491,1.754,1492,1.754,1493,1.754,1494,1.754,1495,1.754,1496,2.875,1497,4.225,1498,1.754,1499,2.875,1500,1.754,1501,1.754,1502,1.754,1503,1.754,1504,1.754,1505,1.754,1506,1.754,1507,5.289,1508,1.754,1509,2.875,1510,1.754,1511,1.754,1512,1.754,1513,1.754,1514,1.754,1515,1.754,1516,1.754,1517,1.754,1518,3.653,1519,1.754,1520,1.754,1521,1.754,1522,1.754,1523,2.875,1524,1.754,1525,1.754,1526,1.754,1527,1.754,1528,1.754,1529,1.754,1530,1.754,1531,1.754,1532,1.754,1533,1.754,1534,1.754,1535,1.754,1536,1.754]],["title/modules/UserModule.html",[29,0.756,50,1.906]],["body/modules/UserModule.html",[2,1.611,3,0.144,4,0.144,5,0.121,11,0.019,16,0.614,17,0.636,20,0.144,21,0.323,26,0.01,27,0.014,28,0.01,29,1.272,31,1.58,32,1.58,33,1.754,34,1.754,35,1.58,36,2.55,37,2.55,48,2.592,50,3.84,51,2.29,52,1.664,53,1.664,55,2.417,58,2.074,59,1.502,61,1.957,93,0.929,138,4.12,168,1.477,278,4.836,283,2.078,284,2.518,285,1.883,286,2.351,287,1.794,288,2.518,290,2.205,291,3.211,313,2.298,344,3.206,348,3.242,1181,3.636,1391,4.287,1469,3.636,1537,3.636,1538,4.233,1539,3.636,1540,3.636,1541,4.233,1542,4.233,1543,4.233,1544,4.233]],["title/injectables/ValidationService.html",[70,0.878,359,1.906]],["body/injectables/ValidationService.html",[3,0.153,4,0.153,5,0.128,7,0.372,8,1.52,11,0.019,12,1.447,14,1.52,15,0.952,16,0.553,17,0.676,20,0.153,21,0.343,24,1.847,26,0.011,27,0.014,28,0.011,59,1.596,70,1.379,71,1.864,80,2.036,92,1.676,93,0.769,94,0.498,95,1.379,135,2.514,148,2.771,155,1.864,165,1.967,166,1.445,168,1.079,229,3.519,321,4.404,356,2.884,359,2.994,365,2.382,373,2.343,382,1.596,383,2.884,384,3.133,424,2.676,461,2.268,807,3.193,808,3.709,1545,3.445,1546,5.749,1547,6.337,1548,4.498,1549,5.749,1550,4.498,1551,4.498,1552,6.337,1553,4.498,1554,3.445,1555,3.864,1556,4.498,1557,4.498,1558,4.498,1559,6.337,1560,6.678,1561,4.498,1562,4.498,1563,4.498]],["title/interfaces/board.html",[283,1.235,757,0.648]],["body/interfaces/board.html",[3,0.132,4,0.132,5,0.111,7,0.32,11,0.019,15,1.148,16,0.431,20,0.178,26,0.01,27,0.013,28,0.01,93,0.843,94,0.842,228,2.609,256,1.445,257,1.521,283,1.758,287,1.835,365,1.603,382,2.089,395,2.83,400,2.439,442,2.805,451,1.518,457,1.897,461,1.892,474,4.387,475,4.038,476,4.387,569,2.575,604,4.038,750,3.498,757,0.922,758,1.373,862,2.961,1024,3.651,1035,4.387,1036,4.578,1037,3.498,1141,3.28,1564,2.964,1565,3.087,1566,4.824,1567,3.498,1568,4.387,1569,3.911,1570,3.747,1571,2.964,1572,2.964,1573,2.713,1574,2.302,1575,2.964]],["title/interfaces/chat.html",[344,1.906,757,0.648]],["body/interfaces/chat.html",[3,0.171,4,0.171,5,0.144,7,0.416,11,0.019,15,1.072,16,0.51,20,0.171,26,0.012,27,0.015,28,0.012,93,0.93,94,0.814,301,2.198,313,1.876,344,3.21,382,2.365,395,2.709,400,3.098,403,5.322,407,5.322,451,1.796,569,2.695,757,0.89,758,1.784,1565,3.267,1570,3.667,1576,4.318,1577,5.968]],["title/interfaces/comment.html",[757,0.648,1041,2.033]],["body/interfaces/comment.html",[3,0.146,4,0.146,5,0.123,7,0.355,11,0.019,15,1.128,16,0.462,20,0.211,26,0.011,27,0.014,28,0.011,94,0.786,256,1.602,257,1.687,283,1.449,285,1.313,287,1.251,365,1.778,382,2.199,395,2.715,400,3.039,451,1.626,452,2.236,453,2.104,454,2.236,456,2.554,457,2.104,458,2.554,461,2.357,569,2.869,750,2.384,757,1.097,758,1.523,1037,2.384,1041,3.871,1047,3.098,1141,3.228,1147,2.752,1151,2.752,1155,2.752,1160,2.752,1164,2.752,1168,3.319,1565,3.333,1567,2.384,1569,2.554,1570,3.319,1573,3.696,1574,2.554,1578,2.99,1579,4.57,1580,4.36,1581,4.57,1582,2.99,1583,3.885,1584,2.99,1585,2.99,1586,2.99,1587,2.99]],["title/coverage.html",[1588,4.307]],["body/coverage.html",[0,2.175,1,2.005,5,0.082,6,2.472,11,0.019,18,1.713,21,0.448,26,0.007,27,0.01,28,0.007,35,1.074,70,1.72,72,2.472,75,2.205,78,2.005,79,2.472,94,0.319,96,1.021,117,2.005,125,2.005,138,1.599,140,1.713,144,1.599,166,0.925,168,1.325,211,1.845,212,1.845,218,2.472,271,2.205,278,2.005,280,2.472,283,1.428,285,1.294,287,1.232,291,2.845,292,2.005,293,2.472,313,1.578,316,1.499,344,2.202,346,1.845,349,2.472,359,1.499,373,4.046,447,2.205,449,2.472,450,2.472,457,1.411,470,2.205,471,3.239,472,2.472,473,2.205,484,2.205,485,2.472,499,2.472,500,2.472,555,2.472,588,1.845,589,2.472,590,2.472,610,2.005,619,2.005,620,3.239,641,1.599,678,4.507,691,2.205,693,2.945,695,2.205,718,2.472,725,1.845,731,2.005,732,2.472,741,2.205,757,1.252,759,2.472,760,2.472,767,2.205,769,2.472,772,1.845,774,2.005,775,2.472,846,2.005,903,2.472,908,2.005,909,2.472,937,1.713,962,2.472,971,1.845,1039,3.239,1041,1.599,1047,1.599,1184,2.005,1185,2.472,1235,1.713,1284,2.472,1371,2.005,1372,3.239,1373,2.472,1376,2.005,1377,2.472,1391,2.005,1392,2.472,1545,3.239,1554,2.205,1564,3.239,1576,2.472,1578,3.491,1588,2.472,1589,2.879,1590,2.879,1591,2.879,1592,5.524,1593,5.012,1594,2.879,1595,2.879,1596,5.885,1597,4.229,1598,2.879,1599,5.885,1600,2.879,1601,2.879,1602,5.012,1603,5.012,1604,7.438,1605,7.457,1606,4.231,1607,2.472,1608,3.632,1609,3.632,1610,3.632,1611,3.632,1612,3.632,1613,3.632,1614,2.879,1615,2.879,1616,2.879,1617,4.229,1618,2.879,1619,5.012,1620,4.305,1621,4.229,1622,2.879,1623,2.879,1624,5.012,1625,2.472,1626,2.472,1627,2.879,1628,2.472,1629,2.879,1630,2.879,1631,2.879,1632,2.879,1633,2.879,1634,2.472,1635,2.879,1636,2.879]],["title/dependencies.html",[32,1.645,1637,3.046]],["body/dependencies.html",[11,0.019,17,0.654,21,0.332,26,0.011,27,0.014,28,0.011,32,1.625,59,1.545,137,2.134,239,3.739,244,2.932,382,1.998,508,3.739,567,4.779,568,3.739,612,3.335,637,3.739,639,4.835,640,3.739,693,3.032,725,2.791,743,3.739,911,4.594,961,3.335,1094,3.739,1095,3.739,1175,3.739,1638,4.354,1639,4.354,1640,4.354,1641,5.63,1642,4.354,1643,4.354,1644,4.354,1645,4.354,1646,4.354,1647,6.239,1648,4.354,1649,5.63,1650,4.354,1651,5.63,1652,4.354,1653,4.354,1654,4.354,1655,4.354,1656,4.354,1657,4.354,1658,4.354,1659,6.239,1660,5.63,1661,4.354,1662,4.354,1663,4.354,1664,4.354,1665,4.354,1666,4.354,1667,4.354,1668,4.354,1669,4.354,1670,4.354,1671,4.354,1672,4.354,1673,4.354,1674,4.354,1675,4.354,1676,4.354,1677,4.354,1678,4.354,1679,4.354,1680,4.354,1681,4.354,1682,4.354,1683,4.354,1684,4.354,1685,4.354,1686,4.354,1687,4.354,1688,5.63,1689,4.354,1690,4.354,1691,4.354,1692,5.63,1693,4.354,1694,4.354,1695,4.354,1696,4.354,1697,4.354,1698,4.354,1699,4.354,1700,4.354,1701,4.354,1702,4.354,1703,4.354,1704,4.354,1705,4.354,1706,4.354,1707,4.354,1708,4.354]],["title/miscellaneous/functions.html",[1709,2.122,1710,3.785]],["body/miscellaneous/functions.html",[7,0.49,11,0.017,26,0.015,27,0.017,28,0.015,35,2.665,1606,4.533,1709,4.122,1710,5.083,1711,5.083]],["title/index.html",[7,0.303,1712,3.143]],["body/index.html",[2,0.984,11,0.019,18,3.261,26,0.008,27,0.012,28,0.008,29,0.698,30,5.25,31,1.261,32,1.261,33,1.399,34,1.399,35,1.261,36,1.399,37,1.399,38,2.9,39,2.9,40,2.9,41,4.622,42,3.391,43,4.364,44,3.604,45,3.726,46,4.364,47,4.276,48,2.807,49,4.436,50,3.726,51,1.965,52,1.327,53,1.327,71,1.399,96,2.367,138,3.704,144,3.045,208,2.9,210,2.9,211,3.514,212,3.514,274,2.9,276,2.9,277,2.9,278,4.742,316,3.546,338,2.9,340,2.9,341,2.9,359,3.474,448,2.009,641,3.704,672,2.9,674,2.9,675,2.9,758,1.198,763,2.9,765,2.9,766,2.9,767,5.108,772,4.276,846,4.645,897,2.9,899,2.9,900,2.9,937,3.261,956,2.9,958,2.9,1169,2.9,1170,2.9,1171,2.9,1235,3.261,1279,2.9,1281,2.9,1366,2.9,1537,2.9,1539,2.9,1540,2.9,1712,2.9,1713,3.377,1714,3.377,1715,3.377,1716,3.377]],["title/interfaces/message.html",[313,1.366,757,0.648]],["body/interfaces/message.html",[3,0.173,4,0.173,5,0.145,7,0.42,11,0.019,15,1.126,16,0.42,20,0.173,26,0.013,27,0.015,28,0.013,94,0.806,303,4.467,313,2.714,382,1.799,395,2.714,400,3.05,411,5.338,421,5.338,422,5.338,451,1.805,569,2.709,757,0.898,758,1.799,1565,3.279,1625,4.354]],["title/modules.html",[31,1.872]],["body/modules.html",[11,0.016,26,0.013,27,0.016,28,0.013,30,3.692,31,1.978,41,3.398,42,2.598,43,3.398,44,2.76,45,2.76,46,3.398,47,3.398,48,1.978,49,3.398,50,2.76,1717,7.616,1718,7.616,1719,7.616,1720,7.616]],["title/interfaces/pin.html",[285,1.12,757,0.648]],["body/interfaces/pin.html",[3,0.126,4,0.126,5,0.105,7,0.305,11,0.019,15,1.146,16,0.417,20,0.196,26,0.009,27,0.012,28,0.009,94,0.838,256,1.377,257,1.45,283,2.084,285,1.543,287,1.799,365,1.528,382,2.038,395,2.759,400,2.831,451,1.469,452,3.216,453,3.026,454,3.216,456,3.673,457,3.026,458,3.673,461,2.363,569,2.7,750,3.429,757,1.017,758,1.309,1037,3.429,1041,2.8,1047,2.8,1141,3.476,1147,2.365,1151,2.365,1155,2.365,1160,2.365,1164,2.365,1168,3.846,1565,3.168,1567,3.429,1569,3.673,1570,3.673,1573,3.674,1574,2.194,1578,2.569,1579,2.569,1580,3.232,1581,2.569,1582,2.569,1583,3.512,1584,4.301,1585,4.301,1586,4.301,1587,4.301]],["title/interfaces/reply.html",[757,0.648,1047,2.033]],["body/interfaces/reply.html",[3,0.148,4,0.148,5,0.124,7,0.36,11,0.019,15,1.13,16,0.466,20,0.212,26,0.011,27,0.014,28,0.011,94,0.775,256,1.622,257,1.708,283,1.467,285,1.33,287,1.267,365,1.8,382,2.212,395,2.657,400,3.046,451,1.639,452,2.263,453,2.13,454,2.263,456,2.586,457,2.13,458,2.586,461,2.362,569,2.883,750,2.414,757,1.104,758,1.542,1037,2.414,1041,3.123,1047,3.884,1141,3.247,1147,2.786,1151,2.786,1155,2.786,1160,2.786,1164,2.786,1168,3.345,1565,3.346,1567,2.414,1569,2.586,1570,3.345,1573,3.707,1574,2.586,1578,3.027,1579,3.027,1580,4.377,1581,3.027,1582,4.591,1583,3.917,1584,3.027,1585,3.027,1586,3.027,1587,3.027]],["title/interfaces/section.html",[457,1.794,757,0.648]],["body/interfaces/section.html",[3,0.155,4,0.155,5,0.13,7,0.377,11,0.019,15,1.132,16,0.48,20,0.198,26,0.011,27,0.014,28,0.011,93,0.61,94,0.767,228,1.888,256,1.701,257,1.791,283,1.538,287,1.328,365,1.888,382,2.262,395,2.832,400,1.888,442,2.402,451,1.689,457,2.841,461,2.049,474,3.174,475,2.922,476,3.174,569,2.788,604,2.922,750,2.531,757,1.026,758,1.617,862,3.097,1024,3.22,1035,3.174,1036,4.825,1037,2.531,1141,2.373,1564,3.491,1565,3.288,1566,3.491,1567,2.531,1568,3.174,1569,4.122,1571,5.139,1572,5.139,1573,3.495,1574,2.711,1575,3.491]],["title/interfaces/topic.html",[287,1.067,757,0.648]],["body/interfaces/topic.html",[3,0.165,4,0.165,5,0.138,7,0.401,11,0.019,15,1.117,16,0.499,20,0.165,26,0.012,27,0.015,28,0.012,93,0.918,94,0.817,228,2.842,287,1.756,382,2.327,395,2.685,451,1.756,452,3.573,453,3.362,454,3.573,461,2.311,569,2.635,757,0.858,758,1.72,862,3,1024,3.81,1565,3.214,1573,3.416,1626,4.163,1721,5.893]],["title/interfaces/user.html",[168,0.878,757,0.648]],["body/interfaces/user.html",[3,0.096,4,0.096,5,0.081,7,0.234,11,0.019,15,1.153,16,0.346,20,0.096,26,0.007,27,0.01,28,0.007,82,3.815,93,0.378,94,0.853,96,1.944,106,2.684,168,1.001,176,2.853,244,2.853,256,2.045,257,2.153,382,1.761,395,2.785,400,2.62,442,3.166,451,1.217,461,2.032,504,3.259,569,1.825,757,0.501,758,1.004,792,2.166,862,2.395,887,3.512,905,3.815,907,3.815,919,3.815,1024,3.042,1025,4.195,1104,4.195,1141,2.853,1168,1.683,1191,3.815,1305,4.195,1374,4.195,1375,4.195,1378,4.195,1379,4.195,1380,4.195,1381,4.195,1383,4.195,1384,4.195,1385,4.195,1386,3.815,1387,4.195,1388,4.195,1389,4.195,1390,4.195,1457,4.195,1565,2.431,1567,3.245,1568,1.97,1570,3.861,1573,1.473,1580,1.813,1628,2.429,1722,4.705,1723,4.705,1724,4.705,1725,4.705,1726,4.705,1727,4.705,1728,4.705,1729,4.705,1730,4.705,1731,2.429,1732,2.429,1733,2.429]],["title/miscellaneous/variables.html",[1709,2.122,1734,3.785]],["body/miscellaneous/variables.html",[7,0.516,11,0.019,15,1.149,26,0.006,27,0.009,28,0.006,75,2.712,82,1.586,93,0.656,94,0.719,96,0.808,100,1.116,106,1.116,166,1.807,168,1.176,176,1.186,228,1.467,229,1.264,244,1.186,248,1.955,256,1.622,257,1.708,260,3.37,283,1.467,285,1.083,287,1.71,291,3.234,301,2.144,303,1.459,309,2.712,313,1.83,344,1.844,365,1.467,395,2.327,400,2.876,403,1.744,407,1.744,411,1.744,421,1.744,422,1.744,442,2.988,452,1.844,453,1.735,454,1.844,456,2.107,457,1.116,458,1.354,459,1.459,461,2.287,474,1.586,475,2.27,476,1.586,486,1.955,487,1.955,488,1.955,489,1.955,490,1.955,491,1.955,504,1.354,572,1.955,604,1.459,610,2.466,620,1.744,643,1.955,678,1.744,691,2.712,692,1.955,693,3.699,694,3.041,695,2.712,696,1.955,698,1.955,702,1.955,725,2.27,741,2.712,750,1.967,792,3.328,799,3.404,803,3.732,862,2.322,887,1.459,905,1.586,907,1.586,919,1.586,971,2.27,1024,2.723,1025,1.744,1035,1.586,1036,2.466,1037,1.967,1039,1.744,1041,1.264,1047,1.264,1097,1.955,1104,1.744,1141,2.766,1143,1.955,1147,1.459,1151,1.459,1155,1.459,1160,1.459,1164,1.459,1168,2.585,1191,1.586,1305,1.744,1365,1.955,1374,1.744,1375,1.744,1378,1.744,1379,1.744,1380,1.744,1381,1.744,1383,1.744,1384,1.744,1385,1.744,1386,1.586,1387,1.744,1388,1.744,1389,1.744,1390,1.744,1457,1.744,1545,1.744,1554,2.712,1555,1.955,1566,1.744,1567,2.723,1568,2.466,1569,2.585,1571,1.744,1572,1.744,1573,3.771,1574,2.107,1575,1.744,1577,1.955,1579,1.586,1580,2.786,1581,1.586,1582,1.586,1583,2.466,1584,1.586,1585,1.586,1586,1.586,1587,1.586,1606,1.744,1607,3.041,1608,1.955,1609,1.955,1610,1.955,1611,1.955,1612,1.955,1613,1.955,1620,1.955,1634,1.955,1709,1.586,1711,3.732,1721,1.955,1722,1.955,1723,1.955,1724,1.955,1725,1.955,1726,1.955,1727,1.955,1728,1.955,1729,1.955,1730,1.955,1731,1.955,1732,1.955,1733,1.955,1734,1.955,1735,3.541,1736,3.541,1737,3.541,1738,4.902,1739,2.277,1740,3.541,1741,2.277,1742,2.277,1743,3.541,1744,3.541,1745,3.541,1746,2.277,1747,7.24,1748,7.24,1749,2.277,1750,2.277,1751,2.277,1752,2.277,1753,2.277,1754,2.277,1755,2.277,1756,2.277,1757,2.277,1758,2.277,1759,2.277,1760,2.277,1761,2.277,1762,2.277,1763,2.277,1764,2.277,1765,2.277,1766,2.277,1767,2.277,1768,2.277,1769,2.277,1770,4.902,1771,5.31,1772,5.31,1773,5.623,1774,2.277,1775,2.277,1776,2.277,1777,2.277]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":373,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1605,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1623,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1617,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1592,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1616,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["0/31",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["0/36",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1622,"title":{},"body":{"coverage.html":{}}}],["0/46",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1624,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1619,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1627,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":424,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["1.0.0",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":1595,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1714,"title":{},"body":{"index.html":{}}}],["11",{"_index":1713,"title":{},"body":{"index.html":{}}}],["14",{"_index":1716,"title":{},"body":{"index.html":{}}}],["16",{"_index":1715,"title":{},"body":{"index.html":{}}}],["16.7.1",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["1].topicname",{"_index":1363,"title":{},"body":{"injectables/TopicService.html":{}}}],["2",{"_index":443,"title":{},"body":{"injectables/ChatService.html":{}}}],["2.0.0",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["2.6.0",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1014,"title":{},"body":{"injectables/SearchService.html":{}}}],["4.0.0",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["4.2.4",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1366,"title":{},"body":{"injectables/TopicService.html":{},"index.html":{}}}],["5.0.0",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["5.9.26",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":516,"title":{},"body":{"injectables/Email.html":{}}}],["6.4.0",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["6.4.10",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["60.0.1",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["67472347632732h",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.0.0",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["7.3.2",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"interfaces/Payload.html":{},"injectables/TopicService.html":{}}}],["abdelmaboud",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["abohadima",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{}}}],["accesstoken",{"_index":564,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["account",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["activateaccount",{"_index":1378,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["activity",{"_index":1379,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["add",{"_index":1009,"title":{},"body":{"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["addcollaborators",{"_index":486,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":1252,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic",{"_index":1186,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(@body('topics",{"_index":1262,"title":{},"body":{"controllers/TopicController.html":{}}}],["addimagetotopic(topics",{"_index":1197,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic",{"_index":1187,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintoatopic(pinid",{"_index":1201,"title":{},"body":{"controllers/TopicController.html":{}}}],["addpintotopic",{"_index":1285,"title":{},"body":{"injectables/TopicService.html":{}}}],["addpintotopic(topicname",{"_index":1293,"title":{},"body":{"injectables/TopicService.html":{}}}],["address",{"_index":536,"title":{},"body":{"injectables/Email.html":{}}}],["addtorecentsearch",{"_index":963,"title":{},"body":{"injectables/SearchService.html":{}}}],["addtorecentsearch(userid",{"_index":968,"title":{},"body":{"injectables/SearchService.html":{}}}],["admin",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["alaa",{"_index":392,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["aleardy",{"_index":1503,"title":{},"body":{"controllers/UserController.html":{}}}],["already",{"_index":1324,"title":{},"body":{"injectables/TopicService.html":{}}}],["alt",{"_index":661,"title":{},"body":{"controllers/ImagesController.html":{}}}],["aouth",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["aouth/google?token",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibadrequestresponse",{"_index":636,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes",{"_index":635,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apiconsumes('multipart/form",{"_index":645,"title":{},"body":{"controllers/ImagesController.html":{}}}],["apicreatedresponse",{"_index":634,"title":{},"body":{"controllers/ImagesController.html":{}}}],["app",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":1173,"title":{},"body":{"modules/SharedModule.html":{}}}],["app_interceptor",{"_index":1174,"title":{},"body":{"modules/SharedModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["argumentshost",{"_index":595,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arr",{"_index":429,"title":{},"body":{"injectables/ChatService.html":{}}}],["arr.push(user",{"_index":435,"title":{},"body":{"injectables/ChatService.html":{}}}],["array",{"_index":395,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["array(mongoose.types.objectid",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(object",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array(string",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array|0",{"_index":416,"title":{},"body":{"injectables/ChatService.html":{}}}],["async",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["auth",{"_index":519,"title":{},"body":{"injectables/Email.html":{},"injectables/ImagesService.html":{}}}],["auth.controller",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":78,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["authorization",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["authproviderx509certurl",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["authuri",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["await",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["aya",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{}}}],["badrequestexception",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["badrequestexception('can",{"_index":1268,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["bcrypt",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":440,"title":{},"body":{"injectables/ChatService.html":{}}}],["bio",{"_index":904,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["birthdate",{"_index":1374,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["birthday",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["board",{"_index":283,"title":{"interfaces/board.html":{}},"body":{"modules/BoardModule.html":{},"classes/CreatePinDto.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["board.controller",{"_index":281,"title":{},"body":{"modules/BoardModule.html":{}}}],["board.dto.ts",{"_index":472,"title":{},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["board.dto.ts:2",{"_index":480,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:3",{"_index":478,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:4",{"_index":483,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:5",{"_index":482,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:6",{"_index":479,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:7",{"_index":477,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.dto.ts:8",{"_index":481,"title":{},"body":{"classes/EditBoardDto.html":{}}}],["board.service",{"_index":282,"title":{},"body":{"modules/BoardModule.html":{}}}],["board/board.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["board/board.service",{"_index":1544,"title":{},"body":{"modules/UserModule.html":{}}}],["boardcontroller",{"_index":280,"title":{},"body":{"modules/BoardModule.html":{},"coverage.html":{}}}],["boardfullmatch",{"_index":1033,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardfullmatch.length",{"_index":1038,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardid",{"_index":792,"title":{},"body":{"controllers/RecommendationController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardmodel",{"_index":967,"title":{},"body":{"injectables/SearchService.html":{}}}],["boardmodule",{"_index":42,"title":{"modules/BoardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["boards",{"_index":887,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardservice",{"_index":278,"title":{},"body":{"modules/BoardModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["boardsforyou",{"_index":1380,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["boardupdate",{"_index":1381,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["body('description",{"_index":1258,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('forgetpassword",{"_index":1483,"title":{},"body":{"controllers/UserController.html":{}}}],["body('imageheight",{"_index":1256,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imageid",{"_index":1255,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('imagewidth",{"_index":1257,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('message",{"_index":335,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('name",{"_index":336,"title":{},"body":{"controllers/ChatController.html":{},"controllers/TopicController.html":{}}}],["body('newpassword",{"_index":1481,"title":{},"body":{"controllers/UserController.html":{}}}],["body('oldpassword",{"_index":1482,"title":{},"body":{"controllers/UserController.html":{}}}],["body('pinid",{"_index":1249,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('recieverid",{"_index":331,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('senderid",{"_index":330,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('time",{"_index":332,"title":{},"body":{"controllers/ChatController.html":{}}}],["body('topicname",{"_index":1250,"title":{},"body":{"controllers/TopicController.html":{}}}],["body('topics",{"_index":1260,"title":{},"body":{"controllers/TopicController.html":{}}}],["boolean",{"_index":442,"title":{},"body":{"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["browse",{"_index":1720,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1717,"title":{},"body":{"modules.html":{}}}],["callbackurl",{"_index":576,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":737,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["casesensitive",{"_index":994,"title":{},"body":{"injectables/SearchService.html":{}}}],["catch",{"_index":593,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":594,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["certain",{"_index":1240,"title":{},"body":{"controllers/TopicController.html":{}}}],["change",{"_index":506,"title":{},"body":{"injectables/Email.html":{}}}],["changed",{"_index":535,"title":{},"body":{"injectables/Email.html":{}}}],["changeemail",{"_index":1498,"title":{},"body":{"controllers/UserController.html":{}}}],["chat",{"_index":344,"title":{"interfaces/chat.html":{}},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["chat._id",{"_index":412,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.controller",{"_index":343,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.map(conv",{"_index":430,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.save",{"_index":409,"title":{},"body":{"injectables/ChatService.html":{}}}],["chat.service",{"_index":317,"title":{},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["chatcontroller",{"_index":292,"title":{"controllers/ChatController.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatid",{"_index":411,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["chatmodel",{"_index":357,"title":{},"body":{"injectables/ChatService.html":{}}}],["chatmodule",{"_index":43,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"index.html":{},"modules.html":{}}}],["chats",{"_index":425,"title":{},"body":{"injectables/ChatService.html":{}}}],["chatservice",{"_index":316,"title":{"injectables/ChatService.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{},"index.html":{}}}],["check",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["checkemail",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(@query('email",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkemail(email",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkfollowinguser",{"_index":1393,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowinguser(params",{"_index":1411,"title":{},"body":{"controllers/UserController.html":{}}}],["checkfollowtopic",{"_index":1188,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["checkfollowtopic(@param",{"_index":1274,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(params",{"_index":1204,"title":{},"body":{"controllers/TopicController.html":{}}}],["checkfollowtopic(userid",{"_index":1295,"title":{},"body":{"injectables/TopicService.html":{}}}],["checkmongooseid",{"_index":1546,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkmongooseid(ids",{"_index":1549,"title":{},"body":{"injectables/ValidationService.html":{}}}],["checkuser",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkuser._id",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":448,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{},"index.html":{}}}],["clearuserid",{"_index":1040,"title":{},"body":{"classes/SharedGateway.html":{}}}],["clearuserid(socket",{"_index":1052,"title":{},"body":{"classes/SharedGateway.html":{}}}],["client",{"_index":1067,"title":{},"body":{"classes/SharedGateway.html":{}}}],["client.id",{"_index":1100,"title":{},"body":{"classes/SharedGateway.html":{}}}],["clientemail",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clientid",{"_index":572,"title":{},"body":{"injectables/GoogleStrategy.html":{},"miscellaneous/variables.html":{}}}],["clientsecret",{"_index":574,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientx509certurl",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloud/firestore",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_boardmodule",{"_index":274,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_boardmodule_exports",{"_index":276,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_boardmodule_imports",{"_index":275,"title":{},"body":{"modules/BoardModule.html":{}}}],["cluster_boardmodule_providers",{"_index":277,"title":{},"body":{"modules/BoardModule.html":{},"index.html":{}}}],["cluster_chatmodule",{"_index":338,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_chatmodule_exports",{"_index":340,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_chatmodule_imports",{"_index":339,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":341,"title":{},"body":{"modules/ChatModule.html":{},"index.html":{}}}],["cluster_imagesmodule",{"_index":672,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_imagesmodule_exports",{"_index":674,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_imagesmodule_imports",{"_index":673,"title":{},"body":{"modules/ImagesModule.html":{}}}],["cluster_imagesmodule_providers",{"_index":675,"title":{},"body":{"modules/ImagesModule.html":{},"index.html":{}}}],["cluster_pinsmodule",{"_index":763,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_pinsmodule_exports",{"_index":765,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_pinsmodule_imports",{"_index":764,"title":{},"body":{"modules/PinsModule.html":{}}}],["cluster_pinsmodule_providers",{"_index":766,"title":{},"body":{"modules/PinsModule.html":{},"index.html":{}}}],["cluster_recommendationmodule",{"_index":897,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_recommendationmodule_exports",{"_index":899,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_recommendationmodule_imports",{"_index":898,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["cluster_recommendationmodule_providers",{"_index":900,"title":{},"body":{"modules/RecommendationModule.html":{},"index.html":{}}}],["cluster_searchmodule",{"_index":956,"title":{},"body":{"modules/SearchModule.html":{},"index.html":{}}}],["cluster_searchmodule_imports",{"_index":957,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":958,"title":{},"body":{"modules/SearchModule.html":{},"index.html":{}}}],["cluster_sharedmodule",{"_index":1169,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_sharedmodule_exports",{"_index":1170,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_sharedmodule_providers",{"_index":1171,"title":{},"body":{"modules/SharedModule.html":{},"index.html":{}}}],["cluster_topicmodule",{"_index":1279,"title":{},"body":{"modules/TopicModule.html":{},"index.html":{}}}],["cluster_topicmodule_imports",{"_index":1280,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_providers",{"_index":1281,"title":{},"body":{"modules/TopicModule.html":{},"index.html":{}}}],["cluster_usermodule",{"_index":1537,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_exports",{"_index":1539,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["cluster_usermodule_imports",{"_index":1538,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1540,"title":{},"body":{"modules/UserModule.html":{},"index.html":{}}}],["code",{"_index":608,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["collaboratores",{"_index":473,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["collaboratorid",{"_index":487,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["collaborators",{"_index":1566,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["com",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["come",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["comment",{"_index":1041,"title":{"interfaces/comment.html":{}},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["comment(socket",{"_index":1056,"title":{},"body":{"classes/SharedGateway.html":{}}}],["commenter",{"_index":1579,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["comments",{"_index":1168,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["complete",{"_index":533,"title":{},"body":{"injectables/Email.html":{}}}],["compodoc/compodoc",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["confirm",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["confirm(@request",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirm(req",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["confirmupdateemail",{"_index":1394,"title":{},"body":{"controllers/UserController.html":{}}}],["confirmupdateemail(req",{"_index":1414,"title":{},"body":{"controllers/UserController.html":{}}}],["connected",{"_index":1099,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('client",{"_index":1098,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log('deliver",{"_index":1128,"title":{},"body":{"classes/SharedGateway.html":{}}}],["console.log(conv",{"_index":431,"title":{},"body":{"injectables/ChatService.html":{}}}],["console.log(err",{"_index":667,"title":{},"body":{"controllers/ImagesController.html":{}}}],["console.log(profile",{"_index":581,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["const",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["constructor(authservice",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(boardmodel",{"_index":964,"title":{},"body":{"injectables/SearchService.html":{}}}],["constructor(chatservice",{"_index":1049,"title":{},"body":{"classes/SharedGateway.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["constructor(topicmodel",{"_index":1290,"title":{},"body":{"injectables/TopicService.html":{}}}],["constructor(usermodel",{"_index":355,"title":{},"body":{"injectables/ChatService.html":{}}}],["constructor(userservice",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":739,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.getclass().name",{"_index":756,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":748,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["continue",{"_index":1557,"title":{},"body":{"injectables/ValidationService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('search",{"_index":939,"title":{},"body":{"controllers/SearchController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{}}}],["conv.usersids.map(user",{"_index":432,"title":{},"body":{"injectables/ChatService.html":{}}}],["convert",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["correct",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["cors",{"_index":1607,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":905,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":1141,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1588,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["coverimages",{"_index":1036,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["create",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicService.html":{}}}],["created",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["createdat",{"_index":1567,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createdorjoined",{"_index":1731,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["createparamdecorator((data",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpin",{"_index":488,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["createpindto",{"_index":447,"title":{"classes/CreatePinDto.html":{}},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["createtopic",{"_index":1189,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopic(imageid",{"_index":1208,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["createtopics",{"_index":1190,"title":{},"body":{"controllers/TopicController.html":{}}}],["createtopics(topics",{"_index":1211,"title":{},"body":{"controllers/TopicController.html":{}}}],["creator",{"_index":1037,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["creator.id",{"_index":1006,"title":{},"body":{"injectables/SearchService.html":{}}}],["creatorid",{"_index":1572,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["credential",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":599,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":603,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":602,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["data",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"classes/SharedGateway.html":{}}}],["data')@useinterceptors(undefined",{"_index":628,"title":{},"body":{"controllers/ImagesController.html":{}}}],["data.message",{"_index":1135,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.messageid",{"_index":1127,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.pinid",{"_index":1146,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.reacttype",{"_index":1144,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.recieverid",{"_index":1114,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.senderid",{"_index":1112,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.token",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["data.token;8",{"_index":1139,"title":{},"body":{"classes/SharedGateway.html":{}}}],["data.type",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["date",{"_index":400,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["date().tolocaledatestring",{"_index":609,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date(time",{"_index":446,"title":{},"body":{"injectables/ChatService.html":{}}}],["date.now",{"_index":747,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"classes/SharedGateway.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["decoded",{"_index":1101,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decoded._id",{"_index":1103,"title":{},"body":{"classes/SharedGateway.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["delay",{"_index":1042,"title":{},"body":{"classes/SharedGateway.html":{}}}],["delay(ms",{"_index":1059,"title":{},"body":{"classes/SharedGateway.html":{}}}],["delete",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["delete('/me/delete",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('/me/follow",{"_index":1269,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["deleteduserids",{"_index":1577,"title":{},"body":{"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["deletefile",{"_index":681,"title":{},"body":{"injectables/ImagesService.html":{}}}],["deletefile(id",{"_index":684,"title":{},"body":{"injectables/ImagesService.html":{}}}],["deleteflag",{"_index":1382,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{}}}],["deleteme",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(@request",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["deleteme(req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["deliver",{"_index":350,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["deliver(socket",{"_index":1062,"title":{},"body":{"classes/SharedGateway.html":{}}}],["deliver(userid",{"_index":362,"title":{},"body":{"injectables/ChatService.html":{}}}],["deliverstatus",{"_index":422,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["descriptioncheck",{"_index":1348,"title":{},"body":{"injectables/TopicService.html":{}}}],["descriptionget",{"_index":393,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["descriptionsend",{"_index":509,"title":{},"body":{"injectables/Email.html":{}}}],["destlink",{"_index":1586,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["dina",{"_index":391,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["document",{"_index":1565,"title":{},"body":{"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["documentation",{"_index":1589,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":561,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["done(null",{"_index":587,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["drive",{"_index":680,"title":{},"body":{"injectables/ImagesService.html":{}}}],["driveimageid",{"_index":1584,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["dto/login.dto",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/register.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/update",{"_index":1470,"title":{},"body":{"controllers/UserController.html":{}}}],["editboarddto",{"_index":470,"title":{"classes/EditBoardDto.html":{}},"body":{"classes/EditBoardDto.html":{},"coverage.html":{}}}],["editcollaboratorespermissionsdto",{"_index":484,"title":{"classes/EditCollaboratoresPermissionsDto.html":{}},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["editdescription",{"_index":489,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittitle",{"_index":490,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["edittopic",{"_index":1286,"title":{},"body":{"injectables/TopicService.html":{}}}],["edittopic(topics",{"_index":1301,"title":{},"body":{"injectables/TopicService.html":{}}}],["elasticsearch",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["elemmatch",{"_index":438,"title":{},"body":{"injectables/ChatService.html":{}}}],["email",{"_index":96,"title":{"injectables/Email.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"modules/SharedModule.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{},"index.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["email.service",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"modules/SharedModule.html":{},"controllers/UserController.html":{}}}],["email.service.ts",{"_index":500,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["email.service.ts:18",{"_index":505,"title":{},"body":{"injectables/Email.html":{}}}],["email.service.ts:7",{"_index":502,"title":{},"body":{"injectables/Email.html":{}}}],["emails",{"_index":579,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":582,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["end",{"_index":1560,"title":{},"body":{"injectables/ValidationService.html":{}}}],["enddate",{"_index":474,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":666,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/TopicService.html":{}}}],["error",{"_index":617,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error('not",{"_index":398,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["error('topic",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["errorresponse",{"_index":607,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["event",{"_index":1129,"title":{},"body":{"classes/SharedGateway.html":{}}}],["example",{"_index":73,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{}}}],["exception",{"_index":597,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":845,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/SharedModule.html":{}}}],["exception.filter.ts",{"_index":590,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":596,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":605,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.message",{"_index":614,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":592,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":735,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["exists",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["exp",{"_index":906,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["expiresin",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Payload.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["express",{"_index":640,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["extends",{"_index":569,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["extractjwt",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":1383,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":518,"title":{},"body":{"injectables/Email.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["fcmtoken",{"_index":1722,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["fields",{"_index":716,"title":{},"body":{"injectables/ImagesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["fileid",{"_index":660,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["filemetadata",{"_index":713,"title":{},"body":{"injectables/ImagesService.html":{}}}],["filename",{"_index":689,"title":{},"body":{"injectables/ImagesService.html":{}}}],["filepath",{"_index":654,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files",{"_index":630,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].buffer",{"_index":651,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].mimetype",{"_index":650,"title":{},"body":{"controllers/ImagesController.html":{}}}],["files[0].originalname",{"_index":649,"title":{},"body":{"controllers/ImagesController.html":{}}}],["filesinterceptor",{"_index":638,"title":{},"body":{"controllers/ImagesController.html":{}}}],["find",{"_index":1005,"title":{},"body":{"injectables/SearchService.html":{}}}],["findbyidandupdate(userid",{"_index":1019,"title":{},"body":{"injectables/SearchService.html":{}}}],["findone",{"_index":1323,"title":{},"body":{"injectables/TopicService.html":{}}}],["firebase",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["firebase.credential.cert(params",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebase.initializeapp",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firstname",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["follow",{"_index":539,"title":{},"body":{"injectables/Email.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["followers",{"_index":1024,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["following",{"_index":1305,"title":{},"body":{"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics",{"_index":1191,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followingtopics(@request",{"_index":1277,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(req",{"_index":1215,"title":{},"body":{"controllers/TopicController.html":{}}}],["followingtopics(userid",{"_index":1303,"title":{},"body":{"injectables/TopicService.html":{}}}],["follownotification",{"_index":1384,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["followtopic",{"_index":1192,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["followtopic(@param",{"_index":1265,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(params",{"_index":1218,"title":{},"body":{"controllers/TopicController.html":{}}}],["followtopic(userid",{"_index":1306,"title":{},"body":{"injectables/TopicService.html":{}}}],["followuser",{"_index":1395,"title":{},"body":{"controllers/UserController.html":{}}}],["followuser(@param",{"_index":1516,"title":{},"body":{"controllers/UserController.html":{}}}],["followuser(params",{"_index":1418,"title":{},"body":{"controllers/UserController.html":{}}}],["forbiddenexception",{"_index":633,"title":{},"body":{"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{}}}],["forget",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Email.html":{}}}],["forgetpassword",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["forgetpassword(@body",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgetpassword(body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["found",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{}}}],["fs",{"_index":693,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["function(err",{"_index":665,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["function(response",{"_index":708,"title":{},"body":{"injectables/ImagesService.html":{}}}],["functions",{"_index":1710,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuzzy",{"_index":961,"title":{},"body":{"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["fuzzy(model",{"_index":970,"title":{},"body":{"injectables/SearchService.html":{}}}],["gender",{"_index":907,"title":{},"body":{"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["generateboardmorelike",{"_index":776,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generateboardmorelike(req",{"_index":791,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed",{"_index":777,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(@request",{"_index":850,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatehomefeed(req",{"_index":795,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore",{"_index":778,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(@request",{"_index":860,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatepinmore(req",{"_index":798,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike",{"_index":779,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["generatesectionmorelike(req",{"_index":802,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/:userid/follower",{"_index":1531,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/:userid/following",{"_index":1533,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/allpins",{"_index":940,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/board",{"_index":950,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/checkemail",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/getchats/:userid",{"_index":326,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/getkeys",{"_index":954,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/getmessagessent/:recieverids/:senderid",{"_index":318,"title":{},"body":{"controllers/ChatController.html":{}}}],["get('/home/:index",{"_index":1429,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/image/:id",{"_index":624,"title":{},"body":{"controllers/ImagesController.html":{}}}],["get('/me",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me/boards/view",{"_index":1511,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/boardsforyou",{"_index":885,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/follow",{"_index":1273,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/follower",{"_index":1528,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me/following",{"_index":1276,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["get('/me/home",{"_index":855,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsforyou",{"_index":892,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/pinsrecentactivity",{"_index":895,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/popularpins",{"_index":889,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/follow",{"_index":876,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/topics/:topicname",{"_index":879,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/me/recommendation/trending",{"_index":882,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/boards/:boardid",{"_index":872,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/pins/:pinid",{"_index":864,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/more/sections/:boardid/:sectionid",{"_index":874,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["get('/mypins",{"_index":945,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/people",{"_index":947,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/recentsearch",{"_index":952,"title":{},"body":{"controllers/SearchController.html":{}}}],["get('/topic",{"_index":1237,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid",{"_index":1241,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/topic/:topicid/pins",{"_index":1245,"title":{},"body":{"controllers/TopicController.html":{}}}],["get('/user/:id",{"_index":1432,"title":{},"body":{"controllers/UserController.html":{}}}],["get('google",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('notifications/me",{"_index":1475,"title":{},"body":{"controllers/UserController.html":{}}}],["get('users/me",{"_index":1473,"title":{},"body":{"controllers/UserController.html":{}}}],["getallpins",{"_index":912,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getallpins(name",{"_index":974,"title":{},"body":{"injectables/SearchService.html":{}}}],["getallpins(req",{"_index":918,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardmore",{"_index":780,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardmore(req",{"_index":806,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboards",{"_index":913,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getboards(name",{"_index":977,"title":{},"body":{"injectables/SearchService.html":{}}}],["getboards(req",{"_index":922,"title":{},"body":{"controllers/SearchController.html":{}}}],["getboardsforyou",{"_index":781,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(@request",{"_index":886,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getboardsforyou(req",{"_index":811,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getchats",{"_index":294,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getchats(@param('userid",{"_index":327,"title":{},"body":{"controllers/ChatController.html":{}}}],["getchats(userid",{"_index":298,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["getfollowers",{"_index":1396,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowers(req",{"_index":1420,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings",{"_index":1397,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowings(req",{"_index":1423,"title":{},"body":{"controllers/UserController.html":{}}}],["getfollowrecommendation",{"_index":782,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(@request",{"_index":877,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getfollowrecommendation(req",{"_index":814,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gethomefeed",{"_index":783,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gethomefeed(req",{"_index":817,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getimage",{"_index":621,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getimage(id",{"_index":623,"title":{},"body":{"controllers/ImagesController.html":{}}}],["getkeys",{"_index":914,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getkeys(name",{"_index":979,"title":{},"body":{"injectables/SearchService.html":{}}}],["getkeys(req",{"_index":925,"title":{},"body":{"controllers/SearchController.html":{}}}],["getmessage",{"_index":351,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessage(userids",{"_index":369,"title":{},"body":{"injectables/ChatService.html":{}}}],["getmessagessent",{"_index":295,"title":{},"body":{"controllers/ChatController.html":{}}}],["getmessagessent(recieverids",{"_index":302,"title":{},"body":{"controllers/ChatController.html":{}}}],["getmypins",{"_index":915,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getmypins(name",{"_index":981,"title":{},"body":{"injectables/SearchService.html":{}}}],["getmypins(req",{"_index":928,"title":{},"body":{"controllers/SearchController.html":{}}}],["getnotifications",{"_index":1398,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(@request",{"_index":1476,"title":{},"body":{"controllers/UserController.html":{}}}],["getnotifications(req",{"_index":1425,"title":{},"body":{"controllers/UserController.html":{}}}],["getpeople",{"_index":916,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getpeople(name",{"_index":983,"title":{},"body":{"injectables/SearchService.html":{}}}],["getpeople(req",{"_index":931,"title":{},"body":{"controllers/SearchController.html":{}}}],["getpinmore",{"_index":784,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinmore(req",{"_index":820,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou",{"_index":785,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(@request",{"_index":893,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsforyou(req",{"_index":823,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsofatopic",{"_index":1193,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsofatopic(req",{"_index":1221,"title":{},"body":{"controllers/TopicController.html":{}}}],["getpinsoftopic",{"_index":1287,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsoftopic(topicid",{"_index":1308,"title":{},"body":{"injectables/TopicService.html":{}}}],["getpinsrecentactivity",{"_index":786,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpinsrecentactivity(req",{"_index":826,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins",{"_index":787,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(@request",{"_index":890,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpopularpins(req",{"_index":829,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getpublichome",{"_index":1399,"title":{},"body":{"controllers/UserController.html":{}}}],["getpublichome(@param('index",{"_index":1535,"title":{},"body":{"controllers/UserController.html":{}}}],["getpublichome(index",{"_index":1428,"title":{},"body":{"controllers/UserController.html":{}}}],["getrecentsearch",{"_index":917,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{}}}],["getrecentsearch(req",{"_index":934,"title":{},"body":{"controllers/SearchController.html":{}}}],["getrecentsearch(userid",{"_index":985,"title":{},"body":{"injectables/SearchService.html":{}}}],["getsectionmore",{"_index":788,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getsectionmore(req",{"_index":832,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopic",{"_index":1194,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(@request",{"_index":1242,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopic(req",{"_index":1225,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopicbyid",{"_index":1288,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicbyid(topicid",{"_index":1310,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettopicrecommendation",{"_index":789,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopicrecommendation(req",{"_index":835,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettopics",{"_index":1195,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["gettopics(@request",{"_index":1238,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(req",{"_index":1228,"title":{},"body":{"controllers/TopicController.html":{}}}],["gettopics(userid",{"_index":1312,"title":{},"body":{"injectables/TopicService.html":{}}}],["gettrendingrecommendation",{"_index":790,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(@request",{"_index":883,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["gettrendingrecommendation(req",{"_index":838,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["getuser",{"_index":1400,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param",{"_index":1478,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(params",{"_index":1431,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers",{"_index":1401,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowers(req",{"_index":1434,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings",{"_index":1402,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserfollowings(req",{"_index":1437,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate",{"_index":1403,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(@request",{"_index":1512,"title":{},"body":{"controllers/UserController.html":{}}}],["getviewstate(req",{"_index":1440,"title":{},"body":{"controllers/UserController.html":{}}}],["good",{"_index":1156,"title":{},"body":{"classes/SharedGateway.html":{}}}],["goodideareacts",{"_index":1155,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["google",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"interfaces/UpdateSettingsDto.html":{},"dependencies.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["google.auth.jwt",{"_index":699,"title":{},"body":{"injectables/ImagesService.html":{}}}],["google.drive",{"_index":704,"title":{},"body":{"injectables/ImagesService.html":{}}}],["googleapis",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["googleauth",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleimage",{"_index":1025,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["googlelogin",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":211,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"index.html":{}}}],["graceful",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["gracefulfs",{"_index":695,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gracefulfs.gracefulify(fs",{"_index":697,"title":{},"body":{"injectables/ImagesService.html":{}}}],["gridfs",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["haha",{"_index":1161,"title":{},"body":{"classes/SharedGateway.html":{}}}],["hahareacts",{"_index":1160,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["handle",{"_index":752,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["handleconnection",{"_index":1043,"title":{},"body":{"classes/SharedGateway.html":{}}}],["handleconnection(client",{"_index":1065,"title":{},"body":{"classes/SharedGateway.html":{}}}],["handler",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["hapi/joi",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["happy",{"_index":547,"title":{},"body":{"injectables/Email.html":{}}}],["height",{"_index":1300,"title":{},"body":{"injectables/TopicService.html":{}}}],["hello",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["hi",{"_index":531,"title":{},"body":{"injectables/Email.html":{}}}],["history",{"_index":1723,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["home",{"_index":853,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["homefeed",{"_index":1724,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":513,"title":{},"body":{"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.switchtohttp",{"_index":600,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":530,"title":{},"body":{"injectables/Email.html":{}}}],["http",{"_index":1176,"title":{},"body":{"modules/SharedModule.html":{}}}],["httpexception",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpexception('not",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception('there",{"_index":1349,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexception('this",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception('topic",{"_index":1352,"title":{},"body":{"injectables/TopicService.html":{}}}],["httpexceptionfilter",{"_index":588,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"controllers/RecommendationController.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["https://www.googleapis.com/auth/drive",{"_index":692,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":1356,"title":{},"body":{"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.forbidden",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":606,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpstatus.unauthorized",{"_index":1351,"title":{},"body":{"injectables/TopicService.html":{}}}],["iat",{"_index":761,"title":{},"body":{"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{}}}],["id",{"_index":365,"title":{},"body":{"injectables/ChatService.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":1157,"title":{},"body":{"classes/SharedGateway.html":{}}}],["identifier",{"_index":1590,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":321,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/ValidationService.html":{}}}],["ids.length",{"_index":405,"title":{},"body":{"injectables/ChatService.html":{}}}],["ifrest",{"_index":1485,"title":{},"body":{"controllers/UserController.html":{}}}],["image",{"_index":1298,"title":{},"body":{"injectables/TopicService.html":{}}}],["imageheight",{"_index":452,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid",{"_index":453,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["imageid').lean",{"_index":1002,"title":{},"body":{"injectables/SearchService.html":{}}}],["images",{"_index":1212,"title":{},"body":{"controllers/TopicController.html":{}}}],["images.controller",{"_index":677,"title":{},"body":{"modules/ImagesModule.html":{}}}],["images.service",{"_index":642,"title":{},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{}}}],["images/images.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["images/images.service",{"_index":1234,"title":{},"body":{"controllers/TopicController.html":{}}}],["imagescontroller",{"_index":619,"title":{"controllers/ImagesController.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"coverage.html":{}}}],["imagesmodule",{"_index":44,"title":{"modules/ImagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["imagesservice",{"_index":641,"title":{"injectables/ImagesService.html":{}},"body":{"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"controllers/TopicController.html":{},"coverage.html":{},"index.html":{}}}],["imagewidth",{"_index":454,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":591,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"miscellaneous/functions.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"index.html":{}}}],["injectmodel",{"_index":383,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["injectmodel('board",{"_index":990,"title":{},"body":{"injectables/SearchService.html":{}}}],["injectmodel('chat",{"_index":389,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('message",{"_index":390,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectmodel('pin",{"_index":991,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["injectmodel('topic",{"_index":1319,"title":{},"body":{"injectables/TopicService.html":{}}}],["injectmodel('user",{"_index":388,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["intercept",{"_index":733,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["intercept(context",{"_index":734,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["interface",{"_index":757,"title":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["interfaces",{"_index":758,"title":{},"body":{"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"index.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["internal",{"_index":615,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["invitation",{"_index":1385,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["isfollow",{"_index":1330,"title":{},"body":{"injectables/TopicService.html":{}}}],["isgoogle",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{}}}],["isjoined",{"_index":1568,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["joiners",{"_index":1575,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwt",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.verify(token",{"_index":1102,"title":{},"body":{"classes/SharedGateway.html":{}}}],["jwtfromrequest",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy",{"_index":212,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["keys",{"_index":1027,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin",{"_index":1028,"title":{},"body":{"injectables/SearchService.html":{}}}],["keyspin.map(pin",{"_index":1030,"title":{},"body":{"injectables/SearchService.html":{}}}],["lastmessage",{"_index":407,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["lastmessage.date",{"_index":428,"title":{},"body":{"injectables/ChatService.html":{}}}],["lastname",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lasttopics",{"_index":1725,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["lean",{"_index":1008,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["leave",{"_index":546,"title":{},"body":{"injectables/Email.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["length",{"_index":973,"title":{},"body":{"injectables/SearchService.html":{}}}],["likecomment",{"_index":1044,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likecomment(socket",{"_index":1068,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply",{"_index":1045,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likereply(socket",{"_index":1071,"title":{},"body":{"classes/SharedGateway.html":{}}}],["likers",{"_index":1583,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["likes",{"_index":1580,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["limit",{"_index":807,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["limit(5",{"_index":1029,"title":{},"body":{"injectables/SearchService.html":{}}}],["limitoffset",{"_index":1547,"title":{},"body":{"injectables/ValidationService.html":{}}}],["limitoffset(limit",{"_index":1551,"title":{},"body":{"injectables/ValidationService.html":{}}}],["link",{"_index":455,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/Email.html":{}}}],["literal",{"_index":1570,"title":{},"body":{"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/user.html":{}}}],["location",{"_index":1375,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":741,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.log",{"_index":754,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["logging.interceptor",{"_index":1177,"title":{},"body":{"modules/SharedModule.html":{}}}],["logginginterceptor",{"_index":731,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"injectables/LoggingInterceptor.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["login",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(userdto",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":117,"title":{"interfaces/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":1404,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(@request",{"_index":1526,"title":{},"body":{"controllers/UserController.html":{}}}],["logout(req",{"_index":1443,"title":{},"body":{"controllers/UserController.html":{}}}],["love",{"_index":1152,"title":{},"body":{"classes/SharedGateway.html":{}}}],["lovereacts",{"_index":1151,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["lt",{"_index":445,"title":{},"body":{"injectables/ChatService.html":{}}}],["mailoptions",{"_index":525,"title":{},"body":{"injectables/Email.html":{}}}],["make",{"_index":537,"title":{},"body":{"injectables/Email.html":{},"injectables/TopicService.html":{}}}],["match",{"_index":1022,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["me(@request",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["me(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["media",{"_index":662,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["mess",{"_index":399,"title":{},"body":{"injectables/ChatService.html":{}}}],["mess.date",{"_index":413,"title":{},"body":{"injectables/ChatService.html":{}}}],["message",{"_index":313,"title":{"interfaces/message.html":{}},"body":{"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/UserModule.html":{},"interfaces/chat.html":{},"coverage.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["message(socket",{"_index":1074,"title":{},"body":{"classes/SharedGateway.html":{}}}],["message._id",{"_index":415,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.reason",{"_index":552,"title":{},"body":{"injectables/Email.html":{}}}],["message.save",{"_index":414,"title":{},"body":{"injectables/ChatService.html":{}}}],["message.userid",{"_index":551,"title":{},"body":{"injectables/Email.html":{}}}],["message.username",{"_index":550,"title":{},"body":{"injectables/Email.html":{}}}],["messageid",{"_index":363,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["messagemodel",{"_index":358,"title":{},"body":{"injectables/ChatService.html":{}}}],["messages",{"_index":323,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["messagetext",{"_index":1134,"title":{},"body":{"classes/SharedGateway.html":{}}}],["metadata",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":612,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["mimetype",{"_index":687,"title":{},"body":{"injectables/ImagesService.html":{}}}],["miscellaneous",{"_index":1709,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":356,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["models/board.schema",{"_index":284,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["models/chat.schema",{"_index":345,"title":{},"body":{"modules/ChatModule.html":{}}}],["models/pin.schema",{"_index":286,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/topic.schema",{"_index":288,"title":{},"body":{"modules/BoardModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["models/user.schema",{"_index":289,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["modules/mailer",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["mongo",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["mongoosastic",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["mongoose",{"_index":382,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"dependencies.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["mongoose.schema",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.types.objectid",{"_index":1573,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["mongoose.types.objectid(pinid",{"_index":1337,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoose.types.objectid(userid",{"_index":1370,"title":{},"body":{"injectables/TopicService.html":{}}}],["mongoosemodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":290,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot(process.env.connection_string",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1569,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["morgan",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["ms",{"_index":1061,"title":{},"body":{"classes/SharedGateway.html":{}}}],["multer",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["n",{"_index":702,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["nada",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["name",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/EditBoardDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["name.familyname",{"_index":584,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":583,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["ne",{"_index":437,"title":{},"body":{"injectables/ChatService.html":{}}}],["need",{"_index":538,"title":{},"body":{"injectables/Email.html":{}}}],["nestinterceptor",{"_index":742,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["nestjs",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1175,"title":{},"body":{"modules/SharedModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":639,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":637,"title":{},"body":{"controllers/ImagesController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1094,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["new",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newemail",{"_index":762,"title":{},"body":{"interfaces/Payload.html":{}}}],["newpassword",{"_index":1449,"title":{},"body":{"controllers/UserController.html":{}}}],["newuser",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":736,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["node",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["nodemailer",{"_index":508,"title":{},"body":{"injectables/Email.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":512,"title":{},"body":{"injectables/Email.html":{}}}],["none",{"_index":653,"title":{},"body":{"controllers/ImagesController.html":{}}}],["notacceptableexception",{"_index":842,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/UserController.html":{}}}],["notacceptableexception('cant",{"_index":1514,"title":{},"body":{"controllers/UserController.html":{}}}],["notacceptableexception('view",{"_index":1510,"title":{},"body":{"controllers/UserController.html":{}}}],["note",{"_index":456,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{}}}],["notfoundexception('no",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('there",{"_index":325,"title":{},"body":{"controllers/ChatController.html":{}}}],["notification.service",{"_index":1180,"title":{},"body":{"modules/SharedModule.html":{}}}],["notificationcounter",{"_index":1386,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationofpinsactivity",{"_index":1726,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notifications",{"_index":1727,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["notificationservice",{"_index":772,"title":{},"body":{"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SharedModule.html":{},"coverage.html":{},"index.html":{}}}],["now",{"_index":746,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":755,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"controllers/UserController.html":{}}}],["number",{"_index":461,"title":{},"body":{"classes/CreatePinDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["number(limit",{"_index":1561,"title":{},"body":{"injectables/ValidationService.html":{}}}],["number(offset",{"_index":1562,"title":{},"body":{"injectables/ValidationService.html":{}}}],["oauth20",{"_index":568,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/JwtStrategy.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["objectid",{"_index":1554,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["objectid.isvalid(id",{"_index":1558,"title":{},"body":{"injectables/ValidationService.html":{}}}],["objects",{"_index":368,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["observable",{"_index":740,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["offlinenotifications",{"_index":1728,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["offset",{"_index":808,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["oldpassword",{"_index":1450,"title":{},"body":{"controllers/UserController.html":{}}}],["on('end",{"_index":669,"title":{},"body":{"controllers/ImagesController.html":{}}}],["on('error",{"_index":670,"title":{},"body":{"controllers/ImagesController.html":{}}}],["optional",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["out",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"index.html":{}}}],["override",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["overview",{"_index":1712,"title":{"index.html":{}},"body":{"index.html":{}}}],["owner",{"_index":507,"title":{},"body":{"injectables/Email.html":{}}}],["package",{"_index":1637,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":553,"title":{},"body":{"injectables/Email.html":{}}}],["param",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"controllers/RecommendationController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["param('boardid",{"_index":867,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('id",{"_index":652,"title":{},"body":{"controllers/ImagesController.html":{}}}],["param('pinid",{"_index":861,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('recieverids",{"_index":319,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('sectionid",{"_index":870,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["param('senderid",{"_index":320,"title":{},"body":{"controllers/ChatController.html":{}}}],["param('topicid",{"_index":1243,"title":{},"body":{"controllers/TopicController.html":{}}}],["param('topicname",{"_index":880,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["parameters",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["params",{"_index":971,"title":{},"body":{"injectables/SearchService.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["params.fcmtoken",{"_index":1524,"title":{},"body":{"controllers/UserController.html":{}}}],["params.topicid",{"_index":1267,"title":{},"body":{"controllers/TopicController.html":{}}}],["params.userid",{"_index":1518,"title":{},"body":{"controllers/UserController.html":{}}}],["partial",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":521,"title":{},"body":{"injectables/Email.html":{}}}],["passport",{"_index":567,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":565,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":570,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/Email.html":{},"interfaces/LoginDto.html":{},"interfaces/RegisterDto.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":610,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["path.resolve(filepath",{"_index":657,"title":{},"body":{"controllers/ImagesController.html":{}}}],["payload",{"_index":140,"title":{"interfaces/Payload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/Payload.html":{},"coverage.html":{}}}],["people",{"_index":1020,"title":{},"body":{"injectables/SearchService.html":{}}}],["permissions.dto.ts",{"_index":485,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["permissions.dto.ts:2",{"_index":493,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:3",{"_index":498,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:4",{"_index":494,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:5",{"_index":492,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:6",{"_index":496,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:7",{"_index":497,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["permissions.dto.ts:8",{"_index":495,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{}}}],["personalization",{"_index":475,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["phantom",{"_index":526,"title":{},"body":{"injectables/Email.html":{}}}],["photos",{"_index":580,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":586,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":585,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["pin",{"_index":285,"title":{"interfaces/pin.html":{}},"body":{"modules/BoardModule.html":{},"injectables/Email.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["pin.counts.goodideareacts",{"_index":1159,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.goodideareacts.valueof",{"_index":1158,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts",{"_index":1163,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.hahareacts.valueof",{"_index":1162,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts",{"_index":1154,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.lovereacts.valueof",{"_index":1153,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts",{"_index":1167,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.thanksreacts.valueof",{"_index":1166,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts",{"_index":1150,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.counts.wowreacts.valueof",{"_index":1149,"title":{},"body":{"classes/SharedGateway.html":{}}}],["pin.dto.ts",{"_index":450,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["pin.dto.ts:10",{"_index":469,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:2",{"_index":463,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:3",{"_index":464,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:4",{"_index":462,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:5",{"_index":466,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:6",{"_index":468,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:7",{"_index":460,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:8",{"_index":467,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.dto.ts:9",{"_index":465,"title":{},"body":{"classes/CreatePinDto.html":{}}}],["pin.save().catch(err",{"_index":1340,"title":{},"body":{"injectables/TopicService.html":{}}}],["pin.title",{"_index":1031,"title":{},"body":{"injectables/SearchService.html":{}}}],["pin.topic",{"_index":1339,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinfullmatch",{"_index":998,"title":{},"body":{"injectables/SearchService.html":{}}}],["pinfullmatch.length",{"_index":1000,"title":{},"body":{"injectables/SearchService.html":{}}}],["pinid",{"_index":799,"title":{},"body":{"controllers/RecommendationController.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinmodel",{"_index":965,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["pins",{"_index":862,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pins.controller",{"_index":770,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins.length",{"_index":1247,"title":{},"body":{"controllers/TopicController.html":{}}}],["pins.push(pin",{"_index":1347,"title":{},"body":{"injectables/TopicService.html":{}}}],["pins.service",{"_index":771,"title":{},"body":{"modules/PinsModule.html":{}}}],["pins/pins.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{}}}],["pinscontroller",{"_index":769,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{}}}],["pinsforyou",{"_index":1387,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsids",{"_index":1345,"title":{},"body":{"injectables/TopicService.html":{}}}],["pinsinspired",{"_index":1388,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinslength",{"_index":1365,"title":{},"body":{"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["pinsmodule",{"_index":45,"title":{"modules/PinsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["pinsnotification",{"_index":1389,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["pinsservice",{"_index":767,"title":{},"body":{"modules/PinsModule.html":{},"coverage.html":{},"index.html":{}}}],["pipe",{"_index":753,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipe(response",{"_index":671,"title":{},"body":{"controllers/ImagesController.html":{}}}],["please",{"_index":529,"title":{},"body":{"injectables/Email.html":{}}}],["popularpins",{"_index":1390,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":515,"title":{},"body":{"injectables/Email.html":{}}}],["post",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{}}}],["post('/createtopic",{"_index":1254,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/createtopics",{"_index":1213,"title":{},"body":{"controllers/TopicController.html":{}}}],["post('/forget",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/me/uploadimage",{"_index":644,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/me/uploadimage')@apiconsumes('multipart/form",{"_index":627,"title":{},"body":{"controllers/ImagesController.html":{}}}],["post('/seen",{"_index":329,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sentmessage",{"_index":334,"title":{},"body":{"controllers/ChatController.html":{}}}],["post('/sign_up",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/sign_up/confirm",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/topic/addpin",{"_index":1248,"title":{},"body":{"controllers/TopicController.html":{}}}],["prefix",{"_index":910,"title":{},"body":{"controllers/SearchController.html":{}}}],["private",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{}}}],["privatekey",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["privatekeyid",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.base_url}/api/google/redirect",{"_index":577,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.firebase_creadential_auth_provider_x509_cert_url",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_creadential_client_x509_cert_url",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.firebase_creadential_private_key.replace(/\\\\n/g",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.front_base_url",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["process.env.google_client_id",{"_index":573,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_secret",{"_index":575,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.secret_key",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{}}}],["profile",{"_index":560,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["profileimage",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RegisterDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["profileurl",{"_index":1574,"title":{},"body":{"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["project",{"_index":1023,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["projectid",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":366,"title":{},"body":{"injectables/ChatService.html":{},"injectables/GoogleStrategy.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["promise(resolve",{"_index":1107,"title":{},"body":{"classes/SharedGateway.html":{}}}],["properties",{"_index":451,"title":{},"body":{"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/ImagesService.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"interfaces/RegisterDto.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["provide",{"_index":1182,"title":{},"body":{"modules/SharedModule.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["public",{"_index":679,"title":{},"body":{"injectables/ImagesService.html":{}}}],["pull",{"_index":1012,"title":{},"body":{"injectables/SearchService.html":{}}}],["push",{"_index":439,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{}}}],["put",{"_index":843,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/edit",{"_index":1198,"title":{},"body":{"controllers/TopicController.html":{}}}],["put('/home/me",{"_index":849,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/log",{"_index":1525,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/:fcmtoken",{"_index":1521,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/boards/view",{"_index":1505,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/confirm",{"_index":1494,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/follow",{"_index":1264,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["put('/me/reset",{"_index":1480,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/me/update",{"_index":1487,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/more/boards/:boardid",{"_index":866,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/pins/:pinid",{"_index":859,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["put('/more/sections/:boardid/:sectionid",{"_index":869,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["query",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('limit",{"_index":856,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('name",{"_index":941,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('offset",{"_index":857,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["query('recentsearch",{"_index":942,"title":{},"body":{"controllers/SearchController.html":{}}}],["query('type",{"_index":1495,"title":{},"body":{"controllers/UserController.html":{}}}],["query('viewstate",{"_index":1506,"title":{},"body":{"controllers/UserController.html":{}}}],["reactpin",{"_index":1046,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reactpin(socket",{"_index":1077,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reacts",{"_index":1587,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reacttype",{"_index":1143,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["readable",{"_index":690,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable._read",{"_index":710,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable.push(null",{"_index":712,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readable.push(stream",{"_index":711,"title":{},"body":{"injectables/ImagesService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["really",{"_index":543,"title":{},"body":{"injectables/Email.html":{}}}],["recent",{"_index":1010,"title":{},"body":{"injectables/SearchService.html":{}}}],["recentsearch",{"_index":919,"title":{},"body":{"controllers/SearchController.html":{},"injectables/SearchService.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["reciever",{"_index":378,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["reciever.firstname",{"_index":1122,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.lastname",{"_index":1123,"title":{},"body":{"classes/SharedGateway.html":{}}}],["reciever.profileimage",{"_index":1118,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recieverid",{"_index":308,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["recieverids",{"_index":306,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{}}}],["recieverids.concat(senderid",{"_index":401,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverids.split",{"_index":322,"title":{},"body":{"controllers/ChatController.html":{}}}],["recieverids[0",{"_index":397,"title":{},"body":{"injectables/ChatService.html":{}}}],["recieverimage",{"_index":1117,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recievername",{"_index":1121,"title":{},"body":{"classes/SharedGateway.html":{}}}],["recommendation.controller",{"_index":902,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["recommendation.service",{"_index":847,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{}}}],["recommendation/recommendation.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["recommendationcontroller",{"_index":774,"title":{"controllers/RecommendationController.html":{}},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{}}}],["recommendationmodule",{"_index":46,"title":{"modules/RecommendationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecommendationModule.html":{},"index.html":{},"modules.html":{}}}],["recommendationservice",{"_index":846,"title":{},"body":{"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"coverage.html":{},"index.html":{}}}],["recommendedusers",{"_index":1721,"title":{},"body":{"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":559,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["registerdto",{"_index":125,"title":{"interfaces/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["rejectunauthorized",{"_index":524,"title":{},"body":{"injectables/Email.html":{}}}],["repins",{"_index":1732,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["replier",{"_index":1582,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["replies",{"_index":1581,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply",{"_index":1047,"title":{"interfaces/reply.html":{}},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["reply(socket",{"_index":1080,"title":{},"body":{"classes/SharedGateway.html":{}}}],["report",{"_index":548,"title":{},"body":{"injectables/Email.html":{}}}],["reported",{"_index":549,"title":{},"body":{"injectables/Email.html":{}}}],["req",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ImagesController.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["req.header('authorization",{"_index":1500,"title":{},"body":{"controllers/UserController.html":{}}}],["req.method",{"_index":749,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.settimeout(0",{"_index":851,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["req.url",{"_index":751,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["req.user",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["req.user._id",{"_index":852,"title":{},"body":{"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["req.user.email",{"_index":1496,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.firstname",{"_index":1501,"title":{},"body":{"controllers/UserController.html":{}}}],["req.user.newemail",{"_index":1497,"title":{},"body":{"controllers/UserController.html":{}}}],["reqired",{"_index":1484,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["request.method",{"_index":613,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.url",{"_index":611,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["require('cors",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('fs",{"_index":694,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('googleapis",{"_index":698,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('graceful",{"_index":696,"title":{},"body":{"injectables/ImagesService.html":{},"miscellaneous/variables.html":{}}}],["require('jsonwebtoken",{"_index":1097,"title":{},"body":{"classes/SharedGateway.html":{},"miscellaneous/variables.html":{}}}],["require('mongoose').types.objectid",{"_index":1555,"title":{},"body":{"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["require('morgan",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('path",{"_index":643,"title":{},"body":{"controllers/ImagesController.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/SearchService.html":{}}}],["res.data",{"_index":668,"title":{},"body":{"controllers/ImagesController.html":{}}}],["res.data.id",{"_index":717,"title":{},"body":{"injectables/ImagesService.html":{}}}],["res.redirect",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/Email.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}],["resetemail",{"_index":1502,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword",{"_index":1405,"title":{},"body":{"controllers/UserController.html":{}}}],["resetpassword(req",{"_index":1448,"title":{},"body":{"controllers/UserController.html":{}}}],["resolvedpath",{"_index":656,"title":{},"body":{"controllers/ImagesController.html":{}}}],["resource",{"_index":715,"title":{},"body":{"injectables/ImagesService.html":{}}}],["response",{"_index":601,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{}}}],["response.sendfile(resolvedpath",{"_index":658,"title":{},"body":{"controllers/ImagesController.html":{}}}],["response.status(status).json(errorresponse",{"_index":618,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsetype",{"_index":663,"title":{},"body":{"controllers/ImagesController.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":996,"title":{},"body":{"injectables/SearchService.html":{}}}],["result:pin",{"_index":976,"title":{},"body":{"injectables/SearchService.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["rimraf",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":743,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":745,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["sad",{"_index":545,"title":{},"body":{"injectables/Email.html":{}}}],["savedpins",{"_index":1729,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["savepin",{"_index":491,"title":{},"body":{"classes/EditCollaboratoresPermissionsDto.html":{},"miscellaneous/variables.html":{}}}],["savers",{"_index":1585,"title":{},"body":{"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["saves",{"_index":1733,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["schema",{"_index":291,"title":{},"body":{"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":578,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["scopes",{"_index":691,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":911,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"dependencies.html":{}}}],["search(model",{"_index":993,"title":{},"body":{"injectables/SearchService.html":{}}}],["search.controller",{"_index":960,"title":{},"body":{"modules/SearchModule.html":{}}}],["search.service",{"_index":938,"title":{},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{}}}],["search/search.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["searchcontroller",{"_index":908,"title":{"controllers/SearchController.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"coverage.html":{}}}],["searcher",{"_index":992,"title":{},"body":{"injectables/SearchService.html":{}}}],["searcher.search(name",{"_index":995,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchmodule",{"_index":47,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{},"index.html":{},"modules.html":{}}}],["searchservice",{"_index":937,"title":{"injectables/SearchService.html":{}},"body":{"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"coverage.html":{},"index.html":{}}}],["secretorkey",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":457,"title":{"interfaces/section.html":{}},"body":{"classes/CreatePinDto.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sectionid",{"_index":803,"title":{},"body":{"controllers/RecommendationController.html":{},"miscellaneous/variables.html":{}}}],["sectionname",{"_index":1571,"title":{},"body":{"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["sections",{"_index":1035,"title":{},"body":{"injectables/SearchService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":517,"title":{},"body":{"injectables/Email.html":{}}}],["seen",{"_index":352,"title":{},"body":{"injectables/ChatService.html":{}}}],["seen(userid",{"_index":374,"title":{},"body":{"injectables/ChatService.html":{}}}],["seendeliver",{"_index":296,"title":{},"body":{"controllers/ChatController.html":{}}}],["seendeliver(senderid",{"_index":307,"title":{},"body":{"controllers/ChatController.html":{}}}],["seenmessage",{"_index":353,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["seenmessage(senderid",{"_index":376,"title":{},"body":{"injectables/ChatService.html":{}}}],["seenmessage(socket",{"_index":1083,"title":{},"body":{"classes/SharedGateway.html":{}}}],["seenstatus",{"_index":421,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":394,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"modules/SharedModule.html":{}}}],["sendemail",{"_index":501,"title":{},"body":{"injectables/Email.html":{}}}],["sendemail(email",{"_index":503,"title":{},"body":{"injectables/Email.html":{}}}],["sender",{"_index":372,"title":{},"body":{"injectables/ChatService.html":{},"classes/SharedGateway.html":{}}}],["sender.firstname",{"_index":1125,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.lastname",{"_index":1126,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sender.profileimage",{"_index":1120,"title":{},"body":{"classes/SharedGateway.html":{}}}],["senderdelete",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["senderid",{"_index":303,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/SharedGateway.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["senderimage",{"_index":1119,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendername",{"_index":1124,"title":{},"body":{"classes/SharedGateway.html":{}}}],["sendmessage",{"_index":354,"title":{},"body":{"injectables/ChatService.html":{}}}],["sendmessage(senderid",{"_index":379,"title":{},"body":{"injectables/ChatService.html":{}}}],["sentmessage",{"_index":297,"title":{},"body":{"controllers/ChatController.html":{}}}],["sentmessage(senderid",{"_index":312,"title":{},"body":{"controllers/ChatController.html":{}}}],["server",{"_index":616,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/SharedGateway.html":{}}}],["set",{"_index":406,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/UserController.html":{}}}],["setfcmtoken",{"_index":1406,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(@param",{"_index":1522,"title":{},"body":{"controllers/UserController.html":{}}}],["setfcmtoken(params",{"_index":1453,"title":{},"body":{"controllers/UserController.html":{}}}],["settimeout(resolve",{"_index":1108,"title":{},"body":{"classes/SharedGateway.html":{}}}],["settings",{"_index":1467,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto",{"_index":1471,"title":{},"body":{"controllers/UserController.html":{}}}],["settings.dto.ts",{"_index":1377,"title":{},"body":{"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["setuserid",{"_index":1048,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setuserid(socket",{"_index":1086,"title":{},"body":{"classes/SharedGateway.html":{}}}],["setviewstate",{"_index":1407,"title":{},"body":{"controllers/UserController.html":{}}}],["setviewstate(req",{"_index":1456,"title":{},"body":{"controllers/UserController.html":{}}}],["shared.gateway",{"_index":1179,"title":{},"body":{"modules/SharedModule.html":{}}}],["shared/http",{"_index":844,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["shared/notification.service",{"_index":773,"title":{},"body":{"modules/PinsModule.html":{},"modules/RecommendationModule.html":{}}}],["shared/send",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["shared/shared.gateway",{"_index":347,"title":{},"body":{"modules/ChatModule.html":{}}}],["shared/shared.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["shared/validation.service",{"_index":386,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["sharedgateway",{"_index":346,"title":{"classes/SharedGateway.html":{}},"body":{"modules/ChatModule.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["sharedmodule",{"_index":48,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["sign",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Email.html":{}}}],["sign(payload",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["sign_up",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(@body",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["sign_up(userdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["signpayload",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["signpayload(payload",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["size",{"_index":404,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["smtp.gmail.com",{"_index":514,"title":{},"body":{"injectables/Email.html":{}}}],["socket",{"_index":1053,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.broadcast.emit('sendcomment",{"_index":1109,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.id",{"_index":1106,"title":{},"body":{"classes/SharedGateway.html":{}}}],["socket.io",{"_index":1095,"title":{},"body":{"classes/SharedGateway.html":{},"dependencies.html":{}}}],["socketid",{"_index":1104,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["sort",{"_index":423,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{}}}],["sorttype",{"_index":1730,"title":{},"body":{"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"controllers/ChatController.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"modules/ImagesModule.html":{},"injectables/ImagesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"modules/PinsModule.html":{},"controllers/RecommendationController.html":{},"modules/RecommendationModule.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{}}}],["specificelements",{"_index":1552,"title":{},"body":{"injectables/ValidationService.html":{}}}],["specificelements.length",{"_index":1559,"title":{},"body":{"injectables/ValidationService.html":{}}}],["specificelements.slice(offset",{"_index":1563,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/.../board.schema.ts",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../chat.schema.ts",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../images.controller.ts",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../images.service.ts",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1711,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../message.schema.ts",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification.service.ts",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pin.schema.ts",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shared.gateway.ts",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../topic.schema.ts",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation.service.ts",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:7",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:115",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:128",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:36",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:80",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:90",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:96",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":759,"title":{},"body":{"interfaces/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":903,"title":{},"body":{"interfaces/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":555,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:17",{"_index":563,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:7",{"_index":557,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:24",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/board/board.controller.ts",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["src/board/board.module.ts",{"_index":279,"title":{},"body":{"modules/BoardModule.html":{}}}],["src/board/board.service.ts",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["src/board/dto/edit",{"_index":471,"title":{},"body":{"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts",{"_index":293,"title":{},"body":{"controllers/ChatController.html":{},"coverage.html":{}}}],["src/chat/chat.controller.ts:19",{"_index":305,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:29",{"_index":300,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:37",{"_index":311,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.controller.ts:49",{"_index":315,"title":{},"body":{"controllers/ChatController.html":{}}}],["src/chat/chat.module.ts",{"_index":342,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service",{"_index":1096,"title":{},"body":{"classes/SharedGateway.html":{},"modules/SharedModule.html":{}}}],["src/chat/chat.service.ts",{"_index":349,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:111",{"_index":364,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:134",{"_index":375,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:158",{"_index":377,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:25",{"_index":381,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:58",{"_index":370,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:76",{"_index":367,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:9",{"_index":360,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/images/images.controller.ts",{"_index":620,"title":{},"body":{"controllers/ImagesController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/images/images.controller.ts:35",{"_index":629,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.controller.ts:44",{"_index":625,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/images/images.module.ts",{"_index":676,"title":{},"body":{"modules/ImagesModule.html":{}}}],["src/images/images.service.ts",{"_index":678,"title":{},"body":{"injectables/ImagesService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/images/images.service.ts:18",{"_index":683,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:30",{"_index":685,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/images/images.service.ts:45",{"_index":688,"title":{},"body":{"injectables/ImagesService.html":{}}}],["src/main.ts",{"_index":1606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/models/board.schema.ts",{"_index":1608,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/chat.schema",{"_index":1181,"title":{},"body":{"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/chat.schema.ts",{"_index":1609,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/message.schema",{"_index":348,"title":{},"body":{"modules/ChatModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["src/models/message.schema.ts",{"_index":1610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/pin.schema.ts",{"_index":1611,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/topic.schema.ts",{"_index":1612,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/models/user.schema",{"_index":1543,"title":{},"body":{"modules/UserModule.html":{}}}],["src/models/user.schema.ts",{"_index":1613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/pins/dto/create",{"_index":449,"title":{},"body":{"classes/CreatePinDto.html":{},"coverage.html":{}}}],["src/pins/pins.controller.ts",{"_index":1614,"title":{},"body":{"coverage.html":{}}}],["src/pins/pins.module.ts",{"_index":768,"title":{},"body":{"modules/PinsModule.html":{}}}],["src/pins/pins.service.ts",{"_index":1615,"title":{},"body":{"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts",{"_index":775,"title":{},"body":{"controllers/RecommendationController.html":{},"coverage.html":{}}}],["src/recommendation/recommendation.controller.ts:103",{"_index":805,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:124",{"_index":810,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:143",{"_index":834,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:164",{"_index":816,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:178",{"_index":837,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:196",{"_index":840,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:210",{"_index":813,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:222",{"_index":831,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:234",{"_index":825,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:246",{"_index":828,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:26",{"_index":797,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:38",{"_index":819,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:57",{"_index":801,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:69",{"_index":822,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.controller.ts:88",{"_index":794,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["src/recommendation/recommendation.module.ts",{"_index":901,"title":{},"body":{"modules/RecommendationModule.html":{}}}],["src/recommendation/recommendation.service.ts",{"_index":1618,"title":{},"body":{"coverage.html":{}}}],["src/search/search.controller.ts",{"_index":909,"title":{},"body":{"controllers/SearchController.html":{},"coverage.html":{}}}],["src/search/search.controller.ts:16",{"_index":921,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:33",{"_index":930,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:51",{"_index":933,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:68",{"_index":924,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:85",{"_index":936,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.controller.ts:96",{"_index":927,"title":{},"body":{"controllers/SearchController.html":{}}}],["src/search/search.module.ts",{"_index":959,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/search/search.service.ts",{"_index":962,"title":{},"body":{"injectables/SearchService.html":{},"coverage.html":{}}}],["src/search/search.service.ts:10",{"_index":966,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:109",{"_index":984,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:139",{"_index":980,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:153",{"_index":986,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:169",{"_index":978,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:27",{"_index":972,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:56",{"_index":975,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:74",{"_index":982,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/search/search.service.ts:89",{"_index":969,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/shared/http",{"_index":589,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts",{"_index":732,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/shared/logging.interceptor.ts:13",{"_index":738,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/shared/notification.service.ts",{"_index":1620,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/send",{"_index":499,"title":{},"body":{"injectables/Email.html":{},"coverage.html":{}}}],["src/shared/shared.gateway.ts",{"_index":1039,"title":{},"body":{"classes/SharedGateway.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/shared.gateway.ts:102",{"_index":1076,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:128",{"_index":1082,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:133",{"_index":1079,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:15",{"_index":1050,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:172",{"_index":1070,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:197",{"_index":1073,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:21",{"_index":1066,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:228",{"_index":1055,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:26",{"_index":1088,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:36",{"_index":1060,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:40",{"_index":1058,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:46",{"_index":1091,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:62",{"_index":1064,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.gateway.ts:82",{"_index":1085,"title":{},"body":{"classes/SharedGateway.html":{}}}],["src/shared/shared.module.ts",{"_index":1172,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/shared/validation.service.ts",{"_index":1545,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/validation.service.ts:10",{"_index":1550,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:17",{"_index":1553,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/shared/validation.service.ts:7",{"_index":1548,"title":{},"body":{"injectables/ValidationService.html":{}}}],["src/static/default.jpg",{"_index":655,"title":{},"body":{"controllers/ImagesController.html":{}}}],["src/topic/topic.controller.ts",{"_index":1185,"title":{},"body":{"controllers/TopicController.html":{},"coverage.html":{}}}],["src/topic/topic.controller.ts:106",{"_index":1220,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:113",{"_index":1233,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:120",{"_index":1207,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:130",{"_index":1217,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:25",{"_index":1230,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:34",{"_index":1227,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:43",{"_index":1224,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:60",{"_index":1203,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:70",{"_index":1210,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:89",{"_index":1214,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.controller.ts:98",{"_index":1199,"title":{},"body":{"controllers/TopicController.html":{}}}],["src/topic/topic.module.ts",{"_index":1282,"title":{},"body":{"modules/TopicModule.html":{}}}],["src/topic/topic.service.ts",{"_index":1284,"title":{},"body":{"injectables/TopicService.html":{},"coverage.html":{}}}],["src/topic/topic.service.ts:125",{"_index":1294,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:153",{"_index":1309,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:16",{"_index":1291,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:178",{"_index":1296,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:200",{"_index":1307,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:25",{"_index":1315,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:251",{"_index":1317,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:261",{"_index":1304,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:31",{"_index":1302,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:52",{"_index":1297,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:83",{"_index":1311,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/topic/topic.service.ts:98",{"_index":1313,"title":{},"body":{"injectables/TopicService.html":{}}}],["src/types/board.ts",{"_index":1564,"title":{},"body":{"interfaces/board.html":{},"coverage.html":{},"interfaces/section.html":{}}}],["src/types/chat.ts",{"_index":1576,"title":{},"body":{"interfaces/chat.html":{},"coverage.html":{}}}],["src/types/message",{"_index":387,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/types/message.ts",{"_index":1625,"title":{},"body":{"coverage.html":{},"interfaces/message.html":{}}}],["src/types/payload.ts",{"_index":760,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/types/pin.ts",{"_index":1578,"title":{},"body":{"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{}}}],["src/types/topic.ts",{"_index":1626,"title":{},"body":{"coverage.html":{},"interfaces/topic.html":{}}}],["src/types/user.ts",{"_index":1628,"title":{},"body":{"coverage.html":{},"interfaces/user.html":{}}}],["src/user/dto/update",{"_index":1372,"title":{},"body":{"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":1392,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:144",{"_index":1459,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:157",{"_index":1442,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:168",{"_index":1419,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:175",{"_index":1461,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:182",{"_index":1455,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:191",{"_index":1445,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:197",{"_index":1413,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:209",{"_index":1422,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:219",{"_index":1424,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:229",{"_index":1436,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:240",{"_index":1439,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:250",{"_index":1430,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:27",{"_index":1447,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":1427,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":1433,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:46",{"_index":1452,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:67",{"_index":1465,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:80",{"_index":1468,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:97",{"_index":1417,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"modules/TopicModule.html":{}}}],["src/user/user.module.ts",{"_index":1541,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["src/utilities/user.decorator.ts",{"_index":1634,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["startdate",{"_index":476,"title":{},"body":{"classes/EditBoardDto.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["state",{"_index":1515,"title":{},"body":{"controllers/UserController.html":{}}}],["statements",{"_index":1591,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":604,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/ImagesService.html":{},"interfaces/board.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["storage",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["strategies/google.strategy",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":566,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":664,"title":{},"body":{"controllers/ImagesController.html":{},"injectables/ImagesService.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"controllers/ImagesController.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["string(process.env.drive_client_email",{"_index":700,"title":{},"body":{"injectables/ImagesService.html":{}}}],["string(process.env.drive_private_key.replace(/\\\\n/g",{"_index":701,"title":{},"body":{"injectables/ImagesService.html":{}}}],["string(process.env.email",{"_index":520,"title":{},"body":{"injectables/Email.html":{}}}],["string(process.env.email_password",{"_index":522,"title":{},"body":{"injectables/Email.html":{}}}],["string(process.env.firebase_creadential_auth_uri",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_client_email",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_client_id",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_private_key_id",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_project_id",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_token_uri",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(process.env.firebase_creadential_type",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string(user",{"_index":433,"title":{},"body":{"injectables/ChatService.html":{}}}],["string(userid",{"_index":434,"title":{},"body":{"injectables/ChatService.html":{}}}],["subject",{"_index":527,"title":{},"body":{"injectables/Email.html":{}}}],["subscribemessage",{"_index":1092,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('clearuserid",{"_index":1054,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('comment",{"_index":1057,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('delivered",{"_index":1063,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likecomment",{"_index":1069,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('likereply",{"_index":1072,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('message",{"_index":1075,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reactpin",{"_index":1078,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('reply",{"_index":1081,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('seen",{"_index":1084,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('setuserid",{"_index":1087,"title":{},"body":{"classes/SharedGateway.html":{}}}],["subscribemessage('typing",{"_index":1090,"title":{},"body":{"classes/SharedGateway.html":{}}}],["success",{"_index":709,"title":{},"body":{"injectables/ImagesService.html":{},"controllers/UserController.html":{}}}],["successfully",{"_index":1253,"title":{},"body":{"controllers/TopicController.html":{}}}],["such",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":571,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":1718,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":540,"title":{},"body":{"injectables/Email.html":{}}}],["svg",{"_index":1719,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":744,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["text",{"_index":380,"title":{},"body":{"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/SearchService.html":{}}}],["thanks",{"_index":1165,"title":{},"body":{"classes/SharedGateway.html":{}}}],["thanksreacts",{"_index":1164,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.googlelogin(req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(payload",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signpayload(userdto",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.boardmodel.aggregate",{"_index":1034,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.chatmodel",{"_index":408,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.find",{"_index":427,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findone",{"_index":419,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatmodel.findoneandupdate",{"_index":402,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.chatservice.deliver(recieverid",{"_index":1131,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.getchats(userid",{"_index":328,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.getmessage(ids",{"_index":324,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.seen(recieverid",{"_index":1133,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.seenmessage(senderid",{"_index":333,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.chatservice.sendmessage",{"_index":1136,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.chatservice.sendmessage(senderid",{"_index":337,"title":{},"body":{"controllers/ChatController.html":{}}}],["this.checkfollowtopic(userid",{"_index":1355,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.drive",{"_index":703,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.drive.files",{"_index":707,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.drive.files.create",{"_index":714,"title":{},"body":{"injectables/ImagesService.html":{}}}],["this.email.sendemail",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.fuzzy",{"_index":1026,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.fuzzy(pin",{"_index":1003,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.gettopicbyid(topicid",{"_index":1343,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.imagesservice.drive.files.get",{"_index":659,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.imagesservice.uploadfile",{"_index":648,"title":{},"body":{"controllers/ImagesController.html":{}}}],["this.messagemodel",{"_index":410,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.find",{"_index":420,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.findoneandupdate",{"_index":436,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagemodel.updatemany",{"_index":444,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.pinmodel",{"_index":1004,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.find",{"_index":999,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.pinmodel.findbyid(data.pinid",{"_index":1140,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.pinmodel.findbyid(id",{"_index":1338,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.recommendationservice.boardmorelike(userid",{"_index":868,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.boardsforyou(userid",{"_index":888,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.followallrecommendation",{"_index":878,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getboardmorelike",{"_index":873,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.gethomefeed",{"_index":858,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getpinmorelike",{"_index":865,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.getsectionmorelike",{"_index":875,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.homefeed(userid",{"_index":854,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinmorelike(userid",{"_index":863,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsforyou(userid",{"_index":894,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.pinsinspired(userid",{"_index":896,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.popularpins(userid",{"_index":891,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.sectionmorelike",{"_index":871,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.topicrecommendation",{"_index":881,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.recommendationservice.trendingrecommendation",{"_index":884,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["this.searchservice.addtorecentsearch(userid",{"_index":943,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getallpins(name",{"_index":944,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getboards(name",{"_index":951,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getkeys(name",{"_index":955,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getmypins(name",{"_index":946,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getpeople(name",{"_index":949,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.searchservice.getrecentsearch(userid",{"_index":953,"title":{},"body":{"controllers/SearchController.html":{}}}],["this.server.emit('sendcomment",{"_index":1111,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.emit('sendpinreact",{"_index":1142,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.emit('sendreply",{"_index":1138,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.sockets.emit('sendcomment",{"_index":1110,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(reciever.socketid).emit('istyping",{"_index":1116,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(reciever.socketid).emit('sendmessage",{"_index":1137,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(sender.socketid).emit('setdelivered",{"_index":1130,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.server.to(sender.socketid).emit('setseen",{"_index":1132,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.topicmodel",{"_index":1322,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.aggregate",{"_index":1369,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.find",{"_index":1328,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicmodel.findbyid(topicid",{"_index":1327,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.topicservice.addpintotopic(topicname",{"_index":1251,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.checkfollowtopic(req.user._id",{"_index":1275,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.createtopic",{"_index":1259,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.edittopic(topics",{"_index":1263,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followingtopics(req.user._id",{"_index":1278,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.followtopic(req.user._id",{"_index":1266,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.getpinsoftopic",{"_index":1246,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopicbyid(topicid",{"_index":1244,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.gettopics(userid",{"_index":1239,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.topicsseeds(topics",{"_index":1261,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.topicservice.unfollowtopic(req.user._id",{"_index":1271,"title":{},"body":{"controllers/TopicController.html":{}}}],["this.usermodel",{"_index":1018,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.aggregate",{"_index":1021,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.usermodel.findbyid(recieverid",{"_index":1115,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(senderid",{"_index":1113,"title":{},"body":{"classes/SharedGateway.html":{}}}],["this.usermodel.findbyid(userid",{"_index":1032,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":1011,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.userservice.checkcreatedata(userdto",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkfollowuser(user",{"_index":1527,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat",{"_index":1499,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.checkmailexistandformat(body.email",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(email",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.checkmailexistandformat(user.email",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.checkupdatedata(updatedata",{"_index":1488,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.createuser",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser(req.user",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.deleteuser(req.user._id",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.findbylogin(userdto",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.followuser(req.user._id",{"_index":1517,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getpublichome(index",{"_index":1536,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(payload._id",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyid(req.user._id",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["this.userservice.getuserbyid(userid",{"_index":1350,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.userservice.getuserme(params.id",{"_index":1479,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserme(req.user._id",{"_index":1474,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusernotifications(req.user._id",{"_index":1477,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getviewstate(req.user._id",{"_index":1513,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.resetpassword",{"_index":1486,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setemail(req.user._id",{"_index":1504,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.setviewstate(req.user._id",{"_index":1508,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.unfollowtopic(userid",{"_index":1368,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.userservice.unfollowuser(req.user._id",{"_index":1520,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatedatainuser(req.user._id",{"_index":1491,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatefcmtocken",{"_index":1523,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updatesettings(req.user._id",{"_index":1492,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuserinfo(req.user._id",{"_index":1489,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(params.userid",{"_index":1532,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowers(req.user._id",{"_index":1529,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(params.userid",{"_index":1534,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.userfollowings(req.user._id",{"_index":1530,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validationservice.checkmongooseid([imageid",{"_index":1320,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([pinid",{"_index":1336,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([senderid",{"_index":396,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.checkmongooseid([topicid",{"_index":1326,"title":{},"body":{"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid([userid",{"_index":426,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.validationservice.checkmongooseid(userids",{"_index":417,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.validationservice.limitoffset",{"_index":997,"title":{},"body":{"injectables/SearchService.html":{},"injectables/TopicService.html":{}}}],["this.validationservice.limitoffset(limit",{"_index":1001,"title":{},"body":{"injectables/SearchService.html":{}}}],["throw",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/ImagesService.html":{},"controllers/RecommendationController.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["time",{"_index":309,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"miscellaneous/variables.html":{}}}],["timestamp",{"_index":441,"title":{},"body":{"injectables/ChatService.html":{},"classes/HttpExceptionFilter.html":{}}}],["title",{"_index":458,"title":{},"body":{"classes/CreatePinDto.html":{},"injectables/SearchService.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["tls",{"_index":523,"title":{},"body":{"injectables/Email.html":{}}}],["token",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/SharedGateway.html":{},"controllers/UserController.html":{}}}],["tokenuri",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["topic",{"_index":287,"title":{"interfaces/topic.html":{}},"body":{"modules/BoardModule.html":{},"classes/EditBoardDto.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"modules/UserModule.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"miscellaneous/variables.html":{}}}],["topic._id",{"_index":1332,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.controller",{"_index":1283,"title":{},"body":{"modules/TopicModule.html":{}}}],["topic.description",{"_index":1334,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers",{"_index":1353,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.includes(userid",{"_index":1331,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.length",{"_index":1354,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.followers.push(userid",{"_index":1357,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.imageid",{"_index":1335,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.name",{"_index":1333,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins",{"_index":1346,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.pins.length",{"_index":1344,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.save",{"_index":1325,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic.service",{"_index":1236,"title":{},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{}}}],["topic/:topicid",{"_index":1206,"title":{},"body":{"controllers/TopicController.html":{}}}],["topic/topic.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["topic[0].pins.push(pinid",{"_index":1341,"title":{},"body":{"injectables/TopicService.html":{}}}],["topic[0].save().catch(err",{"_index":1342,"title":{},"body":{"injectables/TopicService.html":{}}}],["topiccontroller",{"_index":1184,"title":{"controllers/TopicController.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"coverage.html":{}}}],["topicexist",{"_index":1321,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicid",{"_index":1222,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topicmodel",{"_index":1292,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicmodule",{"_index":49,"title":{"modules/TopicModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TopicModule.html":{},"index.html":{},"modules.html":{}}}],["topicname",{"_index":459,"title":{},"body":{"classes/CreatePinDto.html":{},"controllers/RecommendationController.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"miscellaneous/variables.html":{}}}],["topics",{"_index":1200,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["topics.map(topic",{"_index":1329,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicservice",{"_index":1235,"title":{"injectables/TopicService.html":{}},"body":{"controllers/TopicController.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"coverage.html":{},"index.html":{}}}],["topicsseeds",{"_index":1289,"title":{},"body":{"injectables/TopicService.html":{}}}],["topicsseeds(topics",{"_index":1314,"title":{},"body":{"injectables/TopicService.html":{}}}],["transformer",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["transporter",{"_index":511,"title":{},"body":{"injectables/Email.html":{}}}],["transporter.sendmail(mailoptions",{"_index":554,"title":{},"body":{"injectables/Email.html":{}}}],["true",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/SearchService.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ChatController.html":{},"injectables/ChatService.html":{},"classes/CreatePinDto.html":{},"classes/EditBoardDto.html":{},"classes/EditCollaboratoresPermissionsDto.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"classes/HttpExceptionFilter.html":{},"controllers/ImagesController.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/LoginDto.html":{},"interfaces/Payload.html":{},"controllers/RecommendationController.html":{},"interfaces/RegisterDto.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/UpdateDto.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{},"interfaces/board.html":{},"interfaces/chat.html":{},"interfaces/comment.html":{},"coverage.html":{},"interfaces/message.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"interfaces/topic.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["type(socket",{"_index":1089,"title":{},"body":{"classes/SharedGateway.html":{}}}],["types",{"_index":987,"title":{},"body":{"injectables/SearchService.html":{}}}],["types.objectid(userid",{"_index":1007,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/board",{"_index":988,"title":{},"body":{"injectables/SearchService.html":{}}}],["types/chat",{"_index":385,"title":{},"body":{"injectables/ChatService.html":{}}}],["types/fuzzy",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["types/payload",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["types/pin",{"_index":989,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["types/topic",{"_index":1318,"title":{},"body":{"injectables/TopicService.html":{}}}],["types/user",{"_index":384,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/ValidationService.html":{}}}],["undefined",{"_index":1556,"title":{},"body":{"injectables/ValidationService.html":{}}}],["unfollow",{"_index":1272,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic",{"_index":1196,"title":{},"body":{"controllers/TopicController.html":{},"injectables/TopicService.html":{}}}],["unfollowtopic(@param",{"_index":1270,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(params",{"_index":1231,"title":{},"body":{"controllers/TopicController.html":{}}}],["unfollowtopic(userid",{"_index":1316,"title":{},"body":{"injectables/TopicService.html":{}}}],["unfollowuser",{"_index":1408,"title":{},"body":{"controllers/UserController.html":{}}}],["unfollowuser(@param",{"_index":1519,"title":{},"body":{"controllers/UserController.html":{}}}],["unfollowuser(params",{"_index":1460,"title":{},"body":{"controllers/UserController.html":{}}}],["up",{"_index":534,"title":{},"body":{"injectables/Email.html":{}}}],["update",{"_index":1416,"title":{},"body":{"controllers/UserController.html":{}}}],["updated",{"_index":1509,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata",{"_index":1463,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata.deleteflag",{"_index":1493,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedata.notificationcounter",{"_index":1490,"title":{},"body":{"controllers/UserController.html":{}}}],["updatedto",{"_index":1371,"title":{"interfaces/UpdateDto.html":{}},"body":{"interfaces/UpdateDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatesettingsdto",{"_index":1376,"title":{"interfaces/UpdateSettingsDto.html":{}},"body":{"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updateuser",{"_index":1409,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(req",{"_index":1462,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings",{"_index":1410,"title":{},"body":{"controllers/UserController.html":{}}}],["updateusersettings(req",{"_index":1466,"title":{},"body":{"controllers/UserController.html":{}}}],["uploadedfiles",{"_index":632,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadfile",{"_index":682,"title":{},"body":{"injectables/ImagesService.html":{}}}],["uploadfile(filename",{"_index":686,"title":{},"body":{"injectables/ImagesService.html":{}}}],["uploadimage",{"_index":622,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadimage(@uploadedfiles",{"_index":647,"title":{},"body":{"controllers/ImagesController.html":{}}}],["uploadimage(files",{"_index":626,"title":{},"body":{"controllers/ImagesController.html":{}}}],["url",{"_index":750,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/board.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"interfaces/section.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":1183,"title":{},"body":{"modules/SharedModule.html":{}}}],["usefilters",{"_index":841,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["usefilters(httpexceptionfilter",{"_index":848,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/ImagesController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard('google",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('jwt",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ChatController.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@delete('/me/delete",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@delete('/me/follow",{"_index":1232,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/follower",{"_index":1435,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/:userid/following",{"_index":1438,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/allpins",{"_index":920,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/board",{"_index":923,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getchats/:userid",{"_index":299,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/getkeys",{"_index":926,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/getmessagessent/:recieverids/:senderid",{"_index":304,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@get('/me",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@get('/me/boards/view",{"_index":1441,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/boardsforyou",{"_index":812,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/follow",{"_index":1205,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/follower",{"_index":1421,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/following",{"_index":1216,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@get('/me/home",{"_index":818,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsforyou",{"_index":824,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/pinsrecentactivity",{"_index":827,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/popularpins",{"_index":830,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/follow",{"_index":815,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/topics/:topicname",{"_index":836,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/me/recommendation/trending",{"_index":839,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/boards/:boardid",{"_index":809,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/pins/:pinid",{"_index":821,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/more/sections/:boardid/:sectionid",{"_index":833,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@get('/mypins",{"_index":929,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/people",{"_index":932,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/recentsearch",{"_index":935,"title":{},"body":{"controllers/SearchController.html":{}}}],["useguards(undefined)@get('/topic",{"_index":1229,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid",{"_index":1226,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('/topic/:topicid/pins",{"_index":1223,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@get('notifications/me",{"_index":1426,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@get('users/me",{"_index":1446,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@post('/createtopic",{"_index":1209,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@post('/seen",{"_index":310,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sentmessage",{"_index":314,"title":{},"body":{"controllers/ChatController.html":{}}}],["useguards(undefined)@post('/sign_up/confirm",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@post('/topic/addpin",{"_index":1202,"title":{},"body":{"controllers/TopicController.html":{}}}],["useguards(undefined)@put('/home/me",{"_index":796,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/log",{"_index":1444,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/:fcmtoken",{"_index":1454,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/boards/view",{"_index":1458,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/confirm",{"_index":1415,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/follow",{"_index":1219,"title":{},"body":{"controllers/TopicController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/reset",{"_index":1451,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/me/update",{"_index":1464,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(undefined)@put('/more/boards/:boardid",{"_index":793,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/pins/:pinid",{"_index":800,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useguards(undefined)@put('/more/sections/:boardid/:sectionid",{"_index":804,"title":{},"body":{"controllers/RecommendationController.html":{}}}],["useinterceptors",{"_index":631,"title":{},"body":{"controllers/ImagesController.html":{}}}],["useinterceptors(filesinterceptor('file",{"_index":646,"title":{},"body":{"controllers/ImagesController.html":{}}}],["user",{"_index":168,"title":{"interfaces/user.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"injectables/GoogleStrategy.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"injectables/TopicService.html":{},"interfaces/UpdateSettingsDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.controller",{"_index":1542,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":1472,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":1373,"title":{},"body":{"interfaces/UpdateDto.html":{},"coverage.html":{}}}],["user.email",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.firstname",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.followingtopics",{"_index":1358,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.followingtopics.push(topicid",{"_index":1359,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lastname",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/SharedGateway.html":{}}}],["user.lasttopics",{"_index":1360,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.length",{"_index":1361,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.push",{"_index":1364,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics.slice(1",{"_index":1367,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.lasttopics[user.lasttopics.length",{"_index":1362,"title":{},"body":{"injectables/TopicService.html":{}}}],["user.password",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user.picture",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.profileimage",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"classes/SharedGateway.html":{}}}],["user.recentsearch",{"_index":1015,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.length",{"_index":1013,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.recentsearch.slice(0",{"_index":1016,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.save",{"_index":1017,"title":{},"body":{"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["user.service",{"_index":1469,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.socketid",{"_index":1105,"title":{},"body":{"classes/SharedGateway.html":{}}}],["user/:userid",{"_index":1412,"title":{},"body":{"controllers/UserController.html":{}}}],["user/user.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{}}}],["user/user.service",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TopicService.html":{}}}],["usercontroller",{"_index":1391,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.email",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdto.firstname",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":301,"title":{},"body":{"controllers/ChatController.html":{},"injectables/ChatService.html":{},"injectables/Email.html":{},"controllers/RecommendationController.html":{},"controllers/SearchController.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"controllers/TopicController.html":{},"injectables/TopicService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["userids",{"_index":371,"title":{},"body":{"injectables/ChatService.html":{}}}],["userids.concat(senderid",{"_index":418,"title":{},"body":{"injectables/ChatService.html":{}}}],["userimage",{"_index":1145,"title":{},"body":{"classes/SharedGateway.html":{}}}],["usermodel",{"_index":361,"title":{},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SearchModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{},"modules.html":{}}}],["username",{"_index":504,"title":{},"body":{"injectables/Email.html":{},"injectables/SearchService.html":{},"classes/SharedGateway.html":{},"interfaces/UpdateDto.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":948,"title":{},"body":{"controllers/SearchController.html":{}}}],["userservice",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TopicService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{},"index.html":{}}}],["usersids",{"_index":403,"title":{},"body":{"injectables/ChatService.html":{},"interfaces/chat.html":{},"miscellaneous/variables.html":{}}}],["v3",{"_index":706,"title":{},"body":{"injectables/ImagesService.html":{}}}],["validate",{"_index":556,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(accesstoken",{"_index":558,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.service",{"_index":1178,"title":{},"body":{"modules/SharedModule.html":{}}}],["validationservice",{"_index":359,"title":{"injectables/ValidationService.html":{}},"body":{"injectables/ChatService.html":{},"injectables/SearchService.html":{},"modules/SharedModule.html":{},"injectables/TopicService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"index.html":{}}}],["value",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["var",{"_index":510,"title":{},"body":{"injectables/Email.html":{},"controllers/ImagesController.html":{},"injectables/ImagesService.html":{},"classes/SharedGateway.html":{},"injectables/TopicService.html":{}}}],["variable",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1734,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifiedcallback",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["verifycallback",{"_index":562,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["version",{"_index":705,"title":{},"body":{"injectables/ImagesService.html":{}}}],["very",{"_index":544,"title":{},"body":{"injectables/Email.html":{}}}],["view",{"_index":1507,"title":{},"body":{"controllers/UserController.html":{}}}],["viewstate",{"_index":1457,"title":{},"body":{"controllers/UserController.html":{},"interfaces/user.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":598,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["websocketgateway",{"_index":1093,"title":{},"body":{"classes/SharedGateway.html":{}}}],["websocketserver",{"_index":1051,"title":{},"body":{"classes/SharedGateway.html":{}}}],["went",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["width",{"_index":1299,"title":{},"body":{"injectables/TopicService.html":{}}}],["world",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["worry",{"_index":541,"title":{},"body":{"injectables/Email.html":{}}}],["wow",{"_index":1148,"title":{},"body":{"classes/SharedGateway.html":{}}}],["wowreacts",{"_index":1147,"title":{},"body":{"classes/SharedGateway.html":{},"interfaces/comment.html":{},"interfaces/pin.html":{},"interfaces/reply.html":{},"miscellaneous/variables.html":{}}}],["x1f44b",{"_index":528,"title":{},"body":{"injectables/Email.html":{}}}],["x1f60a",{"_index":532,"title":{},"body":{"injectables/Email.html":{}}}],["x1f614",{"_index":542,"title":{},"body":{"injectables/Email.html":{}}}],["zoom",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BoardModule.html":{},"modules/ChatModule.html":{},"modules/ImagesModule.html":{},"modules/PinsModule.html":{},"modules/RecommendationModule.html":{},"modules/SearchModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nPinsModule\n\nPinsModule\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BoardModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            PinsModule\n                        \n                        \n                            RecommendationModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PinsModule } from './pins/pins.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { SharedModule } from './shared/shared.module';\nimport { BoardModule } from './board/board.module';\nimport { ImagesModule } from './images/images.module';\nimport { TopicModule } from './topic/topic.module';\nimport { UserModule } from './user/user.module';\nimport { SearchModule } from './search/search.module';\nimport { ChatModule } from './chat/chat.module';\nimport { RecommendationModule } from './recommendation/recommendation.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.CONNECTION_STRING),\n    PinsModule,\n    BoardModule,\n    ImagesModule,\n    TopicModule,\n    SharedModule,\n    AuthModule,\n    UserModule,\n    SearchModule,\n    ChatModule,\n    RecommendationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n/**\n * @module App\n */\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkEmail\n                            \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                deleteMe\n                            \n                            \n                                    Async\n                                forgetPassword\n                            \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                    Async\n                                googleAuthRedirect\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                sign_up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/checkEmail')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirm\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sign_up/confirm')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/delete')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            forgetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forgetPassword(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/forget-password')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthRedirect(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userDTO: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sign_up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sign_up(userDTO: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign_up')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Post,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Req,\n  NotFoundException,\n  Res,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { AuthService } from './auth.service';\nimport { Email } from '../shared/send-email.service';\n@Controller()\nexport class AuthController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private email: Email,\n  ) {}\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req) {}\n\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  async googleAuthRedirect(@Req() req, @Res() res) {\n    const data = await this.authService.googleLogin(req);\n    if (data) {\n      console.log( process.env.FRONT_BASE_URL +\n        '/aouth/google?token=' +\n        data.token +\n        '&type=' +\n        data.type)\n      res.redirect(\n        process.env.FRONT_BASE_URL +\n          '/aouth/google?token=' +\n          data.token +\n          '&type=' +\n          data.type,\n      );\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @Post('/login')\n  async login(@Body() userDTO: LoginDto) {\n    const user = await this.userService.findByLogin(userDTO);\n    if (!user) throw new Error('topic not found');\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Post('/sign_up')\n  async sign_up(@Body() userDTO: RegisterDto) {\n    const user = await this.userService.checkCreateData(userDTO);\n    const token = await this.authService.signPayload(userDTO);\n    await this.email.sendEmail(\n      userDTO.email,\n      token,\n      'confirm',\n      userDTO.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sign_up/confirm')\n  async confirm(@Request() req) {\n    const user = await this.userService.createUser(req.user);\n    const payload: Payload = {\n      _id: user._id,\n    };\n    const token = await this.authService.signPayload(payload);\n    return { profileImage: user.profileImage, token };\n  }\n\n  @Get('/checkEmail')\n  async checkEmail(@Query('email') email: string) {\n    const user = await this.userService.checkMAilExistAndFormat(email);\n    if (user)\n      throw new HttpException('this user is exists', HttpStatus.FORBIDDEN);\n  }\n  @Post('/forget-password')\n  async forgetPassword(@Body() body) {\n    const user = await this.userService.checkMAilExistAndFormat(body.email);\n    if (!user)\n      throw new HttpException('not user by this email', HttpStatus.FORBIDDEN);\n    const payload: Payload = {\n      _id: user._id,\n      email: user.email,\n    };\n    const token = await this.authService.signPayload(payload);\n    await this.email.sendEmail(\n      user.email,\n      token,\n      'forget Password',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/delete')\n  async deleteMe(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    await this.userService.deleteUser(req.user._id);\n    await this.email.sendEmail(\n      user.email,\n      null,\n      'Delete account',\n      user.firstName,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserById(req.user._id);\n    user.password = null;\n    return { user };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { UserModule } from 'src/user/user.module';\n@Module({\n  imports: [SharedModule, UserModule],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, GoogleStrategy],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleLogin\n                            \n                            \n                                    Async\n                                signPayload\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleLogin(req)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signPayload(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject went to convert to token\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        token which created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n                    validateUser : check if this object which come from token is user or not .\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nobject which come from token .\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        user object\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { sign } from 'jsonwebtoken';\nimport { UserService } from '../user/user.service';\nimport { Payload } from '../types/payload';\n/**\n * @module Authorization\n */\n@Injectable()\nexport class AuthService {\n  constructor(private userService: UserService) { }\n  /**\n   * @author Nada Abdelmaboud \n   * @description google aouth handler\n   * @param {Object}\n   */\n  async googleLogin(req) {\n    if (!req.user) {\n      throw new NotFoundException('no such user on google');\n    }\n    let user = req.user;\n    let type;\n    let checkUser = await this.userService.checkMAilExistAndFormat(user.email);\n    let payload;\n    if (!checkUser) {\n      type = 'sign';\n      let newUser = await this.userService.createUser({\n        email: user.email,\n        birthday: null,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        password: '',\n        isGoogle: true,\n        profileImage: user.picture,\n      });\n      if (!newUser) {\n        throw new BadRequestException();\n      }\n      payload = {\n        _id: newUser._id,\n      };\n    } else {\n      type = 'login';\n      payload = {\n        _id: checkUser._id,\n      };\n    }\n    return {\n      token:\n        'Bearer ' +\n        sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' }),\n      type: type,\n    };\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description sign payload function : create token\n   * @param payload - object went to convert to token\n   * @returns token which created\n   */\n  async signPayload(payload) {\n    return (\n      'Bearer ' +\n      sign(payload, process.env.SECRET_KEY, { expiresIn: '67472347632732h' })\n    );\n  }\n\n  /**\n   * validateUser : check if this object which come from token is user or not .\n   * @param payload - object which come from token .\n   * @returns user object\n   */\n  async validateUser(payload: Payload) {\n    const user = await this.userService.getUserById(payload._id);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BoardModule.html":{"url":"modules/BoardModule.html","title":"module - BoardModule","body":"\n                   \n\n\n\n\n    Modules\n    BoardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_imports\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nBoardModule\n\nBoardModule\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/board/board.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BoardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BoardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BoardController } from './board.controller';\nimport { BoardService } from './board.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [BoardController],\n  providers: [BoardService],\n  exports: [BoardService],\n})\nexport class BoardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ChatController.html":{"url":"controllers/ChatController.html","title":"controller - ChatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ChatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessagesSent\n                            \n                            \n                                    Async\n                                seenDeliver\n                            \n                            \n                                    Async\n                                sentMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getChats/:userId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessagesSent\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessagesSent(recieverIds: string, senderId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getMessagesSent/:recieverIds/:senderId')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recieverIds\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenDeliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenDeliver(senderId: string, recieverId: string, time: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/seen')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sentMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sentMessage(senderId: string, recieverId: [string], message: string, name: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/sentMessage')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recieverId\n                                    \n                                            [string]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Param,\n  Get,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ChatService } from './chat.service';\n\n@Controller()\nexport class ChatController {\n  constructor(private ChatService: ChatService) { }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getMessagesSent/:recieverIds/:senderId')\n  async getMessagesSent(\n    @Param('recieverIds') recieverIds: string,\n    @Param('senderId') senderId: string) {\n    let ids = recieverIds.split(',');\n    let messages = await this.ChatService.getMessage(ids, senderId);\n    if (messages) return messages;\n    throw new NotFoundException('there is no messages');\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getChats/:userId')\n  async getChats(@Param('userId') userId,\n  ) {\n    let messages = await this.ChatService.getChats(userId);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/seen')\n  async seenDeliver(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: string,\n    @Body('time') time: string,\n  ) {\n    let messages = await this.ChatService.seenMessage(senderId, recieverId, time);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/sentMessage')\n  async sentMessage(\n    @Body('senderId') senderId: string,\n    @Body('recieverId') recieverId: [string],\n    @Body('message') message: string,\n    @Body('name') name: string\n  ) {\n    let messages = await this.ChatService.sendMessage(senderId, recieverId, message);\n    if (messages) return messages;\n    throw new NotFoundException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ChatController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ChatController } from './chat.controller';\nimport { ChatService } from './chat.service';\nimport { User } from '../models/user.schema';\nimport { Chat } from '../models/chat.schema';\nimport { SharedGateway } from '../shared/shared.gateway';\n\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { Message } from 'src/models/message.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Chat', schema: Chat },\n      { name: 'Message', schema: Message },\n\n    ]),\n  ],\n  controllers: [ChatController],\n  providers: [ChatService],\n  exports: [ChatService],\n})\nexport class ChatModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                getChats\n                            \n                            \n                                    Async\n                                getMessage\n                            \n                            \n                                    Async\n                                seen\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, chatModel: Model, messageModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(userId: String, messageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -message id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -message object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getChats\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getChats(userId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        -chat objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMessage(userIds: String[], senderId: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user ids\n\n                                    \n                                \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -message objects | 0\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seen\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seen(userId: String, messageId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id \n\n                                    \n                                \n                                \n                                    messageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -message id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -message object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(senderId: String, recieverId: String, time: string)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                                \n                                    recieverId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -reciever id \n\n                                    \n                                \n                                \n                                    time\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -time\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(senderId: String, recieverIds: String[], text: String)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    senderId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -sender id \n\n                                    \n                                \n                                \n                                    recieverIds\n                                    \n                                            String[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -reciever ids\n\n                                    \n                                \n                                \n                                    text\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -message id\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { user } from '../types/user';\nimport { chat } from '../types/chat';\nimport { ValidationService } from '../shared/validation.service';\nimport { message } from 'src/types/message';\n@Injectable()\nexport class ChatService {\n  constructor(\n    @InjectModel('User') private readonly userModel: Model,\n    @InjectModel('Chat') private readonly chatModel: Model,\n    @InjectModel('Message') private readonly messageModel: Model,\n\n    private ValidationService: ValidationService,\n  ) { }\n  /**\n* @author Dina Alaa \n* @descriptionget send message\n* @param {String} senderId -sender id \n* @param {Array} recieverIds -reciever ids\n* @param {String} text -name\n* @returns {String} -message id\n*/\n  async sendMessage(senderId: String, recieverIds: String[], text: String): Promise {\n    if (!this.ValidationService.checkMongooseID([senderId, recieverIds[0]]))\n      throw new Error('not mongoose id');\n    let mess = { userId: senderId, message: text, date: new Date() };\n    let ids = recieverIds.concat(senderId);\n    let chat = await this.chatModel.findOneAndUpdate(\n      { usersIds: { $all: ids, $size: ids.length } },\n      { $set: { lastMessage: mess } },\n    );\n    if (!chat) {\n      chat = new this.chatModel({\n        usersIds: ids,\n        lastMessage: mess,\n        date: new Date(),\n      });\n      await chat.save();\n    }\n    let message = new this.messageModel({\n      chatId: chat._id,\n      senderId: senderId,\n      message: text,\n      date: mess.date,\n    });\n    await message.save();\n    return message._id;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get messages\n* @param {String} senderId -sender id \n* @param {Array} userIds -user ids\n* @returns {Array|0} -message objects | 0\n*/\n  async getMessage(userIds: String[], senderId: String): Promise | 0> {\n    if (!this.ValidationService.checkMongooseID(userIds))\n      throw new Error('not mongoose id');\n    let ids = userIds.concat(senderId);\n    let chat = await this.chatModel.findOne({ usersIds: { $all: ids, $size: ids.length } }, '_id');\n    if (!chat) return 0;\n    return await this.messageModel.find(\n      { chatId: chat._id },\n      'message date seenStatus deliverStatus senderId',\n      { sort: { date: -1 } },\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get chats\n* @param {String} userId -user id \n* @returns {Array} -chat objects\n*/\n  async getChats(userId: String): Promise> {\n    if (!this.ValidationService.checkMongooseID([userId]))\n      throw new Error('not mongoose id');\n    let chat = await this.chatModel.find(\n      { usersIds: userId },\n      'usersIds lastMessage',\n      { sort: { 'lastMessage.date': -1 } },\n    );\n    let arr = [];\n    let result = [];\n    chat.map(conv => {\n      console.log(conv)\n      conv.usersIds.map(user => {\n        if (String(user) != String(userId)) arr.push(user);\n      });\n    });\n    for (let i = 0; i \n* @descriptionget deliver message\n* @param {String} userId -user id \n* @param {String} messageId -message id\n* @returns {Object} -message object\n*/\n  async deliver(userId: String, messageId: string): Promise {\n    if (!this.ValidationService.checkMongooseID([userId, messageId]))\n      throw new Error('not mongoose id');\n    return await this.messageModel.findOneAndUpdate(\n      {\n        _id: messageId,\n        senderId: { $ne: userId },\n        deliverStatus: { $not: { $elemMatch: { userId: userId } } },\n      },\n      {\n        $push: {\n          deliverStatus: { userId: userId, time: new Date() },\n        },\n      },\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget seen message\n* @param {String} userId -user id \n* @param {String} messageId -message id\n* @returns {Object} -message object\n*/\n  async seen(userId: String, messageId: string): Promise {\n    if (!this.ValidationService.checkMongooseID([userId, messageId]))\n      throw new Error('not mongoose id');\n\n    return await this.messageModel.findOneAndUpdate(\n      {\n        _id: messageId,\n        senderId: { $ne: userId },\n        seenStatus: { $not: { $elemMatch: { userId: userId } } }\n      },\n      {\n        $push: {\n          seenStatus: { userId: userId, time: new Date() }\n        }\n      });\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget seen messages before timeStamp\n* @param {String} senderId -sender id \n* @param {String} recieverId -reciever id \n* @param {String} time -time\n* @returns {Boolean} \n*/\n  async seenMessage(\n    senderId: String,\n    recieverId: String,\n    time: string\n  ): Promise {\n    if (!this.ValidationService.checkMongooseID([senderId, recieverId]))\n      throw new Error('not mongoose id');\n    let chat = await this.chatModel.findOne(\n      { usersIds: { $all: [senderId, recieverId], $size: 2 } },\n      '_id',\n    );\n    await this.messageModel.updateMany(\n      {\n        chatId: chat._id,\n        date: { $lt: new Date(time) },\n        senderId: { $ne: recieverId },\n        seenStatus: { $not: { $elemMatch: { userId: recieverId } } },\n      },\n      {\n        $push: {\n          seenStatus: { userId: recieverId, time: new Date() },\n        },\n      },\n    );\n    return true;\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePinDto.html":{"url":"classes/CreatePinDto.html","title":"class - CreatePinDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePinDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pins/dto/create-pin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                board\n                            \n                            \n                                    Readonly\n                                imageHeight\n                            \n                            \n                                    Readonly\n                                imageId\n                            \n                            \n                                    Readonly\n                                imageWidth\n                            \n                            \n                                    Readonly\n                                link\n                            \n                            \n                                    Readonly\n                                note\n                            \n                            \n                                    Readonly\n                                section\n                            \n                            \n                                    Readonly\n                                title\n                            \n                            \n                                    Readonly\n                                topicName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            board\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageHeight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            imageWidth\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            link\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            note\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         String\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topicName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/pins/dto/create-pin.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreatePinDto {\n  readonly imageId: String;\n  readonly imageWidth: Number;\n  readonly imageHeight: Number;\n  readonly note: String;\n  readonly title: String;\n  readonly board: String;\n  readonly section: String;\n  readonly link: String;\n  readonly topicName: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditBoardDto.html":{"url":"classes/EditBoardDto.html","title":"class - EditBoardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditBoardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-board.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                collaboratores\n                            \n                            \n                                    Readonly\n                                description\n                            \n                            \n                                    Readonly\n                                endDate\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                startDate\n                            \n                            \n                                    Readonly\n                                topic\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratores\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            endDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            startDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-board.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditBoardDto {\n  readonly name: string;\n  readonly description: string;\n  readonly topic: string;\n  readonly startDate: string;\n  readonly endDate: string;\n  readonly collaboratores: string;\n  readonly personalization: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditCollaboratoresPermissionsDto.html":{"url":"classes/EditCollaboratoresPermissionsDto.html","title":"class - EditCollaboratoresPermissionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditCollaboratoresPermissionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/board/dto/edit-collaboratores-permissions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                addCollaborators\n                            \n                            \n                                    Readonly\n                                collaboratorId\n                            \n                            \n                                    Readonly\n                                createPin\n                            \n                            \n                                    Readonly\n                                editDescription\n                            \n                            \n                                    Readonly\n                                editTitle\n                            \n                            \n                                    Readonly\n                                personalization\n                            \n                            \n                                    Readonly\n                                savePin\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            addCollaborators\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            collaboratorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createPin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editDescription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            editTitle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            personalization\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            savePin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/board/dto/edit-collaboratores-permissions.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EditCollaboratoresPermissionsDto {\n  readonly collaboratorId: string;\n  readonly savePin: Boolean;\n  readonly createPin: Boolean;\n  readonly addCollaborators: Boolean;\n  readonly editTitle: Boolean;\n  readonly personalization: Boolean;\n  readonly editDescription: Boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Email.html":{"url":"injectables/Email.html","title":"injectable - Email","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/send-email.service.ts\n        \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/send-email.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEmail(email, message, type, userName)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/send-email.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nemail should send to \n\n\n                                    \n                                \n                                \n                                    message\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nmessage which should send  \n\n\n                                    \n                                \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nwhy send this email confirm ,change email ,.... \n\n\n                                    \n                                \n                                \n                                    userName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nthe name of email owner \n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\n/**\n * @module Email\n */\n@Injectable()\nexport class Email {\n  constructor() { }\n\n  /**\n    * @author Aya Abohadima\n    * @descriptionsend email to user email\n    * @param {String} email - email should send to \n    * @param {String} message - message which should send  \n    * @param {String} type - why send this email confirm ,change email ,.... \n    * @param {String} userName  - the name of email owner \n    */\n  async sendEmail(email, message, type, userName) {\n    var transporter = nodemailer.createTransport({\n      host: 'smtp.gmail.com',\n      port: 587,\n      secure: false,\n      auth: {\n        user: String(process.env.EMAIL),\n        pass: String(process.env.EMAIL_PASSWORD),\n      },\n      tls: {\n        rejectUnauthorized: false,\n      },\n    });\n    var mailOptions;\n    if (type === 'confirm') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Please confirm your email',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   you should confirm your email to complete sign up   Confirm',\n      };\n    } else if (type === 'change email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'You changed your email address on Phantom',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;   The email address on your Phantom account was just changed. Did you make this change? if you need it change follow this like   sure change email',\n      };\n    } else if (type === 'set email') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; You reset your email address on Phantom',\n        html:\n          '  Hi,' +\n          userName +\n          ' &#x1F60A;  you reset this email to be your new email  please follow this link to confirm that sure email',\n      };\n    } else if (type === 'forget Password') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F44B; Please reset your password ',\n        html:\n          '   Hi,' +\n          userName +\n          ', &#x1F60A;   please, do not worry at all    follow this link to reset your password    Reset Password',\n      };\n    } else if (type === 'Delete account') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: '&#x1F614; Sure delete account ',\n        html:\n          '  Hi,' +\n          userName +\n          '   Really, We are very sad because you will leave us  We have been very happy with you  follow this link  and return to us    phantom',\n      };\n    } else if (type === 'report') {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Pin Is Reported',\n        html:\n          ' ' +\n          message.userName +\n          ' (userId: ' +\n          message.userId +\n          ' ) has reported a pin for ' +\n          message.reason +\n          '   Pin Page',\n      };\n    } else {\n      mailOptions = {\n        from: '\"Phantom\" ',\n        to: email,\n        subject: 'Phantom has a message for you',\n        text: message,\n      };\n    }\n    transporter.sendMail(mailOptions);\n    return 1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/google.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\n\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n      callbackURL: `${process.env.BASE_URL}/api/google/redirect`,\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { name, emails, photos } = profile;\n    console.log(profile);\n    const user = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n\n      accessToken,\n    };\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/http-exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus\n      ? exception.getStatus()\n      : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message:\n        status !== HttpStatus.INTERNAL_SERVER_ERROR\n          ? exception.message || null\n          : 'Internal server error',\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ImagesController.html":{"url":"controllers/ImagesController.html","title":"controller - ImagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ImagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getImage\n                            \n                            \n                                    Async\n                                uploadImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getImage(id: string, response, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/image/:id')\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadImage(files, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/me/uploadImage')@ApiConsumes('multipart/form-data')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/images/images.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Post,\n  Get,\n  Param,\n  Res,\n  Controller,\n  UseInterceptors,\n  Request,\n  UseGuards,\n  UploadedFiles,\n  HttpException,\n  HttpStatus,\n  ForbiddenException,\n  BadRequestException,\n  Delete,\n  Query,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiConsumes,\n  ApiBadRequestResponse,\n} from '@nestjs/swagger';\nimport { FilesInterceptor } from '@nestjs/platform-express';\nimport { ImagesService } from './images.service';\nconst path = require('path');\n\n@Controller()\nexport class ImagesController {\n  constructor(private ImagesService: ImagesService) {}\n\n  @Post('/me/uploadImage')\n  @ApiConsumes('multipart/form-data')\n  @UseInterceptors(FilesInterceptor('file'))\n  async uploadImage(@UploadedFiles() files, @Request() req) {\n    return await this.ImagesService.uploadFile(\n      files[0].originalname,\n      files[0].mimetype,\n      files[0].buffer,\n    );\n  }\n \n  @Get('/image/:id')\n  async getImage(\n    @Param('id') id: string,\n    @Res() response,\n    @Request() req,\n  ) {\n  \n    \n    if (!id || id == ' ' || id == '' || id == 'none' || id == 'null') {\n      var filePath = './src/static/default.jpg';\n      var resolvedPath = await path.resolve(filePath);\n      return response.sendFile(resolvedPath);\n    }\n    await this.ImagesService.drive.files.get(\n      { fileId: id, alt: 'media' },\n      { responseType: 'stream' },\n      function(err, res) {\n        if (err) {\n          console.log(err)\n          var filePath = './src/static/default.jpg';\n          var resolvedPath = path.resolve(filePath);\n          return response.sendFile(resolvedPath);\n        }\n        res.data\n          .on('end', () => {})\n          .on('error', err => {\n            var filePath = './src/static/default.jpg';\n            var resolvedPath = path.resolve(filePath);\n            return response.sendFile(resolvedPath);\n          })\n          .pipe(response);\n      },\n    );\n  }\n\n \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImagesModule.html":{"url":"modules/ImagesModule.html","title":"module - ImagesModule","body":"\n                   \n\n\n\n\n    Modules\n    ImagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_imports\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nImagesModule\n\nImagesModule\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/images/images.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ImagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ImagesController } from './images.controller';\nimport { ImagesService } from './images.service';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@Module({\n  imports: [SharedModule],\n  controllers: [ImagesController],\n  providers: [ImagesService],\n  exports: [ImagesService],\n})\nexport class ImagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImagesService.html":{"url":"injectables/ImagesService.html","title":"injectable - ImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/images/images.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                drive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/images/images.service.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(id)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(fileName, mimeType, stream)\n                \n            \n\n\n            \n                \n                    Defined in src/images/images.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mimeType\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stream\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            drive\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/images/images.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\n\nimport { Readable } from 'stream';\n\n\nconst scopes = ['https://www.googleapis.com/auth/drive'];\nconst fs = require('fs');\nconst gracefulFs = require('graceful-fs');\ngracefulFs.gracefulify(fs);\nconst { google } = require('googleapis');\n\n@Injectable()\nexport class ImagesService {\n  public drive;\n  constructor(   \n  ) {\n    const auth = new google.auth.JWT(\n      String(process.env.DRIVE_CLIENT_EMAIL),\n      null,\n      String(process.env.DRIVE_PRIVATE_KEY.replace(/\\\\n/g, '\\n')),\n      scopes,\n    );\n    this.drive = google.drive({ version: 'v3', auth });\n  }\n\n  async deleteFile(id) {\n    this.drive.files\n      .delete({\n        fileId: id,\n      })\n      .then(\n        async function(response) {\n          return { status: 'success' };\n        },\n        function(err) {\n          throw new NotFoundException();\n        },\n      );\n  }\n\n  async uploadFile(fileName, mimeType, stream) {\n    const readable = new Readable();\n    readable._read = () => {};\n    readable.push(stream);\n    readable.push(null);\n    var fileMetadata = {\n      name: fileName,\n    };\n    var media = {\n      mimeType: mimeType,\n      body: readable,\n    };\n    let res = await this.drive.files.create({\n      resource: fileMetadata,\n      media: media,\n      fields: 'id',\n    });\n    if (res) {\n      return [{ id: res.data.id }];\n    } else {\n      throw new BadRequestException();\n    }\n  }\n \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, done: VerifiedCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the object created from token\n\n                                    \n                                \n                                \n                                    done\n                                    \n                                            VerifiedCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        return token object \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, VerifiedCallback } from 'passport-jwt';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n  constructor(private authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET_KEY,\n    });\n  }\n\n  /**\n   * @author Aya Abohadima\n   * @description validate function to check correct object com from token\n   * @param payload the object created from token\n   * @param done \n   * return token object \n   */\n  async validate(payload: any, done: VerifiedCallback) {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/logging.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/logging.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  Logger,\n  NestInterceptor,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const now = Date.now();\n    const req = context.switchToHttp().getRequest();\n\n    const method = req.method;\n    const url = req.url;\n\n    return next\n      .handle()\n      .pipe(\n        tap(() =>\n          Logger.log(\n            `${method} ${url} ${Date.now() - now}ms`,\n            context.getClass().name,\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginDto.html":{"url":"interfaces/LoginDto.html","title":"interface - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        password\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginDto {\n  email: string;\n  password: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/payload.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        expiresIn\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        newEmail\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newEmail\n                                    \n                                \n                                \n                                    \n                                        newEmail:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Payload {\n  _id: string;\n  email?: String;\n  newEmail?: String;\n  firstName?: String;\n  iat?: number;\n  expiresIn?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PinsModule.html":{"url":"modules/PinsModule.html","title":"module - PinsModule","body":"\n                   \n\n\n\n\n    Modules\n    PinsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_imports\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/pins/pins.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PinsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PinsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BoardModule\n                        \n                        \n                            ImagesModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PinsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PinsController } from './pins.controller';\nimport { PinsService } from './pins.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Pin } from '../models/pin.schema';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Board } from '../models/board.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { NotificationService } from '../shared/notification.service';\nimport { User } from '../models/user.schema';\n\n@Module({\n  imports: [\n    SharedModule,\n    BoardModule,\n    ImagesModule,\n    MongooseModule.forFeature([\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [PinsController],\n  providers: [PinsService],\n  exports: [PinsService],\n})\nexport class PinsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecommendationController.html":{"url":"controllers/RecommendationController.html","title":"controller - RecommendationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecommendationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recommendation/recommendation.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateBoardMoreLike\n                            \n                            \n                                    Async\n                                generateHomeFeed\n                            \n                            \n                                    Async\n                                generatePinMore\n                            \n                            \n                                    Async\n                                generateSectionMoreLike\n                            \n                            \n                                    Async\n                                getBoardMore\n                            \n                            \n                                    Async\n                                getBoardsForYou\n                            \n                            \n                                    Async\n                                getFollowRecommendation\n                            \n                            \n                                    Async\n                                getHomeFeed\n                            \n                            \n                                    Async\n                                getPinMore\n                            \n                            \n                                    Async\n                                getPinsForYou\n                            \n                            \n                                    Async\n                                getPinsRecentActivity\n                            \n                            \n                                    Async\n                                getPopularPins\n                            \n                            \n                                    Async\n                                getSectionMore\n                            \n                            \n                                    Async\n                                getTopicRecommendation\n                            \n                            \n                                    Async\n                                getTrendingRecommendation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateBoardMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateBoardMoreLike(req, boardId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateHomeFeed(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/home/me')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generatePinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePinMore(req, pinId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateSectionMoreLike\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSectionMoreLike(req, boardId: string, sectionId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardMore(req, boardId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/boards/:boardId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoardsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoardsForYou(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boardsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/follow')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHomeFeed\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHomeFeed(req, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/home')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinMore(req, pinId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/pins/:pinId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsForYou\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsForYou(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsForYou')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:234\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsRecentActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsRecentActivity(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/pinsRecentActivity')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:246\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPopularPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPopularPins(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/popularPins')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:222\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSectionMore\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionMore(req, boardId: string, sectionId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/more/sections/:boardId/:sectionId')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    boardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicRecommendation(req, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/topics/:topicName')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTrendingRecommendation\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTrendingRecommendation(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/recommendation/trending')\n                \n            \n\n            \n                \n                    Defined in src/recommendation/recommendation.controller.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseFilters,\n  ForbiddenException,\n  NotAcceptableException,\n  Param,\n  Get,\n  NotFoundException,\n  Request,\n  UseGuards,\n  Query,\n  Delete,\n  Put,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { HttpExceptionFilter } from '../shared/http-exception.filter';\nimport { RecommendationService } from './recommendation.service';\n@UseFilters(HttpExceptionFilter)\n@Controller()\nexport class RecommendationController {\n  constructor(private RecommendationService: RecommendationService) {}\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/home/me')\n  async generateHomeFeed(@Request() req) {\n    req.setTimeout(0);\n    let userId = req.user._id;\n    let home = await this.RecommendationService.homeFeed(userId);\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/home')\n  async getHomeFeed(\n    @Request() req,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    let home = await this.RecommendationService.getHomeFeed(\n      userId,\n      limit,\n      offset,\n    );\n    if (home) {\n      return home;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/pins/:pinId')\n  async generatePinMore(@Request() req, @Param('pinId') pinId: string) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinMoreLike(userId, pinId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/pins/:pinId')\n  async getPinMore(\n    @Request() req,\n    @Param('pinId') pinId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getPinMoreLike(\n      pinId,\n      limit,\n      offset,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/boards/:boardId')\n  async generateBoardMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.boardMoreLike(userId, boardId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/more/sections/:boardId/:sectionId')\n  async generateSectionMoreLike(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.sectionMoreLike(\n      userId,\n      boardId,\n      sectionId,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/boards/:boardId')\n  async getBoardMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getBoardMoreLike(\n      boardId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/more/sections/:boardId/:sectionId')\n  async getSectionMore(\n    @Request() req,\n    @Param('boardId') boardId: string,\n    @Param('sectionId') sectionId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.RecommendationService.getSectionMoreLike(\n      boardId,\n      sectionId,\n      offset,\n      limit,\n    );\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/follow')\n  async getFollowRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.followAllRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/topics/:topicName')\n  async getTopicRecommendation(\n    @Request() req,\n    @Param('topicName') topicName: string,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.topicRecommendation(\n      topicName,\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/recommendation/trending')\n  async getTrendingRecommendation(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let follow = await this.RecommendationService.trendingRecommendation(\n      userId,\n    );\n    if (follow) {\n      return follow;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boardsForYou')\n  async getBoardsForYou(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let boards = await this.RecommendationService.boardsForYou(userId);\n    if (boards) {\n      return boards;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/popularPins')\n  async getPopularPins(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.popularPins(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsForYou')\n  async getPinsForYou(@Request() req) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsForYou(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/pinsRecentActivity')\n  async getPinsRecentActivity(\n    @Request() req,\n  ) {\n    let userId = req.user._id;\n    req.setTimeout(0);\n    let pins = await this.RecommendationService.pinsInspired(userId);\n    if (pins) {\n      return pins;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecommendationModule.html":{"url":"modules/RecommendationModule.html","title":"module - RecommendationModule","body":"\n                   \n\n\n\n\n    Modules\n    RecommendationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_imports\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recommendation/recommendation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecommendationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecommendationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecommendationController } from './recommendation.controller';\nimport { RecommendationService } from './recommendation.service';\nimport { Board } from '../models/board.schema';\nimport { Pin } from '../models/pin.schema';\nimport { SharedModule } from '../shared/shared.module';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User } from '../models/user.schema';\nimport { BoardModule } from '../board/board.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { NotificationService } from '../shared/notification.service';\n\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'Topic', schema: Topic },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [RecommendationController],\n  providers: [RecommendationService],\n  exports: [RecommendationService],\n})\nexport class RecommendationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterDto.html":{"url":"interfaces/RegisterDto.html","title":"interface - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                        birthday\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        isGoogle\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthday\n                                    \n                                \n                                \n                                    \n                                        birthday:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isGoogle\n                                    \n                                \n                                \n                                    \n                                        isGoogle:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RegisterDto {\n  email: string;\n  password: string;\n  birthday: string;\n  firstName: string;\n  lastName: string;\n  country?: string;\n  profileImage?: string;\n  gender?: string;\n  isGoogle?: Boolean;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SearchController.html":{"url":"controllers/SearchController.html","title":"controller - SearchController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SearchController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                search\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/allPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(req, recentSearch: Boolean, name: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/board')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(req, name)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/getKeys')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/myPins')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(req, name: string, recentSearch: Boolean, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/people')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    recentSearch\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/recentSearch')\n                \n            \n\n            \n                \n                    Defined in src/search/search.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { SearchService } from './search.service';\n@Controller('search')\nexport class SearchController {\n  constructor(private SearchService: SearchService) { }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/allPins')\n  async getAllPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getAllPins(name, limit, offset);\n    if (pins) return pins;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/myPins')\n  async getMyPins(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let pins = await this.SearchService.getMyPins(name, userId, limit, offset);\n    if (pins)\n      return pins;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/people')\n  async getPeople(\n    @Request() req,\n    @Query('name') name: string,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let users = await this.SearchService.getPeople(name, limit, offset);\n    if (users) return users;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/board')\n  async getBoards(\n    @Request() req,\n    @Query('recentSearch') recentSearch: Boolean,\n    @Query('name') name: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let userId = req.user._id;\n    if (recentSearch)\n      await this.SearchService.addToRecentSearch(userId, name);\n    let boards = await this.SearchService.getBoards(name, limit, offset);\n    if (boards) return boards;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/recentSearch')\n  async getRecentSearch(\n    @Request() req,\n  ) {\n    let userId = req.user._id;\n    let recentSearch = await this.SearchService.getRecentSearch(userId);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/getKeys')\n  async getKeys(\n    @Request() req,\n    @Query('name') name\n  ) {\n    let recentSearch = await this.SearchService.getKeys(name);\n    if (recentSearch) return recentSearch;\n    return new NotFoundException();\n\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_imports\n\n\n\ncluster_SearchModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SearchService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SearchController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SearchController } from './search.controller';\nimport { SearchService } from './search.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { Board } from '../models/board.schema';\nimport { User } from '../models/user.schema';\nimport { UserModule } from '../user/user.module';\nimport * as search from 'fuzzy-search';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'Board', schema: Board },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [SearchController],\n  providers: [SearchService],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/search/search.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addToRecentSearch\n                            \n                            \n                                    Async\n                                Fuzzy\n                            \n                            \n                                    Async\n                                getAllPins\n                            \n                            \n                                    Async\n                                getBoards\n                            \n                            \n                                    Async\n                                getKeys\n                            \n                            \n                                    Async\n                                getMyPins\n                            \n                            \n                                    Async\n                                getPeople\n                            \n                            \n                                    Async\n                                getRecentSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boardModel: Model, pinModel: Model, userModel: Model, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/search/search.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boardModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addToRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addToRecentSearch(userId, name)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id\n\n                                    \n                                \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -user object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            Fuzzy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    Fuzzy(model, params: Array, name: string, limit: number, offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -model\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -params\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -result: model objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPins(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result:pin objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getBoards\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBoards(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result: board objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getKeys\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getKeys(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyPins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyPins(name, userId, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        -result: pin objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPeople\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPeople(name, limit, offset)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                                \n                                    limit\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        result: user objects, length\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getRecentSearch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecentSearch(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/search/search.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Model, Types } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { board } from '../types/board';\nimport { user } from '../types/user';\nimport { ValidationService } from '../shared/validation.service';\nimport { pin } from '../types/pin';\nimport * as search from 'fuzzy-search';\n@Injectable()\nexport class SearchService {\n  constructor(\n    @InjectModel('Board') private readonly boardModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n    private ValidationService: ValidationService,\n  ) { }\n  /**\n* @author Dina Alaa \n* @descriptionget fuzzy search\n* @param {Array} model -model\n* @param {String} name -name\n* @param {Array} params -params\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: model objects, length\n*/\n  async Fuzzy(\n    model, params: Array,\n    name: string,\n    limit: number,\n    offset: number) {\n    const searcher = new search(model, params, {\n      caseSensitive: false,\n      sort: true,\n    });\n    let result = searcher.search(name);\n    if (result.length == 0) {\n      throw new NotFoundException()\n    }\n    return {\n      result: this.ValidationService.limitOffset(\n        limit,\n        offset,\n        result,\n      ), length: result.length\n    };\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get all pins\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result:pin objects, length\n*/\n  async getAllPins(name, limit, offset): Promise {\n    let pinFullMatch = await this.pinModel.find({ $text: { $search: name, $caseSensitive: false } }, 'imageId');\n    if (pinFullMatch.length > 0)\n      return {\n        result: this.ValidationService.limitOffset(limit, offset, pinFullMatch),\n        length: pinFullMatch.length\n      }\n    let pin = await this.pinModel.find({}, 'title note imageId').lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get my pins\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: pin objects, length\n*/\n  async getMyPins(name, userId, limit, offset): Promise {\n    if (!(await this.ValidationService.checkMongooseID([userId])))\n      throw new Error('not mongoose id');\n    let pin = await this.pinModel\n      .find({ 'creator.id': Types.ObjectId(userId) }, 'title note imageId')\n      .lean();\n    return await this.Fuzzy(pin, ['title', 'note'], name, limit, offset);\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget add to recent search\n* @param {String} userId -user id\n* @param {String} name -name\n* @returns {Object} -user object\n*/\n  async addToRecentSearch(userId, name) {\n    let user = await this.userModel.findByIdAndUpdate(userId, {\n      $pull: { recentSearch: name },\n    });\n    if (user.recentSearch.length > 4) {\n      user.recentSearch = user.recentSearch.slice(0, 4);\n      await user.save();\n    }\n    return await this.userModel\n      .findByIdAndUpdate(userId, { $push: { recentSearch: name } })\n      .lean();\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get people\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} result: user objects, length\n*/\n  async getPeople(name, limit, offset): Promise {\n    let user = await this.userModel.aggregate([\n      { $match: {} },\n      {\n        $project: {\n          boards: { $size: '$boards' },\n          followers: { $size: '$followers' },\n          profileImage: 1,\n          userName: 1,\n          lastName: 1,\n          firstName: 1,\n          google: 1,\n          googleImage: 1,\n        },\n      },\n    ]);\n    return await this.Fuzzy(\n      user,\n      ['userName'],\n      name,\n      limit,\n      offset,\n    );\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get keys\n* @param {String} name -name\n* @returns {Array}\n*/\n  async getKeys(name: string) {\n    let keysPin = await this.pinModel.find({ $text: { $search: name, $caseSensitive: false } })\n      .limit(5);\n    return keysPin.map(pin => {\n      return { name: pin.title };\n    });\n\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get recent search\n* @param {String} userId -user id\n* @returns {Array}  \n*/\n  async getRecentSearch(userId): Promise> {\n    let user = await this.userModel.findById(userId, 'recentSearch');\n    if (!user.recentSearch) {\n      user.recentSearch = [];\n      await user.save();\n    }\n    return user.recentSearch;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get all boards\n* @param {String} name -name\n* @param {Number} limit -limit\n* @param {Number} offset -offset\n* @returns {Object} -result: board objects, length\n*/\n  async getBoards(name, limit, offset): Promise {\n    let boardFullMatch = await this.boardModel.aggregate([\n      { $match: { $text: { $search: name } } },\n      {\n        $project: {\n          pins: 1,\n          sections: { $size: '$sections' },\n          coverImages: 1,\n          topic: 1,\n          description: 1,\n          name: 1,\n          creator: 1,\n        },\n      },\n    ]);\n    if (boardFullMatch.length > 0)\n      return {\n        result: this.ValidationService.limitOffset(limit, offset, boardFullMatch),\n        length: boardFullMatch\n      }\n    let board = await this.boardModel.aggregate([\n      { $match: {} },\n      {\n        $project: {\n          pins: 1,\n          sections: { $size: '$sections' },\n          coverImages: 1,\n          topic: 1,\n          description: 1,\n          name: 1,\n          creator: 1,\n        },\n      },\n    ]);\n\n    let res = await this.Fuzzy(\n      board,\n      ['name', 'description', 'topic'],\n      name,\n      limit,\n      offset,\n    );\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SharedGateway.html":{"url":"classes/SharedGateway.html","title":"class - SharedGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SharedGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/shared.gateway.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                clearUserId\n                            \n                            \n                                    Async\n                                comment\n                            \n                            \n                                delay\n                            \n                            \n                                    Async\n                                deliver\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                likeComment\n                            \n                            \n                                    Async\n                                likeReply\n                            \n                            \n                                    Async\n                                message\n                            \n                            \n                                    Async\n                                reactPin\n                            \n                            \n                                    Async\n                                reply\n                            \n                            \n                                    Async\n                                seenMessage\n                            \n                            \n                                    Async\n                                setUserId\n                            \n                            \n                                    Async\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ChatService: ChatService, pinModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/shared/shared.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ChatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/shared/shared.gateway.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('clearUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('comment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delay\n                        \n                        \n                    \n                \n            \n            \n                \ndelay(ms)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deliver\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deliver(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('delivered')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(client: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeComment(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeComment')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            likeReply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    likeReply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('likeReply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            message\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    message(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('message')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reactPin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reactPin(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reactPin')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reply\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reply(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('reply')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            seenMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    seenMessage(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('seen')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserId(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('setUserId')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            type\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    type(socket: Socket, data: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/shared/shared.gateway.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { pin } from '../types/pin';\nimport { user } from '../types/user';\nimport { ChatService } from 'src/chat/chat.service';\nconst jwt = require('jsonwebtoken');\n@WebSocketGateway()\nexport class SharedGateway {\n  @WebSocketServer() server;\n  constructor(\n    private ChatService: ChatService,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n  ) { }\n  async handleConnection(client: Socket) {\n    console.log('client connected', client.id);\n  }\n\n  @SubscribeMessage('setUserId')\n  async setUserId(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, { socketId: 1 });\n    if (user) {\n      user.socketId = socket.id;\n      await user.save();\n    }\n  }\n  delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  @SubscribeMessage('comment')\n  async comment(socket: Socket, data: any) {\n    // socket.broadcast.emit('sendComment', data);\n    //  this.server.sockets.emit('sendComment', data);\n    this.server.emit('sendComment', data);\n  }\n  @SubscribeMessage('typing')\n  async type(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    if (sender && reciever) {\n      this.server.to(reciever.socketId).emit('isTyping', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n      });\n    }\n  }\n  @SubscribeMessage('delivered')\n  async deliver(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    console.log('deliver event');\n    if (sender && reciever) {\n      this.server.to(sender.socketId).emit('setDelivered', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      await this.ChatService.deliver(recieverId, messageId);\n    }\n  }\n  @SubscribeMessage('seen')\n  async seenMessage(socket: Socket, data: any) {\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = data.messageId;\n    if (sender && reciever) {\n      this.server.to(sender.socketId).emit('setSeen', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        senderId: data.senderId,\n        messageId: data.messageId,\n      });\n      if (data.messageId)\n        await this.ChatService.seen(recieverId, messageId);\n    }\n  }\n  @SubscribeMessage('message')\n  async message(socket: Socket, data: any) {\n    let messageText = data.message;\n    let senderId = data.senderId;\n    let sender = await this.userModel.findById(senderId);\n    let recieverId = data.recieverId;\n    let reciever = await this.userModel.findById(recieverId);\n    let messageId = await this.ChatService.sendMessage(\n      senderId,\n      [recieverId],\n      messageText,\n    );\n    if (sender && reciever && messageText) {\n      this.server.to(reciever.socketId).emit('sendMessage', {\n        recieverImage: reciever.profileImage,\n        senderImage: sender.profileImage,\n        recieverName: reciever.firstName + ' ' + reciever.lastName,\n        senderName: sender.firstName + ' ' + sender.lastName,\n        message: messageText,\n        senderId: data.senderId,\n        date: Date.now(),\n        messageId: messageId,\n      });\n    }\n  }\n\n  @SubscribeMessage('reply')\n  async reply(socket: Socket, data: any) {\n    this.server.emit('sendReply', data);\n  }\n\n  @SubscribeMessage('reactPin')\n  async reactPin(socket: Socket, data: any) {\n    const token = data.token;8\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { counts: 1 });\n    this.server.emit('sendPinReact', {\n      reactType: data.reactType,\n      userName: user.firstName + ' ' + user.lastName,\n      userImage: user.profileImage,\n      pinId: data.pinId,\n      wowReacts:\n        data.reactType == 'Wow'\n          ? pin.counts.wowReacts.valueOf() + 1\n          : pin.counts.wowReacts,\n      loveReacts:\n        data.reactType == 'Love'\n          ? pin.counts.loveReacts.valueOf() + 1\n          : pin.counts.loveReacts,\n      goodIdeaReacts:\n        data.reactType == 'Good idea'\n          ? pin.counts.goodIdeaReacts.valueOf() + 1\n          : pin.counts.goodIdeaReacts,\n      hahaReacts:\n        data.reactType == 'Haha'\n          ? pin.counts.hahaReacts.valueOf() + 1\n          : pin.counts.hahaReacts,\n      thanksReacts:\n        data.reactType == 'Thanks'\n          ? pin.counts.thanksReacts.valueOf() + 1\n          : pin.counts.thanksReacts,\n    });\n  }\n\n  @SubscribeMessage('likeComment')\n  async likeComment(socket: Socket, data: any) {\n    const token = data.token;\n    const decoded = await jwt.verify(token, process.env.SECRET_KEY);\n    let userId = decoded._id;\n    let user = await this.userModel.findById(userId, {\n      firstName: 1,\n      lastName: 1,\n      profileImage: 1,\n    });\n    let pin = await this.pinModel.findById(data.pinId, { comments: 1 });\n    for (var i = 0; i \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nEmail \n\nEmail \n\n\n\nNotificationService \n\nNotificationService \n\n\n\nValidationService \n\nValidationService \n\n\n\nSharedModule\n\nSharedModule\n\nEmail  -->\n\nSharedModule->Email \n\n\n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\n\n\nChatService\n\nChatService\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Email\n                        \n                        \n                            NotificationService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, APP_INTERCEPTOR } from '@nestjs/core';\nimport { User } from '../models/user.schema';\nimport { HttpExceptionFilter } from './http-exception.filter';\nimport { LoggingInterceptor } from './logging.interceptor';\nimport { ValidationService } from './validation.service';\nimport { SharedGateway } from './shared.gateway';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Email } from './send-email.service';\nimport { NotificationService } from './notification.service';\nimport { Topic } from '../models/topic.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Message } from 'src/models/message.schema';\nimport { Chat } from 'src/models/chat.schema';\nimport { ChatService } from 'src/chat/chat.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  providers: [\n    SharedGateway,\n    ChatService,\n    ValidationService,\n    Email,\n    NotificationService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: LoggingInterceptor,\n    },\n  ],\n  exports: [NotificationService, ValidationService, Email],\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicController.html":{"url":"controllers/TopicController.html","title":"controller - TopicController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImageToTopic\n                            \n                            \n                                    Async\n                                addPinToAtopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                createTopics\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfAtopic\n                            \n                            \n                                    Async\n                                getTopic\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImageToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImageToTopic(topics: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToAtopic(pinId: string, topicName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/topic/addPin')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pinId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId: string, imageHeight: number, imageWidth: number, name: string, description: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/createTopic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopics(topics: Array, images: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createTopics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    images\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following-topics')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfAtopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfAtopic(req, topicId: string, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId/pins')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopic(req, topicId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/topic')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-topic/:topicId')\n                \n            \n\n            \n                \n                    Defined in src/topic/topic.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Put,\n  Delete,\n  ForbiddenException,\n  BadRequestException,\n  Param,\n  Get,\n  NotFoundException,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ImagesService } from '../images/images.service';\nimport { TopicService } from './topic.service';\n@Controller()\nexport class TopicController {\n  constructor(private TopicService: TopicService) { }\n  //get all the topics\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic')\n  async getTopics(@Request() req) {\n    let userId = req.user._id;\n    let topics = await this.TopicService.getTopics(userId);\n    if (topics) return topics;\n    return new NotFoundException();\n  }\n  //get a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId')\n  async getTopic(@Request() req, @Param('topicId') topicId: string) {\n    let topic = await this.TopicService.getTopicById(topicId);\n    if (topic)\n      return topic;\n    return new NotFoundException();\n  }\n  //get all pins of a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/topic/:topicId/pins')\n  async getPinsOfAtopic(\n    @Request() req,\n    @Param('topicId') topicId: string,\n    @Query('limit') limit: number,\n    @Query('offset') offset: number,\n  ) {\n    let pins = await this.TopicService.getPinsOfTopic(\n      topicId,\n      limit,\n      offset,\n    );\n    if (pins && pins.length != 0) return pins;\n    return new NotFoundException();\n  }\n  //add pin to a certain topic\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/topic/addPin')\n  async addPinToAtopic(\n    @Body('pinId') pinId: string,\n    @Body('topicName') topicName: string,\n  ) {\n    let topics = await this.TopicService.addPinToTopic(topicName, pinId);\n    if (topics) return { message: 'pin has been added successfully!' };\n    return new ForbiddenException();\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/createTopic')\n  async createTopic(\n    @Body('imageId') imageId: string,\n    @Body('imageHeight') imageHeight: number,\n    @Body('imageWidth') imageWidth: number,\n    @Body('name') name: string,\n    @Body('description') description: string,\n  ) {\n    let topic = await this.TopicService.createTopic(\n      imageId,\n      description,\n      imageWidth,\n      imageHeight,\n      name,\n    );\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @Post('/createTopics')\n  async createTopics(\n    @Body('topics') topics: Array,\n    @Body('topics') images: Array,\n  ) {\n    let topic = await this.TopicService.topicsSeeds(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n  @Put('/edit')\n  async addImageToTopic(@Body('topics') topics: Array) {\n    let topic = await this.TopicService.editTopic(topics);\n    if (topic) return topic;\n    return new ForbiddenException();\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-topic/:topicId')\n  async followTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.followTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not follow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-topic/:topicId')\n  async unfollowTopic(@Param() params, @Request() req) {\n    if (!(await this.TopicService.unfollowTopic(req.user._id, params.topicId)))\n      throw new BadRequestException('can not unfollow this topic');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-topic/:topicId')\n  async checkFollowTopic(@Param() params, @Request() req) {\n    if (\n      !(await this.TopicService.checkFollowTopic(req.user._id, params.topicId))\n    )\n      return { follow: 'false' };\n    return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following-topics')\n  async followingTopics(@Request() req) {\n    return await this.TopicService.followingTopics(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicModule.html":{"url":"modules/TopicModule.html","title":"module - TopicModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_imports\n\n\n\ncluster_TopicModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/topic/topic.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TopicService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TopicController } from './topic.controller';\nimport { TopicService } from './topic.service';\nimport { Pin } from '../models/pin.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BoardModule } from '../board/board.module';\nimport { ImagesModule } from '../images/images.module';\nimport { Topic } from '../models/topic.schema';\nimport { PinsModule } from '../pins/pins.module';\nimport { SharedModule } from '../shared/shared.module';\nimport { User } from '../models/user.schema';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  imports: [\n    SharedModule,\n    UserModule,\n    MongooseModule.forFeature([\n      { name: 'Topic', schema: Topic },\n      { name: 'Pin', schema: Pin },\n      { name: 'User', schema: User },\n    ]),\n  ],\n  controllers: [TopicController],\n  providers: [TopicService],\n})\nexport class TopicModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicService.html":{"url":"injectables/TopicService.html","title":"injectable - TopicService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TopicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topic/topic.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addPinToTopic\n                            \n                            \n                                    Async\n                                checkFollowTopic\n                            \n                            \n                                    Async\n                                createTopic\n                            \n                            \n                                    Async\n                                editTopic\n                            \n                            \n                                    Async\n                                followingTopics\n                            \n                            \n                                    Async\n                                followTopic\n                            \n                            \n                                    Async\n                                getPinsOfTopic\n                            \n                            \n                                    Async\n                                getTopicById\n                            \n                            \n                                    Async\n                                getTopics\n                            \n                            \n                                    Async\n                                topicsSeeds\n                            \n                            \n                                    Async\n                                unfollowTopic\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicModel: Model, pinModel: Model, userModel: Model, UserService: UserService, ValidationService: ValidationService)\n                    \n                \n                        \n                            \n                                Defined in src/topic/topic.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pinModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ValidationService\n                                                  \n                                                        \n                                                                        ValidationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addPinToTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addPinToTopic(topicName, pinId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicName\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    pinId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -pin id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkFollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkFollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTopic(imageId: string, description: string, imageWidth: number, imageHeight: number, name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    imageId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image id  \n\n                                    \n                                \n                                \n                                    description\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -description \n\n                                    \n                                \n                                \n                                    imageWidth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image width\n\n                                    \n                                \n                                \n                                    imageHeight\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -image height\n\n                                    \n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -name\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editTopic(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followingTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followingTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        -following topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPinsOfTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPinsOfTopic(topicId: string, limit: number, offset: number)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id  \n\n                                    \n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -limit\n\n                                    \n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -offset\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -pin objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicById(topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -topic id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        -topic object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopics\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopics(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        -topic objects\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            topicsSeeds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    topicsSeeds(topics)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topics\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowTopic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowTopic(userId, topicId)\n                \n            \n\n\n            \n                \n                    Defined in src/topic/topic.service.ts:251\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        -user id  \n\n                                    \n                                \n                                \n                                    topicId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \ntopic id\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        1\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  HttpException,\n  HttpStatus,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport * as mongoose from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { topic } from '../types/topic';\nimport { ValidationService } from '../shared/validation.service';\nimport { UserService } from '../user/user.service';\nimport { pin } from '../types/pin';\n\n@Injectable()\nexport class TopicService {\n  constructor(\n    @InjectModel('Topic') private readonly topicModel: Model,\n    @InjectModel('Pin') private readonly pinModel: Model,\n    @InjectModel('User') private readonly userModel: Model,\n\n    private UserService: UserService,\n    private ValidationService: ValidationService,\n  ) { }\n  async topicsSeeds(topics) {\n    for (var i = 0; i \n* @descriptionget create topic\n* @param {String} imageId -image id  \n* @param {String} description -description \n* @param {String} name -name\n* @param {Number} imageHeight -image height\n* @param {Number} imageWidth -image width\n* @returns {Object} -topic object\n*/\n  async createTopic(\n    imageId: string,\n    description: string,\n    imageWidth: number,\n    imageHeight: number,\n    name: string\n  ): Promise {\n    if (!this.ValidationService.checkMongooseID([imageId]))\n      throw new Error('not mongoose id');\n    let topicExist = await this.topicModel\n      .findOne({ name: name }, '_id')\n      .lean();\n    if (topicExist) throw new Error('topic has been already exists');\n    let topic = new this.topicModel({\n      name: name,\n      imageId: imageId,\n      imageWidth: imageWidth,\n      imageHeight: imageHeight,\n      followers: [],\n      description: description,\n      pins: [],\n    });\n    await topic.save();\n    return topic;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get topic by id\n* @param {String} topicId -topic id  \n* @returns {Object} -topic object\n*/\n  async getTopicById(topicId): Promise {\n    if (!this.ValidationService.checkMongooseID([topicId]))\n      throw new Error('not mongoose id');\n    const topic = await this.topicModel.findById(topicId, 'pins followers', (err, topic) => {\n      if (err) throw new Error('topic not found');\n      return topic;\n    });\n    return topic;\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget get topics\n* @param {String} userId -user id  \n* @returns {Array} -topic objects\n*/\n  async getTopics(userId): Promise> {\n    let topics = await this.topicModel.find(\n      {},\n      'name description imageId followers',\n      (err, topic) => {\n        if (err) throw new Error('topic not found');\n        return topic;\n      },\n    );\n    return topics.map(topic => {\n      let isFollow = topic.followers.includes(userId);\n      return {\n        isFollow,\n        _id: topic._id,\n        name: topic.name,\n        description: topic.description,\n        imageId: topic.imageId,\n      };\n    });\n  }\n  /**\n* @author Dina Alaa \n* @descriptionget add pin to topic\n* @param {String} topicId -topic id  \n* @param {Number} pinId -pin id\n* @returns {Boolean}\n*/\n  async addPinToTopic(topicName, pinId): Promise {\n    if (!this.ValidationService.checkMongooseID([pinId]))\n      throw new Error('not mongoose id');\n    let topic = await this.topicModel.find({ name: topicName }, 'pins');\n    let id = mongoose.Types.ObjectId(pinId);\n    const pin = await this.pinModel.findById(id, 'topic');\n    if (!pin) throw new NotFoundException();\n    pin.topic = topicName;\n    await pin.save().catch(err => {\n      return err;\n    });\n    if (topic && pin) {\n      topic[0].pins.push(pinId);\n      await topic[0].save().catch(err => {\n        return err;\n      });\n      return true;\n    }\n    throw new NotFoundException();\n  }\n  /**\n * @author Dina Alaa \n * @descriptionget get pins of a topic\n * @param {String} topicId -topic id  \n * @param {Number} limit -limit\n * @param {Number} offset -offset\n * @returns {Array} -pin objects\n */\n  async getPinsOfTopic(topicId: string, limit: number, offset: number): Promise {\n    if (!this.ValidationService.checkMongooseID([topicId]))\n      throw new Error('not mongoose id');\n    const topic = await this.getTopicById(topicId);\n    if (!topic.pins.length) return [];\n    let pinsIds = this.ValidationService.limitOffset(\n      limit,\n      offset,\n      topic.pins,\n    );\n    let pins = [];\n    for (let i = 0; i  {\n        if (pin) pins.push(pin);\n      });\n    }\n    return pins;\n  }\n  /**\n   * @author Aya Abohadima \n   * @descriptioncheck if this user follow this topic \n    * @param {String} userId -user id  \n    * @param {String} topicId -topic id\n    * @returns {Boolean}\n    */\n  async checkFollowTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (!(await this.UserService.getUserById(userId)))\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.getTopicById(topicId);\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers || topic.followers.length == 0) return false;\n    return topic.followers.includes(userId);\n  }\n\n  /**\n    * @author Aya Abohadima \n    * @description make user follow topic\n    * @param {String} userId -user id  \n    * @param {String} topicId - topic id\n    * @returns {Number} 1\n  */\n  async followTopic(userId, topicId) {\n    if (!this.ValidationService.checkMongooseID([userId, topicId]))\n      throw new HttpException('there is not correct id ', HttpStatus.FORBIDDEN);\n    if (await this.checkFollowTopic(userId, topicId))\n      throw new HttpException(\n        'you are already follow this topic',\n        HttpStatus.BAD_REQUEST,\n      );\n    const user = await this.UserService.getUserById(userId);\n    if (!user)\n      throw new HttpException(\n        'user id is not correct',\n        HttpStatus.UNAUTHORIZED,\n      );\n    const topic = await this.topicModel.findById(topicId, {\n      pins: 1,\n      followers: 1,\n      name: 1,\n    });\n    if (!topic)\n      throw new HttpException('topic id is not correct', HttpStatus.FORBIDDEN);\n    if (!topic.followers) topic.followers = [];\n    topic.followers.push(userId);\n    await topic.save();\n    if (!user.followingTopics) user.followingTopics = [];\n    user.followingTopics.push(topicId);\n    if (!user.lastTopics) user.lastTopics = [];\n    if (user.lastTopics.length > 0) {\n      if (user.lastTopics[user.lastTopics.length - 1].topicName == topic.name) {\n        await user.save();\n        return 1;\n      }\n    }\n    user.lastTopics.push({\n      topicName: topic.name,\n      pinsLength: topic.pins.length,\n    });\n    if (user.lastTopics.length > 5) {\n      user.lastTopics = user.lastTopics.slice(1, 5);\n    }\n    await user.save();\n    return 1;\n  }\n\n  /**\n  * @author Aya Abohadima \n  * @description make user unfollow topic\n  * @param {String} userId -user id  \n  * @param {String} topicId - topic id\n  * @returns {Number} 1\n  */\n  async unfollowTopic(userId, topicId) {\n    return this.UserService.unfollowTopic(userId, topicId);\n  }\n\n  /**\n   * @author Aya Abohadima \n   * @descriptionget user following topic\n   * @param {String} userId -user id  \n   * @returns {Array} -following topic object\n   */\n  async followingTopics(userId) {\n    return await this.topicModel.aggregate([\n      { $match: { followers: mongoose.Types.ObjectId(userId) } },\n      { $project: { followers: { $size: '$followers' }, imageId: 1, name: 1 } },\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateDto.html":{"url":"interfaces/UpdateDto.html","title":"interface - UpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        bio\n                                \n                                \n                                            Optional\n                                        birthDate\n                                \n                                \n                                            Optional\n                                        country\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        exp\n                                \n                                \n                                            Optional\n                                        firstName\n                                \n                                \n                                            Optional\n                                        gender\n                                \n                                \n                                            Optional\n                                        iat\n                                \n                                \n                                            Optional\n                                        lastName\n                                \n                                \n                                            Optional\n                                        location\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        profileImage\n                                \n                                \n                                            Optional\n                                        userName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bio\n                                    \n                                \n                                \n                                    \n                                        bio:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateDto {\n  email?: string;\n  password?: string;\n  birthDate?: Date;\n  firstName?: string;\n  lastName?: string;\n  location?: string;\n  userName?: string;\n  country?: string;\n  gender?: string;\n  bio?: string;\n  iat?: string;\n  exp?: string;\n  profileImage?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateSettingsDto.html":{"url":"interfaces/UpdateSettingsDto.html","title":"interface - UpdateSettingsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UpdateSettingsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user-settings.dto.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        activateaccount\n                                \n                                \n                                            Optional\n                                        activity\n                                \n                                \n                                            Optional\n                                        boardsForYou\n                                \n                                \n                                            Optional\n                                        boardUpdate\n                                \n                                \n                                            Optional\n                                        deleteFlag\n                                \n                                \n                                            Optional\n                                        facebook\n                                \n                                \n                                            Optional\n                                        followNotification\n                                \n                                \n                                            Optional\n                                        google\n                                \n                                \n                                            Optional\n                                        invitation\n                                \n                                \n                                            Optional\n                                        notificationCounter\n                                \n                                \n                                            Optional\n                                        pinsForYou\n                                \n                                \n                                            Optional\n                                        pinsInspired\n                                \n                                \n                                            Optional\n                                        pinsNotification\n                                \n                                \n                                            Optional\n                                        popularPins\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteFlag\n                                    \n                                \n                                \n                                    \n                                        deleteFlag:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UpdateSettingsDto {\n  facebook?: Boolean;\n  activity?: Boolean;\n  invitation?: Boolean;\n  boardUpdate?: Boolean;\n  google?: Boolean;\n  deleteFlag?: Boolean;\n  boardsForYou?: Boolean;\n  popularPins?: Boolean;\n  pinsForYou?: Boolean;\n  pinsInspired?: Boolean;\n  activateaccount?: Boolean;\n  followNotification?: Boolean;\n  pinsNotification?: Boolean;\n  notificationCounter?: any;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkfollowingUser\n                            \n                            \n                                    Async\n                                confirmUpdateEmail\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFollowers\n                            \n                            \n                                    Async\n                                getFollowings\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getPublicHome\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUserFollowers\n                            \n                            \n                                    Async\n                                getUserFollowings\n                            \n                            \n                                    Async\n                                getViewState\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                setFCMToken\n                            \n                            \n                                    Async\n                                setViewState\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                updateUserSettings\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkfollowingUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkfollowingUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            confirmUpdateEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmUpdateEmail(req, type: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/confirm-update-email')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            followUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowers(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowings(req, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNotifications\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNotifications(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('notifications/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPublicHome\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicHome(index: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/Home/:index')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(params)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowers(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/follower')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserFollowings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFollowings(req, params, limit: Number, offset: Number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:userId/following')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getViewState(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/log-out')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('users/me')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(req, newPassword: string, oldPassword: string, forgetPassword: Boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/reset-password')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oldPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    forgetPassword\n                                    \n                                                Boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setFCMToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setFCMToken(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/:fcmToken')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            setViewState\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setViewState(req, viewState: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/boards/view')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    viewState\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unfollowUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(params, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/me/follow-user/:userId')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(req, updateData: UpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUserSettings\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserSettings(req, updateData: UpdateSettingsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put('/me/update-settings')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateData\n                                    \n                                                UpdateSettingsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Put,\n  Request,\n  Delete,\n  HttpStatus,\n  HttpException,\n  Query,\n  UseGuards,\n  Param,\n  BadRequestException,\n  NotAcceptableException\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UserService } from './user.service';\nimport { Email } from '../shared/send-email.service';\nimport { UpdateSettingsDto } from './dto/update-user-settings.dto';\nimport { UpdateDto } from './dto/update-user.dto';\n@Controller()\nexport class UserController {\n  constructor(private userService: UserService, private email: Email) { }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('users/me')\n  async me(@Request() req) {\n    const user = await this.userService.getUserMe(req.user._id);\n\n    return user;\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('notifications/me')\n  async getNotifications(@Request() req) {\n    const user = await this.userService.getUserNotifications(req.user._id);\n    return user;\n  }\n  @Get('/user/:id')\n  async getUser(@Param() params) {\n    const user = await this.userService.getUserMe(params.id);\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/reset-password')\n  async resetPassword(\n    @Request() req,\n    @Body('newPassword') newPassword: string,\n    @Body('oldPassword') oldPassword: string,\n    @Body('forgetPassword') forgetPassword: Boolean,\n  ) {\n    if (forgetPassword == true) oldPassword = null;\n    else if (!oldPassword)\n      throw new HttpException(\n        'oldPassword is reqired',\n        HttpStatus.FORBIDDEN,\n      );\n    const ifRest = await this.userService.resetPassword(\n      req.user._id,\n      newPassword,\n      oldPassword,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update')\n  async updateUser(\n    @Request() req,\n    @Body() updateData: UpdateDto,\n  ) {\n    await this.userService.checkUpdateData(updateData);\n    await this.userService.updateUserInfo(req.user._id, updateData);\n    const user = await this.userService.getUserMe(req.user._id);\n    user.password = null;\n    return user;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/update-settings')\n  async updateUserSettings(\n    @Request() req,\n    @Body() updateData: UpdateSettingsDto,\n  ) {\n    if (updateData.notificationCounter)\n      return await this.userService.updateDataInUser(req.user._id, {\n        notificationCounter: 0,\n      });\n    await this.userService.updateSettings(req.user._id, updateData);\n    if (!updateData.deleteFlag) {\n      const user = await this.userService.getUserMe(req.user._id);\n      user.password = null;\n      return user;\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/confirm-update-email')\n  async confirmUpdateEmail(\n    @Request() req,\n    @Query('type') type: string,\n  ) {\n    if (!req.user.email || !req.user.newEmail || !req.user._id)\n      throw new HttpException(\n        'not correct token',\n        HttpStatus.FORBIDDEN,\n      );\n    if (type === 'changeEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.email,\n      );\n      if (!user)\n        throw new HttpException(\n          'no user by this email',\n          HttpStatus.FORBIDDEN,\n        );\n      await this.email.sendEmail(\n        req.user.newEmail,\n        req.header('Authorization'),\n        'set email',\n        req.user.firstName,\n      );\n    } else if (type === 'resetEmail') {\n      const user = await this.userService.checkMAilExistAndFormat(\n        req.user.newEmail,\n      );\n      if (user)\n        throw new HttpException(\n          'this email aleardy exists',\n          HttpStatus.FORBIDDEN,\n        );\n      if (!(await this.userService.setEmail(req.user._id, req.user.newEmail)))\n        throw new HttpException(\n          'not user or not email',\n          HttpStatus.BAD_REQUEST,\n        );\n    } else if (!type)\n      throw new HttpException(\n        'type not correct',\n        HttpStatus.FORBIDDEN,\n      );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/boards/view')\n  async setViewState(\n    @Request() req,\n    @Query('viewState') viewState: string,\n  ) {\n    const view = await this.userService.setViewState(req.user._id, viewState);\n    if (view) {\n      return { success: 'view is updated' };\n    } else {\n      throw new NotAcceptableException('view is not updated');\n    }\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/boards/view')\n  async getViewState(@Request() req) {\n    const view = await this.userService.getViewState(req.user._id);\n    if (view) {\n      return view;\n    } else {\n      throw new NotAcceptableException('cant get view state');\n    }\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/follow-user/:userId')\n  async followUser(@Param() params, @Request() req) {\n    if (!(await this.userService.followUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/me/follow-user/:userId')\n  async unfollowUser(@Param() params, @Request() req) {\n    if (!(await this.userService.unfollowUser(req.user._id, params.userId)))\n      throw new BadRequestException('can not follow this user');\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/me/:fcmToken')\n  async setFCMToken(@Param() params, @Request() req) {\n    const user = await this.userService.updateFCMTocken(\n      params.fcmToken,\n      req.user._id,\n    );\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put('/log-out')\n  async logOut(@Request() req) {\n    const user = await this.userService.updateFCMTocken(' ', req.user._id);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follow-user/:userId')\n  async checkfollowingUser(\n    @Param() params,\n    @Request() req,\n  ) {\n    const user = await this.userService.getUserById(req.user._id);\n    if (!(await this.userService.checkFollowUser(user, params.userId)))\n      return { follow: 'false' };\n    else return { follow: 'true' };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/follower')\n  async getFollowers(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/me/following')\n  async getFollowings(\n    @Request() req,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(req.user._id, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/follower')\n  async getUserFollowers(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowers(params.userId, limit, offset);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:userId/following')\n  async getUserFollowings(\n    @Request() req,\n    @Param() params,\n    @Query('limit') limit: Number,\n    @Query('offset') offset: Number,\n  ) {\n    return await this.userService.userFollowings(params.userId, limit, offset);\n  }\n\n  @Get('/Home/:index')\n  async getPublicHome(@Param('index') index: number) {\n    let pins = await this.userService.getPublicHome(index);\n    return pins;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nBoardService\n\nBoardService\n\nUserModule -->\n\nBoardService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BoardService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { SharedModule } from '../shared/shared.module';\nimport { UserController } from './user.controller';\nimport { Pin } from '../models/pin.schema';\nimport { Board } from '../models/board.schema';\nimport { Topic } from '../models/topic.schema';\nimport { UserService } from './user.service';\nimport { User } from 'src/models/user.schema';\nimport { Message } from 'src/models/message.schema';\nimport { BoardService } from '../board/board.service';\nimport { Chat } from 'src/models/chat.schema';\n@Module({\n  imports: [\n    SharedModule,\n    MongooseModule.forFeature([\n      { name: 'User', schema: User },\n      { name: 'Pin', schema: Pin },\n      { name: 'Board', schema: Board },\n      { name: 'Topic', schema: Topic },\n      { name: 'Message', schema: Message },\n      { name: 'Chat', schema: Chat },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService, BoardService],\n  exports: [UserService],\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkMongooseID\n                            \n                            \n                                limitOffset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/validation.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkMongooseID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkMongooseID(ids)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            limitOffset\n                        \n                        \n                    \n                \n            \n            \n                \nlimitOffset(limit: number, offset: number, specificElements: (string | object)[])\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    specificElements\n                                    \n                                            (string | object)[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { user } from '../types/user';\nconst ObjectId = require('mongoose').Types.ObjectId;\n@Injectable()\nexport class ValidationService {\n  constructor() { }\n\n  async checkMongooseID(ids) {\n    for (let id of ids) {\n      if (id == undefined) continue;\n      if (!ObjectId.isValid(id)) return 0;\n    }\n    return 1;\n  }\n  limitOffset(\n    limit: number,\n    offset: number,\n    specificElements: (string | object)[],\n  ): any[] {\n    if (offset >= specificElements.length) throw new NotFoundException();\n    let end = Number(limit) + Number(offset);\n    if (end > specificElements.length)\n      end = specificElements.length\n    return specificElements.slice(offset, end);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/board.html":{"url":"interfaces/board.html","title":"interface - board","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  board\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        collaborators\n                                \n                                \n                                        counts\n                                \n                                \n                                        coverImages\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        description\n                                \n                                \n                                        endDate\n                                \n                                \n                                        followers\n                                \n                                \n                                        isJoined\n                                \n                                \n                                        more\n                                \n                                \n                                        name\n                                \n                                \n                                        personalization\n                                \n                                \n                                        pins\n                                \n                                \n                                        sections\n                                \n                                \n                                        startDate\n                                \n                                \n                                        status\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        collaborators\n                                    \n                                \n                                \n                                    \n                                        collaborators:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                    \n                                \n                                \n                                    \n                                        endDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isJoined\n                                    \n                                \n                                \n                                    \n                                        isJoined:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        personalization\n                                    \n                                \n                                \n                                    \n                                        personalization:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sections\n                                    \n                                \n                                \n                                    \n                                        sections:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                    \n                                \n                                \n                                    \n                                        startDate:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                    \n                                \n                                \n                                    \n                                        status:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/chat.html":{"url":"interfaces/chat.html","title":"interface - chat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  chat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/chat.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        deletedUserIds\n                                \n                                \n                                        lastMessage\n                                \n                                \n                                        name\n                                \n                                \n                                        usersIds\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deletedUserIds\n                                    \n                                \n                                \n                                    \n                                        deletedUserIds:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastMessage\n                                    \n                                \n                                \n                                    \n                                        lastMessage:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersIds\n                                    \n                                \n                                \n                                    \n                                        usersIds:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface chat extends Document {\n    name: String,\n    usersIds: Array,\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n    }\n    date: Date,\n    deletedUserIds: Array,\n\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/comment.html":{"url":"interfaces/comment.html","title":"interface - comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        commenter\n                                \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replies\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commenter\n                                    \n                                \n                                \n                                    \n                                        commenter:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replies\n                                    \n                                \n                                \n                                    \n                                        replies:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            interface\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            interface\n            RegisterDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/board/board.controller.ts\n            \n            controller\n            BoardController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/board/board.service.ts\n            \n            injectable\n            BoardService\n            \n                0 %\n                (0/31)\n            \n        \n        \n            \n                \n                src/board/dto/edit-board.dto.ts\n            \n            class\n            EditBoardDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/board/dto/edit-collaboratores-permissions.dto.ts\n            \n            class\n            EditCollaboratoresPermissionsDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/chat/chat.controller.ts\n            \n            controller\n            ChatController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            controller\n            ImagesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/images/images.controller.ts\n            \n            variable\n            path\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            injectable\n            ImagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            gracefulFs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/images/images.service.ts\n            \n            variable\n            scopes\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            cors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            fs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Board\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/board.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Chat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/chat.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/message.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Pin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/pin.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/topic.schema.ts\n            \n            variable\n            Topic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            Schema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/models/user.schema.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/pins/dto/create-pin.dto.ts\n            \n            class\n            CreatePinDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/pins/pins.controller.ts\n            \n            controller\n            PinsController\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/pins/pins.service.ts\n            \n            injectable\n            PinsService\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.controller.ts\n            \n            controller\n            RecommendationController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/recommendation/recommendation.service.ts\n            \n            injectable\n            RecommendationService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/search/search.controller.ts\n            \n            controller\n            SearchController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/search/search.service.ts\n            \n            injectable\n            SearchService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/shared/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            variable\n            app\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/notification.service.ts\n            \n            variable\n            params\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/send-email.service.ts\n            \n            injectable\n            Email\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            class\n            SharedGateway\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/shared/shared.gateway.ts\n            \n            variable\n            jwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/shared/validation.service.ts\n            \n            variable\n            ObjectId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/topic/topic.controller.ts\n            \n            controller\n            TopicController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/topic/topic.service.ts\n            \n            injectable\n            TopicService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            board\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/types/board.ts\n            \n            interface\n            section\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/chat.ts\n            \n            interface\n            chat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/message.ts\n            \n            interface\n            message\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/payload.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            comment\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            pin\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/types/pin.ts\n            \n            interface\n            reply\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types/topic.ts\n            \n            interface\n            topic\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/types/user.ts\n            \n            interface\n            user\n            \n                0 %\n                (0/46)\n            \n        \n        \n            \n                \n                src/user/dto/update-user-settings.dto.ts\n            \n            interface\n            UpdateSettingsDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            interface\n            UpdateDto\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/36)\n            \n        \n        \n            \n                \n                src/utilities/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.11\n        \n            @google-cloud/firestore : ^4.2.0\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs-modules/mailer : ^1.5.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/platform-socket.io : ^7.3.2\n        \n            @nestjs/serve-static : ^2.1.3\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjs/websockets : ^7.3.2\n        \n            @types/fuzzy-search : ^2.1.0\n        \n            @types/multer-gridfs-storage : ^4.0.1\n        \n            @types/nodemailer : ^6.4.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            dotenv : ^8.2.0\n        \n            elasticsearch : ^16.7.1\n        \n            firebase-admin : ^9.1.1\n        \n            fuzzy-search : ^3.2.1\n        \n            googleapis : ^60.0.1\n        \n            graceful-fs : ^4.2.4\n        \n            jsonwebtoken : ^8.5.1\n        \n            method-override : ^3.0.0\n        \n            mongo-gridfs : ^1.1.0\n        \n            mongoosastic : ^4.6.0\n        \n            mongoose : ^5.9.26\n        \n            mongoose-partial-search : ^1.0.5\n        \n            morgan : ^1.10.0\n        \n            multer : ^1.4.2\n        \n            multer-gridfs-storage : ^4.2.0\n        \n            node-fetch : ^2.6.0\n        \n            nodemailer : ^6.4.10\n        \n            partial : 0.0.7\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            search : ^1.0.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BoardModule\n\n\n\ncluster_BoardModule_exports\n\n\n\ncluster_BoardModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ImagesModule\n\n\n\ncluster_ImagesModule_exports\n\n\n\ncluster_ImagesModule_providers\n\n\n\ncluster_PinsModule\n\n\n\ncluster_PinsModule_exports\n\n\n\ncluster_PinsModule_providers\n\n\n\ncluster_RecommendationModule\n\n\n\ncluster_RecommendationModule_exports\n\n\n\ncluster_RecommendationModule_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBoardModule\n\nBoardModule\n\n\n\nPinsModule\n\nPinsModule\n\nPinsModule -->\n\nBoardModule->PinsModule\n\n\n\nAppModule -->\n\nBoardModule->AppModule\n\n\n\n\n\nBoardService \n\nBoardService \n\nBoardService  -->\n\nBoardModule->BoardService \n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nImagesModule\n\nImagesModule\n\nPinsModule -->\n\nImagesModule->PinsModule\n\n\n\nAppModule -->\n\nImagesModule->AppModule\n\n\n\n\n\nImagesService \n\nImagesService \n\nImagesService  -->\n\nImagesModule->ImagesService \n\n\n\nAppModule -->\n\nPinsModule->AppModule\n\n\n\n\n\nPinsService \n\nPinsService \n\nPinsService  -->\n\nPinsModule->PinsService \n\n\n\n\n\nRecommendationModule\n\nRecommendationModule\n\nAppModule -->\n\nRecommendationModule->AppModule\n\n\n\n\n\nRecommendationService \n\nRecommendationService \n\nRecommendationService  -->\n\nRecommendationModule->RecommendationService \n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\nBoardModule -->\n\nSharedModule->BoardModule\n\n\n\nChatModule -->\n\nSharedModule->ChatModule\n\n\n\nImagesModule -->\n\nSharedModule->ImagesModule\n\n\n\nPinsModule -->\n\nSharedModule->PinsModule\n\n\n\nRecommendationModule -->\n\nSharedModule->RecommendationModule\n\n\n\nSearchModule -->\n\nSharedModule->SearchModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nEmail \n\nEmail \n\nEmail  -->\n\nSharedModule->Email \n\n\n\n\n\nNotificationService \n\nNotificationService \n\nNotificationService  -->\n\nSharedModule->NotificationService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nSharedModule->ValidationService \n\n\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nTopicModule -->\n\nUserModule->TopicModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBoardService\n\nBoardService\n\nBoardModule -->\n\nBoardService->BoardModule\n\n\n\nUserModule -->\n\nBoardService->UserModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\nSharedModule -->\n\nChatService->SharedModule\n\n\n\n\n\nImagesService\n\nImagesService\n\nImagesModule -->\n\nImagesService->ImagesModule\n\n\n\n\n\nPinsService\n\nPinsService\n\nPinsModule -->\n\nPinsService->PinsModule\n\n\n\n\n\nRecommendationService\n\nRecommendationService\n\nRecommendationModule -->\n\nRecommendationService->RecommendationModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nEmail\n\nEmail\n\nSharedModule -->\n\nEmail->SharedModule\n\n\n\n\n\nNotificationService\n\nNotificationService\n\nSharedModule -->\n\nNotificationService->SharedModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nSharedModule -->\n\nValidationService->SharedModule\n\n\n\n\n\nTopicService\n\nTopicService\n\nTopicModule -->\n\nTopicService->TopicModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    14 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/message.html":{"url":"interfaces/message.html","title":"interface - message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/message.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        chatId\n                                \n                                \n                                        date\n                                \n                                \n                                        deliverStatus\n                                \n                                \n                                        message\n                                \n                                \n                                        seenStatus\n                                \n                                \n                                        senderId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chatId\n                                    \n                                \n                                \n                                    \n                                        chatId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deliverStatus\n                                    \n                                \n                                \n                                    \n                                        deliverStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seenStatus\n                                    \n                                \n                                \n                                    \n                                        seenStatus:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                    \n                                \n                                \n                                    \n                                        senderId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nexport interface message extends Document {\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array\n    seenStatus: Array\n};\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BoardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PinsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecommendationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/pin.html":{"url":"interfaces/pin.html","title":"interface - pin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  pin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        board\n                                \n                                \n                                        comments\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        creator\n                                \n                                \n                                        destLink\n                                \n                                \n                                        driveImageId\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        more\n                                \n                                \n                                        note\n                                \n                                \n                                        reacts\n                                \n                                \n                                        savers\n                                \n                                \n                                        section\n                                \n                                \n                                        title\n                                \n                                \n                                        topic\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        board\n                                    \n                                \n                                \n                                    \n                                        board:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comments\n                                    \n                                \n                                \n                                    \n                                        comments:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                    \n                                \n                                \n                                    \n                                        creator:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destLink\n                                    \n                                \n                                \n                                    \n                                        destLink:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        driveImageId\n                                    \n                                \n                                \n                                    \n                                        driveImageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        note\n                                    \n                                \n                                \n                                    \n                                        note:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reacts\n                                    \n                                \n                                \n                                    \n                                        reacts:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savers\n                                    \n                                \n                                \n                                    \n                                        savers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        section\n                                    \n                                \n                                \n                                    \n                                        section:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topic\n                                    \n                                \n                                \n                                    \n                                        topic:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/reply.html":{"url":"interfaces/reply.html","title":"interface - reply","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  reply\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/pin.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        likes\n                                \n                                \n                                        replier\n                                \n                                \n                                        reply\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        likes\n                                    \n                                \n                                \n                                    \n                                        likes:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replier\n                                    \n                                \n                                \n                                    \n                                        replier:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reply\n                                    \n                                \n                                \n                                    \n                                        reply:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface reply extends Document {\n  replier: mongoose.Types.ObjectId;\n  reply: String;\n  date: Date;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface comment extends Document {\n  commenter: mongoose.Types.ObjectId;\n  comment: String;\n  date: Date;\n  replies: Array;\n  likes: {\n    counts: Number;\n    likers: Array;\n  };\n}\nexport interface pin extends Document {\n  imageId: String;\n  driveImageId: String;\n  imageWidth: Number;\n  imageHeight: Number;\n  url: String;\n  title: String;\n  more: Array;\n  topic: String;\n  savers: Array;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  board: mongoose.Types.ObjectId;\n  section: mongoose.Types.ObjectId;\n  createdAt: Date;\n  note: String;\n  destLink: String;\n  comments: Array;\n  counts: {\n    comments: Number;\n    thanksReacts: Number;\n    loveReacts: Number;\n    wowReacts: Number;\n    goodIdeaReacts: Number;\n    hahaReacts: Number;\n  };\n  reacts: Array;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/section.html":{"url":"interfaces/section.html","title":"interface - section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/board.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        coverImages\n                                \n                                \n                                        creatorId\n                                \n                                \n                                        more\n                                \n                                \n                                        pins\n                                \n                                \n                                        sectionName\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coverImages\n                                    \n                                \n                                \n                                    \n                                        coverImages:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorId\n                                    \n                                \n                                \n                                    \n                                        creatorId:         mongoose.Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         mongoose.Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        more\n                                    \n                                \n                                \n                                    \n                                        more:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sectionName\n                                    \n                                \n                                \n                                    \n                                        sectionName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface section extends Document {\n  sectionName: String;\n  more: Array;\n  pins: Array;\n  creatorId: mongoose.Types.ObjectId;\n  coverImages: Array;\n}\nexport interface board extends Document {\n  url: String;\n  name: String;\n  startDate: String;\n  more: Array;\n  endDate: String;\n  status: String;\n  topic: String;\n  description: String;\n  personalization: Boolean;\n  creator: {\n    firstName: String;\n    lastName: String;\n    id: mongoose.Types.ObjectId;\n    profileUrl: String;\n  };\n  coverImages: Array;\n  collaborators: Array;\n  sections: Array;\n  isJoined: Boolean;\n  followers: Array;\n  pins: Array;\n  createdAt: Date;\n  counts: {\n    followers: Number;\n    joiners: Number;\n    pins: Number;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/topic.html":{"url":"interfaces/topic.html","title":"interface - topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/topic.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        description\n                                \n                                \n                                        followers\n                                \n                                \n                                        imageHeight\n                                \n                                \n                                        imageId\n                                \n                                \n                                        imageWidth\n                                \n                                \n                                        name\n                                \n                                \n                                        pins\n                                \n                                \n                                        recommendedUsers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageHeight\n                                    \n                                \n                                \n                                    \n                                        imageHeight:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageId\n                                    \n                                \n                                \n                                    \n                                        imageId:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imageWidth\n                                    \n                                \n                                \n                                    \n                                        imageWidth:         Number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:         [mongoose.Types.ObjectId]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         [mongoose.Types.ObjectId]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recommendedUsers\n                                    \n                                \n                                \n                                    \n                                        recommendedUsers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface topic extends Document {\n  name: String;\n  followers: Array;\n  description: String;\n  pins: [mongoose.Types.ObjectId];\n  imageWidth: Number;\n  imageHeight: Number;\n  recommendedUsers: Array;\n  imageId: String;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/user.html":{"url":"interfaces/user.html","title":"interface - user","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  user\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/user.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        about\n                                \n                                \n                                        activateaccount\n                                \n                                \n                                        activity\n                                \n                                \n                                        birthDate\n                                \n                                \n                                        boards\n                                \n                                \n                                        boardsForYou\n                                \n                                \n                                        boardUpdate\n                                \n                                \n                                        confirm\n                                \n                                \n                                        country\n                                \n                                \n                                        counts\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                        facebook\n                                \n                                \n                                        fcmToken\n                                \n                                \n                                        firstName\n                                \n                                \n                                        followers\n                                \n                                \n                                        following\n                                \n                                \n                                        followingTopics\n                                \n                                \n                                        followNotification\n                                \n                                \n                                        gender\n                                \n                                \n                                        google\n                                \n                                \n                                        googleImage\n                                \n                                \n                                        history\n                                \n                                \n                                        homeFeed\n                                \n                                \n                                        invitation\n                                \n                                \n                                        lastName\n                                \n                                \n                                        lastTopics\n                                \n                                \n                                        location\n                                \n                                \n                                        notificationCounter\n                                \n                                \n                                        notificationOfPinsActivity\n                                \n                                \n                                        notifications\n                                \n                                \n                                        offlineNotifications\n                                \n                                \n                                        password\n                                \n                                \n                                        pins\n                                \n                                \n                                        pinsForYou\n                                \n                                \n                                        pinsInspired\n                                \n                                \n                                        pinsNotification\n                                \n                                \n                                        popularPins\n                                \n                                \n                                        profileImage\n                                \n                                \n                                        recentSearch\n                                \n                                \n                                        savedPins\n                                \n                                \n                                        socketId\n                                \n                                \n                                        sortType\n                                \n                                \n                                        userName\n                                \n                                \n                                        viewState\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        about\n                                    \n                                \n                                \n                                    \n                                        about:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activateaccount\n                                    \n                                \n                                \n                                    \n                                        activateaccount:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        activity\n                                    \n                                \n                                \n                                    \n                                        activity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        birthDate\n                                    \n                                \n                                \n                                    \n                                        birthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boards\n                                    \n                                \n                                \n                                    \n                                        boards:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardsForYou\n                                    \n                                \n                                \n                                    \n                                        boardsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        boardUpdate\n                                    \n                                \n                                \n                                    \n                                        boardUpdate:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirm\n                                    \n                                \n                                \n                                    \n                                        confirm:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        country\n                                    \n                                \n                                \n                                    \n                                        country:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        counts\n                                    \n                                \n                                \n                                    \n                                        counts:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        facebook\n                                    \n                                \n                                \n                                    \n                                        facebook:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fcmToken\n                                    \n                                \n                                \n                                    \n                                        fcmToken:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followers\n                                    \n                                \n                                \n                                    \n                                        followers:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        following\n                                    \n                                \n                                \n                                    \n                                        following:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followingTopics\n                                    \n                                \n                                \n                                    \n                                        followingTopics:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followNotification\n                                    \n                                \n                                \n                                    \n                                        followNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        google\n                                    \n                                \n                                \n                                    \n                                        google:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleImage\n                                    \n                                \n                                \n                                    \n                                        googleImage:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        history\n                                    \n                                \n                                \n                                    \n                                        history:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        homeFeed\n                                    \n                                \n                                \n                                    \n                                        homeFeed:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        invitation\n                                    \n                                \n                                \n                                    \n                                        invitation:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastTopics\n                                    \n                                \n                                \n                                    \n                                        lastTopics:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        location\n                                    \n                                \n                                \n                                    \n                                        location:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationCounter\n                                    \n                                \n                                \n                                    \n                                        notificationCounter:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notificationOfPinsActivity\n                                    \n                                \n                                \n                                    \n                                        notificationOfPinsActivity:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        notifications\n                                    \n                                \n                                \n                                    \n                                        notifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offlineNotifications\n                                    \n                                \n                                \n                                    \n                                        offlineNotifications:     [literal type]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [literal type]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pins\n                                    \n                                \n                                \n                                    \n                                        pins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsForYou\n                                    \n                                \n                                \n                                    \n                                        pinsForYou:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsInspired\n                                    \n                                \n                                \n                                    \n                                        pinsInspired:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinsNotification\n                                    \n                                \n                                \n                                    \n                                        pinsNotification:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        popularPins\n                                    \n                                \n                                \n                                    \n                                        popularPins:         Boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImage\n                                    \n                                \n                                \n                                    \n                                        profileImage:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentSearch\n                                    \n                                \n                                \n                                    \n                                        recentSearch:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        savedPins\n                                    \n                                \n                                \n                                    \n                                        savedPins:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        socketId\n                                    \n                                \n                                \n                                    \n                                        socketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortType\n                                    \n                                \n                                \n                                    \n                                        sortType:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userName\n                                    \n                                \n                                \n                                    \n                                        userName:         String\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         String\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewState\n                                    \n                                \n                                \n                                    \n                                        viewState:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\nexport interface user extends Document {\n  firstName: String;\n  lastName: String;\n  userName: String;\n  location: String;\n  email: String;\n  password: String;\n  country: String;\n  boardsForYou: Boolean;\n  popularPins: Boolean;\n  pinsForYou: Boolean;\n  activity: Boolean;\n  invitation: Boolean;\n  boardUpdate: Boolean;\n  activateaccount: Boolean;\n  followNotification: Boolean;\n  pinsNotification: Boolean;\n  pinsInspired: Boolean;\n  birthDate: Date;\n  about: String;\n  facebook: Boolean;\n  google: Boolean;\n  notificationOfPinsActivity: Boolean;\n  gender: String;\n  googleImage: String;\n  sortType: String;\n  socketId: string;\n  notificationCounter: number;\n  profileImage: String;\n  lastTopics: Array;\n  history: Array;\n  pins: Array;\n  savedPins: Array;\n  recentSearch: Array;\n  confirm: Boolean;\n  fcmToken: String;\n  homeFeed: Array;\n  followingTopics: Array;\n  notifications: [{}];\n  offlineNotifications: [{}];\n  followers: Array;\n  following: Array;\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId;\n      name: String;\n      createdAt: Date;\n      isJoined: Boolean;\n      createdOrjoined: String;\n    },\n  ];\n  viewState: string;\n  counts: {\n    likes: Number;\n    comments: Number;\n    repins: Number;\n    saves: Number;\n  };\n  createdAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            app   (src/.../notification.service.ts)\n                        \n                        \n                            Board   (src/.../board.schema.ts)\n                        \n                        \n                            Chat   (src/.../chat.schema.ts)\n                        \n                        \n                            cors   (src/.../main.ts)\n                        \n                        \n                            fs   (src/.../images.service.ts)\n                        \n                        \n                            fs   (src/.../main.ts)\n                        \n                        \n                            gracefulFs   (src/.../images.service.ts)\n                        \n                        \n                            jwt   (src/.../shared.gateway.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            Message   (src/.../message.schema.ts)\n                        \n                        \n                            ObjectId   (src/.../validation.service.ts)\n                        \n                        \n                            params   (src/.../notification.service.ts)\n                        \n                        \n                            path   (src/.../images.controller.ts)\n                        \n                        \n                            Pin   (src/.../pin.schema.ts)\n                        \n                        \n                            Schema   (src/.../pin.schema.ts)\n                        \n                        \n                            Schema   (src/.../chat.schema.ts)\n                        \n                        \n                            Schema   (src/.../topic.schema.ts)\n                        \n                        \n                               (src/.../images.service.ts)\n                        \n                        \n                            Schema   (src/.../user.schema.ts)\n                        \n                        \n                            Schema   (src/.../board.schema.ts)\n                        \n                        \n                            Schema   (src/.../message.schema.ts)\n                        \n                        \n                            scopes   (src/.../images.service.ts)\n                        \n                        \n                            Topic   (src/.../topic.schema.ts)\n                        \n                        \n                            User   (src/.../user.schema.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/notification.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : firebase.initializeApp({\n  credential: firebase.credential.cert(params),\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            params\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: String(process.env.FIREBASE_CREADENTIAL_TYPE),\n  projectId: String(process.env.FIREBASE_CREADENTIAL_PROJECT_ID),\n  privateKeyId: String(process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY_ID),\n  privateKey: String(\n    process.env.FIREBASE_CREADENTIAL_PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n  ),\n  clientEmail: String(process.env.FIREBASE_CREADENTIAL_CLIENT_ID),\n  clientId: String(process.env.FIREBASE_CREADENTIAL_CLIENT_EMAIL),\n  authUri: String(process.env.FIREBASE_CREADENTIAL_AUTH_URI),\n  tokenUri: String(process.env.FIREBASE_CREADENTIAL_TOKEN_URI),\n  authProviderX509CertUrl: String(\n    process.env.FIREBASE_CREADENTIAL_AUTH_PROVIDER_X509_CERT_URL,\n  ),\n  clientX509CertUrl: String(\n    process.env.FIREBASE_CREADENTIAL_CLIENT_X509_CERT_URL,\n  ),\n}\n                        \n                    \n\n\n            \n        \n\n    src/models/board.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Board\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  url: String,\n  name: { type: String, index: true },\n  startDate: String,\n  endDate: String,\n  status: String,\n  topic: { type: String, index: true },\n  description: { type: String, index: true },\n  personalization: Boolean,\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  more: Array(Object),\n  coverImages: Array(String),\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    topic: String,\n  }),\n  createdAt: Date,\n  sections: [\n    {\n      sectionId: mongoose.Types.ObjectId,\n      sectionName: String,\n      more: Array(Object),\n      pins: Array({\n        pinId: mongoose.Types.ObjectId,\n        topic: String,\n      }),\n      creatorId: mongoose.Types.ObjectId,\n      coverImages: Array(String),\n    },\n  ],\n  collaborators: [\n    {\n      collaboratorId: mongoose.Types.ObjectId,\n      savePin: Boolean,\n      createPin: Boolean,\n      editTitle: Boolean,\n      editDescription: Boolean,\n      personalization: Boolean,\n      addCollaborators: Boolean,\n    },\n  ],\n  isJoined: Boolean,\n  followers: Array(mongoose.Types.ObjectId),\n  counts: {\n    followers: Number,\n    joiners: Number,\n    pins: Number,\n  },\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/chat.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Chat\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    name: String,\n    usersIds: Array(String),\n    lastMessage: {\n        userId: String,\n        message: String,\n        date: Date\n    },\n    date: Date,\n    deletedUserIds: Array(String)\n\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cors\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('cors')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('morgan')\n                        \n                    \n\n\n            \n        \n\n    src/images/images.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gracefulFs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('graceful-fs')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            \n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('googleapis')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scopes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['https://www.googleapis.com/auth/drive']\n                        \n                    \n\n\n            \n        \n\n    src/shared/shared.gateway.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('jsonwebtoken')\n                        \n                    \n\n\n            \n        \n\n    src/models/message.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Message\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n    chatId: String,\n    senderId: String,\n    message: String,\n    date: Date,\n    deliverStatus: Array({\n        userId: String,\n        time: Date\n    }),\n    seenStatus: Array({\n        userId: String,\n        time: Date\n    }),\n    senderDelete: Boolean\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/shared/validation.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ObjectId\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('mongoose').Types.ObjectId\n                        \n                    \n\n\n            \n        \n\n    src/images/images.controller.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('path')\n                        \n                    \n\n\n            \n        \n\n    src/models/pin.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Pin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  imageId: String,\n  driveImageId: String,\n  imageWidth: Number,\n  imageHeight: Number,\n  url: String,\n  title: { type: String, index: true },\n  creator: {\n    firstName: String,\n    lastName: String,\n    id: mongoose.Types.ObjectId,\n    profileUrl: String,\n  },\n  savers: Array(mongoose.Types.ObjectId),\n  board: mongoose.Types.ObjectId,\n  section: mongoose.Types.ObjectId,\n  createdAt: Date,\n  topic: String,\n  note: { type: String, index: true },\n  destLink: String,\n  comments: Array({\n    commenter: mongoose.Types.ObjectId,\n    comment: String,\n    date: Date,\n    replies: [\n      {\n        replier: mongoose.Types.ObjectId,\n        reply: String,\n        date: Date,\n        likes: {\n          counts: Number,\n          likers: [mongoose.Types.ObjectId],\n        },\n      },\n    ],\n    likes: {\n      counts: Number,\n      likers: [mongoose.Types.ObjectId],\n    },\n  }),\n  more: Array(Object),\n  counts: {\n    comments: Number,\n    thanksReacts: Number,\n    loveReacts: Number,\n    wowReacts: Number,\n    goodIdeaReacts: Number,\n    hahaReacts: Number,\n  },\n  reacts: [\n    {\n      reactType: String,\n      userId: mongoose.Types.ObjectId,\n    },\n  ],\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n\n    src/models/topic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            Topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  name: String,\n  followers: [mongoose.Types.ObjectId],\n  description: String,\n  pins: [mongoose.Types.ObjectId],\n  imageWidth: Number,\n  imageHeight: Number,\n  recommendedUsers: [mongoose.Types.ObjectId],\n  imageId: String,\n})\n                        \n                    \n\n\n            \n        \n\n    src/models/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Schema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : mongoose.Schema\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema({\n  recentSearch: Array(String),\n  firstName: { type: String, index: true },\n  lastName: { type: String, index: true },\n  email: String,\n  password: String,\n  country: String,\n  birthDate: Date,\n  followingTopics: Array(mongoose.Types.ObjectId),\n  location: String,\n  activateaccount: Boolean,\n  notificationCounter: Number,\n  activity: Boolean,\n  lastTopics: Array({\n    topicName: String,\n    pinsLength: Number,\n  }),\n  invitation: Boolean,\n  boardUpdate: Boolean,\n  followNotification: Boolean,\n  pinsNotification: Boolean,\n  facebook: Boolean,\n  google: Boolean,\n  notificationOfPinsActivity: Boolean,\n  userName: { type: String, index: true },\n  boardsForYou: Boolean,\n  pinsForYou: Boolean,\n  pinsInspired: Boolean,\n  popularPins: Boolean,\n  about: String,\n  sortType: String,\n  gender: String,\n  socketId: String,\n  homeFeed: Array(Object),\n  history: Array({\n    topic: String,\n    pinId: mongoose.Types.ObjectId,\n  }),\n  googleImage: String,\n  profileImage: String,\n  pins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n  }),\n  savedPins: Array({\n    pinId: mongoose.Types.ObjectId,\n    boardId: mongoose.Types.ObjectId,\n    sectionId: mongoose.Types.ObjectId,\n    note: String,\n  }),\n  confirm: Boolean,\n  fcmToken: String,\n  notifications: [{}],\n  offlineNotifications: [{}],\n  followers: Array(mongoose.Types.ObjectId),\n  following: Array(mongoose.Types.ObjectId),\n  viewState: String,\n  boards: [\n    {\n      boardId: mongoose.Types.ObjectId,\n      name: String,\n      createdAt: Date,\n      isJoined: Boolean,\n      createdOrjoined: String,\n    },\n  ],\n  counts: {\n    likes: Number,\n    comments: Number,\n    repins: Number,\n    saves: Number,\n  },\n  createdAt: Date,\n})\n                        \n                    \n\n\n            \n        \n\n    src/utilities/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            User\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req) => req.user)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
